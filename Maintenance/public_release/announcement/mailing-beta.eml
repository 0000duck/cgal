Subject: CGAL 5.0 Beta 1 Released, Computational Geometry Algorithms Library
Content-Type: text/plain; charset="utf-8"
Body: 

The CGAL Open Source Project is pleased to announce the release 5.0 Beta 1
of CGAL, the Computational Geometry Algorithms Library.


CGAL version 5.0 Beta 1 is a public testing release. It should provide
a solid ground to report bugs that need to be tackled before the
release of the final version of CGAL 5.0 in October.

Besides fixes and general enhancement to existing packages, the following
has changed since CGAL 4.14:


### Polygonal Surface Reconstruction (new package)

-   This package provides a method for piecewise planar object
    reconstruction from point clouds.  The method takes as input an
    unordered point set sampled from a piecewise planar object and
    outputs a compact and watertight surface mesh interpolating the
    input point set.  The method assumes that all necessary major
    planes are provided (or can be extracted from the input point set
    using the shape detection method described in Point Set Shape
    Detection, or any other alternative methods).The method can handle
    arbitrary piecewise planar objects and is capable of recovering
    sharp features and is robust to noise and outliers.


### dD Geometry Kernel

-   New exact kernel `Epeck_d`


### 2D Triangulations

-   Added range types and functions that return ranges, for example
    for all vertices, which enables to use C++11 for-loops.

-   **Breaking change**: Removed the functions
    `CGAL::Constrained_triangulation_plus_2::
    vertices_in_constraint_{begin/end}(Vertex_handle va, Vertex_handle
    vb) const;`, and
    `CGAL::Constrained_triangulation_plus_2::remove_constraint((Vertex_handle
    va, Vertex_handle vb)`, that is a pair of vertex handles is no
    longer a key for a polyline constraint.  Users must use a version
    prior to 5.0 if they need this functionality.

-   **Breaking change**: Removed the deprecated classes
    `CGAL::Regular_triangulation_euclidean_traits_2`,
    `CGAL::Regular_triangulation_filtered_traits_2`.   Users must use
    a version prior to 5.0 if they need these classes.

-   **Breaking change**: The constructor and the `insert()` function
    of `CGAL::Triangulation_2` which takes a range of points as
    argument no longer performs a `spatial_sort()` of the points.

-   Add constructor and `insert()` function to `CGAL::Triangulation_2`
    that takes a range of points with info.

-   **Breaking change**: The graph traits enabling CGAL's 2D
    triangulations to be used as a parameter for any graph-based
    algorithm of CGAL (or boost) have been improved to fully model the
    `FaceGraph` concept.  In addition, only the finite simplicies
    (those not incident to the infinite vertex) of the 2D
    triangulations are now visibile through this scope. The complete
    triangulation can still be accessed as a graph, by using the graph
    traits of the underlying triangulation data structure (usually,
    `CGAL::Triangulation_data_structure_2`).

-   Introduced a new face base class,
    `Triangulation_face_base_with_id_2` which enables storing
    user-defined integer IDs in the face of any 2D triangulation, a
    precondition to use some BGL algorithms.


### 3D Triangulations

-   Added range types and functions that return ranges, for example
    for all vertices, which enables to use C++11 for-loops.

-   **Breaking change**: The constructor and the `insert()` function
    of `CGAL::Triangulation_3` which takes a range of points as
    argument no longer performs a `spatial_sort()` of the points.

-   Add constructor and `insert()` function to `CGAL::Triangulation_3`
    that takes a range of points with info.

### Point Set Processing

-   **Breaking change**: the old API using iterators and overloads for
    optional parameters is now removed (it was deprecated since CGAL
    4.12). The current (and now only) API uses ranges and Named
    Parameters.

### Shape Detection

-   Added a new generic implementation of region growing.

-   New region growing can be launched on points in 2D and 3D and on a
    face graph.

-   **Breaking change:** `ShapeDetectionTraits` is renamed to
    `EfficientRANSACTraits`.

-   **Breaking change:** `Shape_detection_3` namespace is renamed to
    `Shape_detection`.


See https://www.cgal.org/2019/09/30/cgal50-beta1/ for a complete list of
changes.


The CGAL project is a collaborative effort to develop a robust,
easy-to-use, and efficient C++ software library of geometric data
structures and algorithms, like
- triangulations (2D constrained triangulations, Delaunay triangulations
  and periodic triangulations in 2D and 3D),
- Voronoi diagrams (for 2D and 3D points, 2D additively weighted
  Voronoi diagrams, and segment Voronoi diagrams),
- Boolean operations on polygons and polyhedra,
- regularized Boolean operations on polygons with curved arcs
- arrangements of curves,
- mesh generation (2D, 3D and surface mesh generation,
  surface mesh subdivision and parametrization),
- alpha shapes (in 2D and 3D),
- convex hull algorithms (in 2D, 3D and dD),
- operations on polygons (straight skeleton and offset polygon),
- search structures (kd trees for nearest neighbor search, and
  range and segment trees),
- interpolation (natural neighbor interpolation and placement of
  streamlines),
- optimization algorithms (smallest enclosing sphere of points or
  spheres, smallest enclosing ellipsoid of points, principal
  component analysis).




Some modules are distributed under the terms of the LGPL Open Source
license (GNU Lesser General Public License v3 or later versions).
Most modules are distributed under the terms of the GPL Open Source
license (GNU General Public License v3 or later versions).
If your intended usage does not meet the criteria of the
aforementioned licenses, a commercial license can be purchased from
GeometryFactory (http://www.geometryfactory.com/).


For further information and for downloading the library and its
documentation, please visit the CGAL web site: https://www.cgal.org/
