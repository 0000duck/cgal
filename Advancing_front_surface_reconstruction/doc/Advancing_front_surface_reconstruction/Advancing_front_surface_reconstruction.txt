
namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_Advancing_Front_Surface_Reconstruction
\anchor I1ChapterAdvancingFrontSurfaceReconstruction
\cgalAutoToc
\author Tran Kai Frank Da and David Cohen-Steiner


Surface reconstruction from an unstructured point set is to find
a surface that approximates these points. Several techniques have
been applied to this problem.  Among them are variational
methods \cgalCite{s-lsm-96}\cgalCite{zomk-insru-00}, tensor voting \cgalCite{cgal:ml-cfsg-00}, implicit surface \cgalCite{hddhjmss-pssr-94}\cgalCite{bc-ssrnn-00},
and Delaunay triangulations. 

For Delaunay based algorithms the output surface
usually is the union of some triangles selected in the Delaunay
triangulation of the input points.  Such algorithms can be volume oriented
which output the boundary of selected tetrahedra \cgalCite{abe-cbscc-97}\cgalCite{ack-pcubm-01}, or surface
oriented, that is they explicitely select triangles.

In most surface oriented Delaunay-based algorithms triangles are
selected independently, that is in parallel \cgalCite{agj-lcsr-00}\cgalCite{ab-srvf-98}.

The surface oriented Delaunay-based surface reconstruction algorithm
presented in this chapter selects triangles sequentially, that is by
using previous selected triangles to select a new one. It adds the
most *plausible* triangle first, and only adds triangles in a way
that the surface remains an orientable manifold.
 
Two other examples of this greedy approach are the ball pivoting
algorithm and Boyer and Petitjean's algorithm \cgalCite{bmrst-bpasr-99}\cgalCite{pb-rnrps-01}. In both
algorithms a triangulated surface is incrementally grown starting from
a seed triangle. Ball pivoting is fast, but the quality of the
reconstruction depends on user defined parameters corresponding to the
sampling density. The Boyer Petitjean approach can handle non-uniform
sampling, but fails when near cocircular points are encountered, and
it does not provide any guarantee on the topology of the surface.  

In the next sections we describe the algorithm, and give
examples.


\section AFSR_Definitions Definitions and the Algorithm

A detailed description of the algorithm and the underlying theory can be found
in \cgalCite{cgal:csd-gdbsra-04}.



The first step of the algorithm is the construction of a 3D Delaunay 
triangulation of the point set.
The Delaunay triangle with the smallest radius is the starting point
for the greedy algorithm. It is the initial surface and it has three
boundary edges.

The algorithm maintains a priority queue of
candidate triangles, that is of triangles incident to the boundary
edges of the current surface.  The priority is the \em plausibility.  
While this priority queue
is not empty, the algorithm selects the most plausible candidate triangle and adds into the
surface, and inserts new candidate triangles into the priority queue in case
there are new boundary edges. As the algorithm creates a two-manifold surface
some candidate triangles can not be selected due to <em>topological constraints</em> which are explained next.


\subsection AFSR_Topology Topological Constraints

Any triangle \f$t\f$ considered as next potential candidate has to share an
edge \f$e\f$ with the boundary of the current reconstruction. Let \f$b\f$
be the vertex of \f$t\f$ opposite to \f$e\f$. There are four
possible situations where \f$t\f$ may be added to the surface.
- extension,  if \f$b\f$ is not yet on the surface.
- hole filling, if \f$b\f$ is on the boundary and both neighbors of \f$b\f$ on the boundary are on edge \f$e\f$.
- ear filling, if \f$b\f$ is on the boundary and one neighbor of \f$b\f$ on the boundary is on edge \f$e\f$.
- glueing, if \f$b\f$ is on the boundary and no neighbor of \f$b\f$ on the boundary is on edge \f$e\f$.

\cgalFigureBegin{figAFSRvalid,valid.png}
Valid candidates.
\cgalFigureEnd

While the first three operations would never induce a non-manifold edge or vertex,
we only can perform glueing, if triangle \f$t\f$ has a *twin* facet, that is a 
triangle with an edge on the boundary and incident to \f$b\f$, and the
third vertex on edge \f$e\f$.

We call a triangle on which the above operations can be applied *valid*.

\subsection AFSR_Selection Plausibility of a Candidate Triangle

Valid triangles for an edge on the boundary are compared through what
we call their *radius*.  The radius of a triangle \f$t\f$ is the radius of
the smallest sphere passing through the vertices of \f$t\f$ and enclosing no
sample point. In other words, the radius \f$r_t\f$ is the distance
from any vertex of \f$t\f$ to the Voronoi edge dual to \f$t\f$.

While the radius is a good criterion in the case of 2D smooth curve 
reconstruction \cgalCite{b-cccda-94}, we need another criterion for 3D surface
reconstruction, namely the dihedral angle between triangles on the
surface, that is the angle between the normals of the triangles.

We denote by \f$ \beta_t\f$ the angle between the normal of a triangle
\f$ t\f$ incident on a boundary edge \f$ e \f$ and the normal of the
triangle on the surface incident to \f$ e \f$.

The *candidate* triangle of an edge \f$ e \f$ is the triangle 
with the smallest radius, that is valid for \f$ e \f$ 
and that has \f$ \beta_t < \alpha_\mathrm{sliver} \f$.
There may be no such triangle. In the implementation 
of the algorithm \f$ \alpha_\mathrm{sliver} = 5\pi/6 \f$.


We define the *plausibility* grade \f$ p(t) \f$ as \f$ 1/r_t \f$, if
\f$ \beta_t < \beta \f$, and \f$ -\beta_t \f$ else.  The parameter \f$
\beta \f$ can be chosen by the user and is by default \f$ \pi/6\f$.


\subsection AFSR_Boundaries Dealing with Multiple Components, Boundaries and Sharp Edges

By construction the output of the algorithm is a connected orientable
manifold with or without boundary. To cope with multiple components we
merely look for a new seed facet among facets disjoint from the
surface. In case of noisy data or outliers, the user has to filter out
small surface components.

It is impossible to handle all kinds of boundaries and non uniform sampling
at the same time. A void can either be an undersampled zone of the surface, 
or a hole.

As we do not want the algorithm to rely on a uniformity condition on
the sampling it will fill holes cut off from "flat" regions of the
surface. However, in many cases a boundary component cannot be closed
by adding a spanning disk such that the resulting disk is well
sampled. Typically, closing a boundary component due to a transversal
clipping of the operation, would yield large dihedral angles at
boundary edges. Moreover, if the boundary is sufficiently well
sampled, the radii of the two triangles incident on a boundary edge
would be very different.  These heuristic facts can be used for
boundary detection.

We discard any candidate triangle \f$ t \f$, for an edge \f$ e \f$
such that \f$ p(t) < 0\f$, and \f$ r_t > k r_{t'}\f$ where \f$ t'\f$ is 
the triangle on the surface incident on \f$ e \f$. The parameter \f$ k \f$ 
can be chosen by the user and is by default 5.


Note that this heuristic implies that 
where the sampling is too sparse with respect to curvature, it must
be sufficiently uniform for our algorithm to work.


\section AFSR_Examples Examples

\subsection AFSR_Example_function Example for Global Function 

The global function `advancing_front_surface_reconstruction()` 
takes an iterator range of points as input and writes for each face of the 
reconstructed surface a triple of point indices into an output iterator. 
In the example we write the surface in the OFF format to `std::cout`. 

\cgalExample{Advancing_front_surface_reconstruction/reconstruction_fct.cpp}


\subsection AFSR_Example_class Example for the Reconstruction Class

When using the class `Advancing_front_surface_reconstruction`
you can access a 2D triangulation data structure describing the surface.
You can explore the surface by going from faces to neighboring faces, 
and you can also go to the underlying 3D Delaunay triangulation.

In the example we write the surface in the STL (Stereo Lithography) format
to `std::cout`.

\cgalExample{Advancing_front_surface_reconstruction/reconstruction_class.cpp}

*/ 
} /* namespace CGAL */

