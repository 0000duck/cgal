Stuff to look at, as time permits:
----------------------------------
- Getting rid of the partial kernels Cartesian_2 and Cartesian_3.  This is a
  lot (1Kloc) of redundant code, and this is something only aimed at reducing
  compile time, for which I have some serious doubts anyway.  So:
  - Make a compile time benchmark between Cartesian_2 vs Cartesian, say, with
    Triangulation_2.
  - Ask Herve's opinion (original author of this ...).
  - Check it's not documented.
  - Ask on cgal-develop if anyone needs this.
  - Remove.
- Can I get rid of the empty destructors of the kernel classes ?
  The homogeneous kernel defines them too.  Why ?
  Was it useful when they derived from a virtual base having a virtual
  destructor, and thus needing this destructor ?  It's not the case anymore,
  so maybe it's time to gain a few lines :)
- Eventually merge C2, C3, Cartesian_basic (Cd ?).  Ask if it's a problem for
  others.  If not, merge them inside CVS, so that history won't be lost.
- Factorize all the new kernel traits stuff of the different kernels in a
  separate .def file, included in all kernels ?
- ::bbox() robustness issues : it's not robust, since basically, we use
  to_double().
  The homogeneous kernel uses an epsilon to get this right, in the case
  to_double() returns an error < 1 ulp().
  I would propose to use the intervals, and require the NTs to have a
  to_interval().  For most of the current ones, it's already done, so...
  Ask Stefan and the list about that.  For PointH2::bbox(), we would have:
{
  Interval_base x = CGAL::to_interval(hx());
  Interval_base y = CGAL::to_interval(hy());
  Interval_base w = CGAL::to_interval(hw());
  // The following can be slightly optimized using the advanced class.
  return Bbox_2(Interval_nt<>(x)/Interval_nt<>(w),
                Interval_nt<>(y)/Interval_nt<>(w));
}
  And PointC2::bbox():
{
  return Bbox_2(CGAL::to_interval(x()), CGAL::to_interval(y()));
}
- Orientation of Circle_2 and Sphere_3.  I wonder if it's used anywhere.
  Wouldn't it have been better if the kernel circles and spheres were not
  oriented, and if someone needs an orientation, he will be able to build one
  using the kernel's as a base or something.  Because right now, Weighted_point
  need to be defined in regular triangulations (check if it's the same
  representation, square_radius wise...)...  It seems even more strange in 3D.
  Maybe it's too late for a change, but maybe not ?
  Or maybe worth having a separate Non_oriented_Circle in the kernel ?
- How does the test-suite runs on the kernel ?  I never figured that out ;)
  Run GCOV on it, I think it's _desperately_ needed...
- There are still a few predicates and constructions that are not FT-based, but
  mainly they are the simple ones, just needing to compute an opposite or
  something.  I need to think about what to do with these, it's painful to have
  a 3-stage calling sequence for not that much...
- Factorize Cartesian and SimpleCartesian using an additional boolean template
  parameter ?
- Make this filtered kernel... first step only the predicates...
