Version 3.3.1 (September 2 1999)
- Added headers to *.C so that Utrecht cant complain

Version 3.3 (September 3 1999)
- The typename added in 3.2.3 crashes VC++, hence the #define typename for VC++

Version 3.3 (September 2 1999)
- The typename added in 3.2.3 crashes VC++, hence the #define typename for VC++

Version 3.2.6 (September 2 1999)
- removed #warning which is not standard-compliant and crashes on M$VC++

Version 3.2.5 ((September 2 1999)
- Forgot include/CGAL/Cartesian/Aff_transformation_3.h

Version 3.2.4 ((September 2 1999)
- Changed all the typename R::FT into typename ClassC2<>::FT
  for M$VC++

Version 3.2.3 (September 2 1999)
- added needed typename in all <CGAL/Cartesian/*.C>
  indeed, Class_3<R>::Subclass needs a typename qualifier for MIPSPRO 7.3
  although it worked with the other compilers

Version 3.2.2 (September 2 1999)
- fixed include files that still included <CGAL/...C2.h>
  [worked with symlinks, but not in releases newer than 2.1-I-13]

Version 3.0 (August 26 1999)
****EXTENSIVE CHANGES -- enough to warrant a new 3.0 release*****
- new <CGAL/Cartesian/...> subdirectory
  predicates_on_ftC3.h put into <CGAL/predicates/kernel_ftC3.h>
  basic_construction_ftC3.h put into <CGAL/constructions/kernel_ftC3.h>
- new scheme by Michael Hoffmann, which assumes partial specialization
- temporary scheme by Stefan Schirra, which does not assume it
- Michael' scheme by default, use -DCGAL_CFG_NO_ADVANCED_KERNEL for Stefan's
  design
  (requires $CGAL/test/NewKernel, which can be found in CGAL-3.1-I-x , x>=12)
- each file Class_3.h is not separated into Class_3.h (interface declaration)
  and Class_3.C (method definitions) for easier inclusion of all *.h before *.C
- each file Class_3.h can now be included independently of the others and of the
  representation class (as long as the template parameter R defines the other
  classes in the kernel)
****IMPORTANT: please note
- for now, while we still have two versions, two scripts (create_symlinks and
  remove_symlinks) are included which have to be run before the test suite.
  when using Michael's design. (Nothing to be done for Stefan's design!)
  This is to prevent inclusion of the wrong files *C3.h and *_3.h
  (now we want to include <CGAL/Cartesian/*_3.h> instead of *C3.h)
- in order to test Stefan's design, one needs the test/NewKernel directory
  when this is added to the internal release, this directory will disappear
****BUGS FIXES: in addition, since 2.1.6
- gcc 2.95 compliant (hopefully conform to the standard)
- added std:: for endl (suggestion by Stefan Schirra)


Version 2.1.6 (June 22 1999)
- Added missing std:: (sylvain)

Version 2.1.5 (May 23 1999)
- Fixed TetrahedronC3::operator==(), which was incorrect even in the
  generic case (it still remains undefined in the degenerate case)
- Fixed vertex() in Triangle and Tetrahedron (for the modulus operation)
- Added CGAL:: prefix to to_double() in PointC3

Version 2.1.4 (April 27 1999)
- Bug fixes by Sylvain, CGAL::compare()

Version 2.1.3 (March 30 1999)
- made the funnelweb->code

Version 2.1.2 (March 30 1999)
- Moved #includes out of namespace CGAL

Version 2.1.1 (23 March 1999)
- Added more CGAL::sign() into PlaneC3 and DirectionC3

Version 2.1 (12 March 1999)
- Changed a lot of the formatting
- Optimized some arithmetic expressions and case/switch/test statements in
  Aff_transformationC3 and PlaneC3  [Sylvain Pion]
- Finally removed OrderTypesC3, IntersectionC3 and ostreamC3 
  from the directory web/ (obsolete)
- Changed sign() to CGAL::sign() in PlaneC3.h, in predicates_on_ftC3.h,
  to avoid potential conflicts with leda
- Changed long id() for all classes  [Sylvain Pion]
  [was (int) PTR, which is unsafe on some machines] 
- Used CGAL::square whenever appropriate
- In SegmentC3, collinear_has_on() now uses predicate
- Removed const qualifier from local variables (turns out not needed)
- Used sign_of_determinant() instead of sign(determinant())
- Added distance_predicatesC3
- Include <CGAL/Threetuple.h> in RayC3.h
- Include <CGAL/Twotuple.h> in SegmentC3.h
TODO
? In TriangleC3, has_on() now uses predicate
? move cross_product() from VectorC3 to basic_constructionsC3

Version 2.0 (29 Feb 1999)
- Changed to namespace CGAL
- Added scaled_distance_to_directionC3 for *_signed_distance_to_plane

Ver 1.6 (4 January 1999)
- Revised inline policy in basic constructions and predicates
- Added const qualifier to all local variables that qualify for it
  (greatly enhances optimization)
- Optimized the 3D predicates' arithmetic expressions


Ver 1.5 (3 December 1998)
- Changes go along two directions: constructions and predicates.

BASIC CONSTRUCTIONS:
- Added basic_constructions_ftC3
- Moved all the computation basic_constructions from basic_constructions_ftC3
- Added basic constructions:
   CGAL_scaled_distance_to_plane(Plane, Point)
   CGAL_scaled_distance_to_plane(Point, Point, Point, Point)
   CGAL_squared_distance(Point, Point)
   CGAL_projection(Point,Plane)

PREDICATES
- Added predicates_on_ftC3
- Moved all the computation from predicates_on_pointsC3 to predicates_on_ftC3
- Added the predicates on squared distances (similar to C2)
   CGAL_cmp_dist_to_point(Point, Point, Point)
   CGAL_has_larger_dist_to_poin(Point, Point, Point)t
   CGAL_has_smaller_dist_to_poin(Point, Point, Point)t
   CGAL_cmp_signed_dist_to_plane(Plane, Point, Point)
   CGAL_has_larger_signed_dist_to_plane(Plane, Point, Point)
   CGAL_has_smaller_signed_dist_to_plane(Plane, Point, Point)
   [Plane can also be given implicitly by three points]
   CGAL_cmp_signed_dist_to_plane(Point, Point, Point, Point, Point)
   CGAL_has_larger_signed_dist_to_plane(Point, Point, Point, Point, Point)
   CGAL_has_smaller_signed_dist_to_plane(Point, Point, Point, Point, Point)
- Simplified expressions for collinear_are_ordered_along_line

Ver 1.4 (16 June 1998)
- Added missing declaration for FT0 in some predicates
- Added are_strictly_ordered_along_line predicate
- Changed the in-sphere predicates (corrected oriented version
  and added bounded version)
- Added the are_positive_oriented and are_negative_oriented
  predicates

Ver 1.3
- Added basic_constructionsC3 (midpoint, circumcenter, projection)

Ver 1.2
- Added CGAL_NULL_TMPL_ARGS in friend operator declaration
- New inline policy is now used: There are several levels of 
  inlining to be defined in kernel_basic.h

Ver 1.1
- New access functions have been added to Aff_transformation. (Thanks to Stefan.)

Ver 1.0
- From the Kernel design group
