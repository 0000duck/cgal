# Top level CMakeLists.txt for CGAL
# The name of our project is "CGAL".  CMakeLists files in this project can
# refer to the root source directory of the project as ${CMAKE_SOURCE_DIR} or
# ${CGAL_SOURCE_DIR} and to the root binary directory of the project as
# ${CMAKE_BINARY_DIR} or ${CGAL_BINARY_DIR}.
project(CGAL)

#--------------------------------------------------------------------------------------------------
#
#                                    -= BASIC SETUP =-
#
#--------------------------------------------------------------------------------------------------


# Where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
set(CGAL_CMAKE_MODULE_PATH ${CGAL_SOURCE_DIR}/cmake/modules)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CGAL_CMAKE_MODULE_PATH} )

include(CGALcommon)
include(GeneratorSpecificSettings)
include(CheckCXXFileRuns)
include(OptionalAddSubdirectory)

# 
# Read and parse CGAL version number from VERSION file
#
file( READ "VERSION" CGAL_VERSION )
string( REPLACE "." ";" CGAL_VERSION_TOKENS ${CGAL_VERSION} )
list( LENGTH CGAL_VERSION_TOKENS CGAL_VERSION_TOKENS_LEN )
list( GET CGAL_VERSION_TOKENS 0 CGAL_MAJOR_VERSION )

set(CGAL_MINOR_VERSION)
set(CGAL_BUILD_VERSION)

if ( CGAL_VERSION_TOKENS_LEN GREATER 1 )
  list( GET CGAL_VERSION_TOKENS 1 CGAL_MINOR_VERSION )
endif()

if ( CGAL_VERSION_TOKENS_LEN GREATER 2 )
  list( GET CGAL_VERSION_TOKENS 2 CGAL_BUILD_VERSION )
endif()

message( STATUS "CGAL_MAJOR_VERSION=${CGAL_MAJOR_VERSION}" )
message( STATUS "CGAL_MINOR_VERSION=${CGAL_MINOR_VERSION}" )
message( STATUS "CGAL_BUILD_VERSION=${CGAL_BUILD_VERSION}" )

#--------------------------------------------------------------------------------------------------
#
#                                    -= DEPENDENCIES =-
#
#--------------------------------------------------------------------------------------------------

set(CGAL_3RD_PARTY_DEFINITIONS)
set(CGAL_3RD_PARTY_INCLUDE_DIRS)
set(CGAL_3RD_PARTY_LIBRARIES)
set(CGAL_3RD_PARTY_LIBRARIES_DIR)

# This module finds dependent libraries: Boost, GMP, CORE, etc..
# Updates CGAL_3RD_PARTY_* accordingly
# Sets CGAL_USE_* which is stored in compiler_config.h
# Each dependency can be selected or unselected via the option WITH_*
include(FindCGALDependencies)


#--------------------------------------------------------------------------------------------------
#
#                                    -= Generation of compiler_config.h =-
#
#--------------------------------------------------------------------------------------------------

# The variables set are the #defines expected by compiler_config.h
# Note: CMake will not notice when files are added or removed
# but this is probably OK for the installation procedure.

file(GLOB all_config_tests "${CGAL_SOURCE_DIR}/config/testfiles/*.cpp")

file( WRITE ${CGAL_BINARY_DIR}/include/CGAL/compiler_config.h "//\n// compiler_config.h is included by CGAL headers to load the needed compiler settings.\n//\n// DO NOT EDIT compiler_config.h. It is generated by CMake.\n//\n\n")

macro( add_config_flag flag )

    if ( ${flag} )
      file( APPEND ${CGAL_BINARY_DIR}/include/CGAL/compiler_config.h "#define ${flag} 1\n\n")
    else()
      file( APPEND ${CGAL_BINARY_DIR}/include/CGAL/compiler_config.h "//#define ${flag} 1\n\n")
    endif()

endmacro()

foreach(config_test_cpp ${all_config_tests})
    
    # Test's name is .cpp's base name
    get_filename_component(config_test_name ${config_test_cpp} NAME_WE)
    
    # Compile and run ${config_test_cpp}. Exit code is stored in ${config_test_name}.
    CHECK_CXX_FILE_RUNS(${config_test_cpp} ${config_test_name} ${config_test_name})

    if ( ${config_test_name} )
      set ( ${config_test_name} 0 )
    else()
      set ( ${config_test_name} 1 )
    endif()  
    
    add_config_flag( ${config_test_name} ${config_test_name} )
    
endforeach()

add_config_flag( CGAL_USE_BOOST )
add_config_flag( CGAL_USE_BOOST_THREAD )
add_config_flag( CGAL_USE_GMP )
add_config_flag( CGAL_USE_MPFR )
add_config_flag( CGAL_USE_GMPXX )
add_config_flag( CGAL_USE_CGAL_CORE )
add_config_flag( CGAL_USE_OPENGL )

find_package(Qt3)
if(QT_FOUND)
  set( CGAL_USE_QT TRUE ) 
  add_config_flag( CGAL_USE_QT )
endif()


#--------------------------------------------------------------------------------------------------
#
#                                    -= Build =-
#
#--------------------------------------------------------------------------------------------------

set(CGAL_LIBRARIES_DIR ${CGAL_BINARY_DIR}/lib)

set(CGAL_LIBRARIES CACHE STRING "Selected CGAL Libraries")
mark_as_advanced(CGAL_LIBRARIES)

set(CGAL_DEFINITIONS ${COMMON_DEFINITIONS} CACHE STRING "Compiler definitions used for building CGAL.")

set(CGAL_LIB_SHARED_LINKER_FLAGS "${ADDITIONAL_LDFLAGS} ${CGAL_SHARED_LIB_LDFLAGS}" CACHE STRING "Linked flags used for building CGAL.")

set(CGAL_INCLUDE_DIRS ${CGAL_BINARY_DIR}/include ${CGAL_SOURCE_DIR}/include)

include_directories (${CGAL_INCLUDE_DIRS})
include_directories (${CGAL_3RD_PARTY_INCLUDE_DIRS})

add_definitions(${CGAL_DEFINITIONS})
add_definitions(${CGAL_3RD_PARTY_DEFINITIONS})

set(LIBRARY_OUTPUT_PATH ${CGAL_LIBRARIES_DIR})

set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${CGAL_LIB_STATIC_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${CGAL_LIB_SHARED_LINKER_FLAGS}")

add_subdirectory(src)

set( CGAL_LIBRARIES ${CGAL_CORE_LIBRARY} ${CGAL_LIBRARY} ${CGAL_IMAGE_IO_LIBRARY} ${CGAL_PDB_LIBRARY} ${CGAL_QT_LIBRARY} )

message( STATUS "CGAL_LIBRARIES=${CGAL_LIBRARIES}" )

#--------------------------------------------------------------------------------------------------
#
#                                    -= USER SIDE SETTINGS =-
#
#--------------------------------------------------------------------------------------------------

# FindCGAL and UseCGAL are platform specific so they are generated and stored in the binary folder.
configure_file(${CGAL_SOURCE_DIR}/CGALConfig_binary.cmake.in  ${CGAL_BINARY_DIR}/CGALConfig.cmake       @ONLY IMMEDIATE)
configure_file(${CGAL_SOURCE_DIR}/CGALConfig_install.cmake.in ${CGAL_BINARY_DIR}/cmake/CGALConfig.cmake @ONLY IMMEDIATE)


#--------------------------------------------------------------------------------------------------
#
#                                    -= INSTALLATION =-
#
#--------------------------------------------------------------------------------------------------

# WARNING: Use only relative paths; full paths break CPack!
# DESTINATION option is mandatory; skipping it breaks CPack!

set ( CGAL_INSTALL_ROOT "CGAL-${CGAL_VERSION}" CACHE STRING "The root folder where CGAL is installed relative to CMAKE_INSTALL_PREFIX" )

install(FILES CHANGES "INSTALL" INSTALL.MacOSX INSTALL.win32.txt
	            LICENSE LICENSE.FREE_USE LICENSE.LGPL LICENSE.QPL
	            README "VERSION"  
	      DESTINATION ${CGAL_INSTALL_ROOT}
       )

install(FILES "${CGAL_BINARY_DIR}/include/CGAL/compiler_config.h"  DESTINATION ${CGAL_INSTALL_ROOT}/include/CGAL )
install(FILES cmake/modules/UseCGAL.cmake DESTINATION ${CGAL_INSTALL_ROOT}/cmake/modules  )

install(DIRECTORY include/CGAL  DESTINATION ${CGAL_INSTALL_ROOT}/include )
install(DIRECTORY auxiliary     DESTINATION ${CGAL_INSTALL_ROOT}         )
install(DIRECTORY cmake/modules DESTINATION ${CGAL_INSTALL_ROOT}/cmake   )
install(DIRECTORY src           DESTINATION ${CGAL_INSTALL_ROOT}         )
install(DIRECTORY scripts       DESTINATION ${CGAL_INSTALL_ROOT}         )

install(FILES ${CGAL_BINARY_DIR}/cmake/CGALConfig.cmake DESTINATION ${CGAL_INSTALL_ROOT} )



#--------------------------------------------------------------------------------------------------
#
#                                    -= APPLICATIONS =-
#
#--------------------------------------------------------------------------------------------------


# This allows programs to locate CGALConfig.cmake
set(CGAL_DIR ${CGAL_BINARY_DIR} )

# This script does not configure demos and examples by default, but its does if requested.
optional_add_subdirectory( demo     ON EXCLUDE_FROM_ALL )
optional_add_subdirectory( examples ON EXCLUDE_FROM_ALL )

if ( WITH_demo )
  install(DIRECTORY demo DESTINATION ${CGAL_INSTALL_ROOT} COMPONENT demo )
endif()

if ( WITH_examples )
  install(DIRECTORY examples DESTINATION ${CGAL_INSTALL_ROOT} COMPONENT examples )
endif()

#--------------------------------------------------------------------------------------------------
#
#                                    -= TESTSUITE =-
#
#--------------------------------------------------------------------------------------------------

# INCLUDE(Dart)
# MARK_AS_ADVANCED(DART_ROOT TCL_TCLSH)
set(TESTING_ENABLED OFF CACHE BOOL "Turn testing on/off")
if(TESTING_ENABLED)

  ENABLE_TESTING()
  
  add_subdirectory(test EXCLUDE_FROM_ALL )
  
#     configure_file(${CGAL_SOURCE_DIR}/CMake/CTestCustom.ctest.in ${CGAL_BINARY_DIR}/CMake/CTestCustom.ctest @ONLY)
#     FILE(WRITE ${CGAL_BINARY_DIR}/CTestCustom.cmake "INCLUDE(\"${CGAL_BINARY_DIR}/CMake/CTestCustom.ctest\")\n")
endif()

#--------------------------------------------------------------------------------------------------
#
#                                            -= CPack =-
#
#--------------------------------------------------------------------------------------------------

IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CGAL - Computational Geometry Algorithms Library")
    SET(CPACK_PACKAGE_VENDOR "CGAL Open Source Project")
    SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README")
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
    SET(CPACK_PACKAGE_VERSION_MAJOR "${CGAL_MAJOR_VERSION}")
    SET(CPACK_PACKAGE_VERSION_MINOR "${CGAL_MINOR_VERSION}")
    SET(CPACK_PACKAGE_VERSION_PATCH "${CGAL_BUILD_VERSION}")
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CGAL ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}")
    SET(CPACK_SOURCE_PACKAGE_FILE_NAME "CGAL-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
    IF(NOT DEFINED CPACK_SYSTEM_NAME)
    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
    ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)
    IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
    IF(CMAKE_CL_64)
      SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
    ELSE(CMAKE_CL_64)
      SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
    ENDIF(CMAKE_CL_64)
    ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)
    IF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
      SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
    ENDIF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
    #SET(CPACK_PACKAGE_EXECUTABLES "CGAL" "CGAL")

    IF(WIN32 AND NOT UNIX)
        SET(CPACK_GENERATOR "NSIS")
        # There is a bug in NSI that does not handle full unix paths properly. Make
        # sure there is at least one set of four (4) backlasshes.
        SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}\\\\cgal_install.gif")
        #SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\CGAL.exe")
        SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} Computational Geometry Algorithms Library")
        SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.cgal.org")
        SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.cgal.com")
        SET(CPACK_NSIS_CONTACT "info@cgal.org")
        SET(CPACK_NSIS_MODIFY_PATH ON)
    ELSE(WIN32 AND NOT UNIX)
        SET(CPACK_STRIP_FILES "")
        SET(CPACK_SOURCE_STRIP_FILES "")
    ENDIF(WIN32 AND NOT UNIX)

    INCLUDE(CPack)
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")

