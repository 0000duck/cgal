# Try to find the BOOST_PROGRAM_OPTIONS library
# BOOST_PROGRAM_OPTIONS_FOUND	    - system has BOOST_PROGRAM_OPTIONS lib
# BOOST_PROGRAM_OPTIONS_LIBRARIES   - libraries needed to use BOOST_PROGRAM_OPTIONS

# TODO: support MacOSX

# BOOST_PROGRAM_OPTIONS needs Boost
find_package(Boost QUIET)
if(Boost_FOUND AND Boost_LIBRARY_DIRS)
    if (BOOST_PROGRAM_OPTIONS_LIBRARIES)
        # Already in cache, be silent
        set(BOOST_PROGRAM_OPTIONS_FIND_QUIETLY TRUE)
    endif (BOOST_PROGRAM_OPTIONS_LIBRARIES)

    find_library(BOOST_PROGRAM_OPTIONS_LIBRARIES NAMES libboost_program_options
                                                 PATHS ${Boost_LIBRARY_DIRS})

    if(BOOST_PROGRAM_OPTIONS_LIBRARIES)
        set(BOOST_PROGRAM_OPTIONS_FOUND TRUE)
    endif(BOOST_PROGRAM_OPTIONS_LIBRARIES)

    # Print success/error message
    if(BOOST_PROGRAM_OPTIONS_FOUND)
	if(NOT BOOST_PROGRAM_OPTIONS_FIND_QUIETLY)
	    message(STATUS "Found BOOST_PROGRAM_OPTIONS: ${BOOST_PROGRAM_OPTIONS_LIBRARIES}")
	endif(NOT BOOST_PROGRAM_OPTIONS_FIND_QUIETLY)
    else(BOOST_PROGRAM_OPTIONS_FOUND)
	IF(BOOST_PROGRAM_OPTIONS_FIND_REQUIRED)
	    MESSAGE(FATAL_ERROR "Could NOT find BOOST_PROGRAM_OPTIONS. Set the BOOST_PROGRAM_OPTIONS_LIBRARIES cmake cache entry.")
	ELSE(BOOST_PROGRAM_OPTIONS_FIND_REQUIRED)
	    if(NOT BOOST_PROGRAM_OPTIONS_FIND_QUIETLY)
		MESSAGE(STATUS "Could NOT find BOOST_PROGRAM_OPTIONS. Set the BOOST_PROGRAM_OPTIONS_LIBRARIES cmake cache entry.")
	    endif(NOT BOOST_PROGRAM_OPTIONS_FIND_QUIETLY)
	ENDIF(BOOST_PROGRAM_OPTIONS_FIND_REQUIRED)
    endif(BOOST_PROGRAM_OPTIONS_FOUND)

    mark_as_advanced(BOOST_PROGRAM_OPTIONS_LIBRARIES)
endif(Boost_FOUND AND Boost_LIBRARY_DIRS)
