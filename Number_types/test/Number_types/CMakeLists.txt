# based on a script created by cgal_create_cmake_script
# TODO: currently, everything depends on CORE, it would be nice to break
# that dependency so as to test all the number types not depending on CORE
# when it is not installed

project( NT_extension_test )

CMAKE_MINIMUM_REQUIRED(VERSION 2.4.5)

set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

if ( COMMAND cmake_policy )
  cmake_policy( SET CMP0003 NEW )
endif()

find_package( CGAL QUIET COMPONENTS Core )

if ( CGAL_FOUND )

  include( ${CGAL_USE_FILE} )
  include( CGAL_CreateSingleSourceCGALProgram )
  include( CGAL_VersionUtils )
  find_package( MPFI )
  IS_VERSION_LESS("${CGAL_GMP_VERSION}" "4.2.0" _IS_GMP_VERSION_TOO_LOW)
  include_directories( BEFORE ../../include include )
  create_single_source_cgal_program( "bench_interval.cpp" )
  create_single_source_cgal_program( "Coercion_traits.cpp" )
  create_single_source_cgal_program( "constant.cpp" )
  create_single_source_cgal_program( "CORE_BigFloat.cpp" )
  create_single_source_cgal_program( "CORE_BigInt.cpp" )
  create_single_source_cgal_program( "CORE_BigRat.cpp" )
  create_single_source_cgal_program( "CORE_Expr.cpp" )
  create_single_source_cgal_program( "Counted_number.cpp" )
  create_single_source_cgal_program( "double.cpp" )
  create_single_source_cgal_program( "doubletst.cpp" )
  create_single_source_cgal_program( "float.cpp" )
  create_single_source_cgal_program( "floattst.cpp" )
  create_single_source_cgal_program( "Gmpfr.cpp" )
  create_single_source_cgal_program( "Gmpq.cpp" )
  create_single_source_cgal_program( "Gmpq_new.cpp" )
  create_single_source_cgal_program( "Gmpz.cpp" )
  create_single_source_cgal_program( "Gmpzf_new.cpp" )
  create_single_source_cgal_program( "int.cpp" )
  create_single_source_cgal_program( "Interval_nt.cpp" )
  create_single_source_cgal_program( "Interval_nt_new.cpp" )
  create_single_source_cgal_program( "interval_support.cpp" )
  create_single_source_cgal_program( "ioformat.cpp" )
  create_single_source_cgal_program( "known_bit_size_integers.cpp" )
  create_single_source_cgal_program( "Lazy_exact_nt.cpp" )
  create_single_source_cgal_program( "Lazy_exact_nt_new.cpp" )
  create_single_source_cgal_program( "leda_bigfloat.cpp" )
  create_single_source_cgal_program( "leda_bigfloat_interval.cpp" )
  create_single_source_cgal_program( "leda_integer.cpp" )
  create_single_source_cgal_program( "leda_rational.cpp" )
  create_single_source_cgal_program( "leda_real.cpp" )
  create_single_source_cgal_program( "long_double.cpp" )
  create_single_source_cgal_program( "long_doubletst.cpp" )
  create_single_source_cgal_program( "long_long.cpp" )
  create_single_source_cgal_program( "MP_Float.cpp" )
  create_single_source_cgal_program( "MP_Float_exact.cpp" )
  create_single_source_cgal_program( "mpq_class.cpp" )
  create_single_source_cgal_program( "mpz_class.cpp" )
  create_single_source_cgal_program( "Nef_polynomial.cpp" )
  create_single_source_cgal_program( "NT_checker.cpp" )
  create_single_source_cgal_program( "Quotient.cpp" )
  create_single_source_cgal_program( "quotient_io.cpp" )
  create_single_source_cgal_program( "Quotient_new.cpp" )
  create_single_source_cgal_program( "root_of_2.cpp" )
  create_single_source_cgal_program( "Root_of_traits.cpp" )
  create_single_source_cgal_program( "rounding_modes.cpp" )
  create_single_source_cgal_program( "simplest_rational.cpp" )
  create_single_source_cgal_program( "Sqrt_extension.cpp" )
  create_single_source_cgal_program( "_test_valid_finite_double.cpp" )
  create_single_source_cgal_program( "_test_valid_finite_float.cpp" )
  create_single_source_cgal_program( "to_interval_test.cpp" )
  create_single_source_cgal_program( "utilities.cpp" )
  if( MPFI_FOUND )
    # for the testsuite, the version of MPFI shipped with RS is used; this
    # version needs GMP>=4.2, so we require this dependency only here and
    # not in FindMPFI.cmake (users do not need this check, it was
    # introduced only for the automatic testsuite)
    if( _IS_GMP_VERSION_TOO_LOW )
      message( STATUS
        "MPFI tests need GMP>=4.2, some of the tests will not be compiled" )
    else( _IS_GMP_VERSION_TOO_LOW )
      include( ${MPFI_USE_FILE} )
      create_single_source_cgal_program( "Gmpfi.cpp" )
    endif( _IS_GMP_VERSION_TOO_LOW )
  else( MPFI_FOUND )
    message( STATUS
      "MPFI is not present, some of the tests will not be compiled." )
  endif( MPFI_FOUND )

else( CGAL_FOUND )

  message(STATUS
    "These tests require the CGAL library and will not be compiled.")

endif( CGAL_FOUND )
