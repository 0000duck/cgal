intersect(line_2,*) was forgotten!!!!!

heriter result_type des foncteurs du Kernel (Bool_type \neq bool...)

fix manual for operator>>

manual filtered bbox kernel, ref counting

manual orientation: NO (only when points have same delta, so don't document)

add Do_intersect_2

add Qt output for bbox objects -> demo with Exact_ck
also, check that examples use Exact_CK

clean manual AK (concepts like Polynomial_1_2, access to a() b() c() ?
used in solve to check that solutions are the same)

rendre Bbox filtered kernel completement generique -> 
	utilisation dans linear kernel aussi
	CK3

echecs de filtres 

voir make_x_monotone pour que ca retourne des arcs 
(necessite bricolage de la traits car Arr_2 demande des Object)

interface intersect avec plusieurs outputIt types (types de retour differents)

--> a transferer dans linear kernel ? 
	- unoriented equal (pb general orientation dans noyau cgal...)

mettre fonctions globales 
- systematiquement dans code (il y en a qqs unes)
- dans doc
- tester

How can we avoid to call global functions of CK in internal code? 
These calls look rather dirty to me (MT). 
I tried to remove them but could not: if these calls are replaced 
by calls of internal functions, then CK::Polynomials must be accessed,
but they are undefined in Lazy_kernel...

construct intersection for *arcs* should use solve or solve in range

----------- done (?)
memory leaks in Filtered_bbox_circular_kernel_2
from Andreas: 
- there are new statements in constructors having no corresponding 
delete statements.
This concerns the files in the directory:
CGAL-3.3.1/include/CGAL/Filtered_bbox_circular_kernel_2/...with_bbox_2.h
It should be enough to add destructors and add conditional
deletes.
Reading the code I think that the IO routines also don't
do what they should do, namely computing new bboxes. 

tracker les vestiges de l'ancienne representation des points (pointeurs
vers cercles)

utiliser partout ou c'est possible le constructeur de arc_point(Point_2)

enlever messages de debug

add "using..." in all functors that derive from another


