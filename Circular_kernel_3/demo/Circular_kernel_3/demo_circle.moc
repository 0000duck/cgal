/****************************************************************************
** MyGLDrawer meta object code from reading C++ file 'demo_circle.h'
**
** Created: Mon Aug 21 16:54:29 2006
**      by: The Qt MOC ($Id$)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "demo_circle.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.4. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *MyGLDrawer::className() const
{
    return "MyGLDrawer";
}

QMetaObject *MyGLDrawer::metaObj = 0;
static QMetaObjectCleanUp cleanUp_MyGLDrawer( "MyGLDrawer", &MyGLDrawer::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString MyGLDrawer::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "MyGLDrawer", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString MyGLDrawer::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "MyGLDrawer", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* MyGLDrawer::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QGLWidget::staticMetaObject();
    static const QUMethod slot_0 = {"wire_display", 0, 0 };
    static const QUMethod slot_1 = {"surface_display", 0, 0 };
    static const QUParameter param_slot_2[] = {
	{ "x", &static_QUType_ptr, "float", QUParameter::In },
	{ "y", &static_QUType_ptr, "float", QUParameter::In },
	{ "z", &static_QUType_ptr, "float", QUParameter::In }
    };
    static const QUMethod slot_2 = {"translate", 3, param_slot_2 };
    static const QUParameter param_slot_3[] = {
	{ "rx", &static_QUType_ptr, "float", QUParameter::In },
	{ "ry", &static_QUType_ptr, "float", QUParameter::In },
	{ "rz", &static_QUType_ptr, "float", QUParameter::In }
    };
    static const QUMethod slot_3 = {"rotate", 3, param_slot_3 };
    static const QUMethod slot_4 = {"show_contour", 0, 0 };
    static const QUMethod slot_5 = {"hide_contour", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "wire_display()", &slot_0, QMetaData::Public },
	{ "surface_display()", &slot_1, QMetaData::Public },
	{ "translate(float,float,float)", &slot_2, QMetaData::Public },
	{ "rotate(float,float,float)", &slot_3, QMetaData::Public },
	{ "show_contour()", &slot_4, QMetaData::Public },
	{ "hide_contour()", &slot_5, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"MyGLDrawer", parentObject,
	slot_tbl, 6,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_MyGLDrawer.setMetaObject( metaObj );
    return metaObj;
}

void* MyGLDrawer::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "MyGLDrawer" ) )
	return this;
    return QGLWidget::qt_cast( clname );
}

bool MyGLDrawer::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: wire_display(); break;
    case 1: surface_display(); break;
    case 2: translate((float)(*((float*)static_QUType_ptr.get(_o+1))),(float)(*((float*)static_QUType_ptr.get(_o+2))),(float)(*((float*)static_QUType_ptr.get(_o+3)))); break;
    case 3: rotate((float)(*((float*)static_QUType_ptr.get(_o+1))),(float)(*((float*)static_QUType_ptr.get(_o+2))),(float)(*((float*)static_QUType_ptr.get(_o+3)))); break;
    case 4: show_contour(); break;
    case 5: hide_contour(); break;
    default:
	return QGLWidget::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool MyGLDrawer::qt_emit( int _id, QUObject* _o )
{
    return QGLWidget::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool MyGLDrawer::qt_property( int id, int f, QVariant* v)
{
    return QGLWidget::qt_property( id, f, v);
}

bool MyGLDrawer::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *MyWindow::className() const
{
    return "MyWindow";
}

QMetaObject *MyWindow::metaObj = 0;
static QMetaObjectCleanUp cleanUp_MyWindow( "MyWindow", &MyWindow::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString MyWindow::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "MyWindow", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString MyWindow::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "MyWindow", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* MyWindow::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QMainWindow::staticMetaObject();
    static const QUMethod slot_0 = {"show_contour", 0, 0 };
    static const QUMethod slot_1 = {"hide_contour", 0, 0 };
    static const QUMethod slot_2 = {"mode_wire", 0, 0 };
    static const QUMethod slot_3 = {"mode_surface", 0, 0 };
    static const QUParameter param_slot_4[] = {
	{ "p", &static_QUType_ptr, "Circle_3", QUParameter::In },
	{ "i", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_4 = {"add_cercle", 2, param_slot_4 };
    static const QUMethod slot_5 = {"rotate_tonneau_right", 0, 0 };
    static const QUMethod slot_6 = {"rotate_tonneau_left", 0, 0 };
    static const QUMethod slot_7 = {"rotate_right", 0, 0 };
    static const QUMethod slot_8 = {"rotate_left", 0, 0 };
    static const QUMethod slot_9 = {"rotate_up", 0, 0 };
    static const QUMethod slot_10 = {"rotate_down", 0, 0 };
    static const QUMethod slot_11 = {"zoom_in", 0, 0 };
    static const QUMethod slot_12 = {"zoom_out", 0, 0 };
    static const QMetaData slot_tbl[] = {
	{ "show_contour()", &slot_0, QMetaData::Public },
	{ "hide_contour()", &slot_1, QMetaData::Public },
	{ "mode_wire()", &slot_2, QMetaData::Public },
	{ "mode_surface()", &slot_3, QMetaData::Public },
	{ "add_cercle(const Circle_3&,int)", &slot_4, QMetaData::Public },
	{ "rotate_tonneau_right()", &slot_5, QMetaData::Public },
	{ "rotate_tonneau_left()", &slot_6, QMetaData::Public },
	{ "rotate_right()", &slot_7, QMetaData::Public },
	{ "rotate_left()", &slot_8, QMetaData::Public },
	{ "rotate_up()", &slot_9, QMetaData::Public },
	{ "rotate_down()", &slot_10, QMetaData::Public },
	{ "zoom_in()", &slot_11, QMetaData::Public },
	{ "zoom_out()", &slot_12, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"MyWindow", parentObject,
	slot_tbl, 13,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_MyWindow.setMetaObject( metaObj );
    return metaObj;
}

void* MyWindow::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "MyWindow" ) )
	return this;
    return QMainWindow::qt_cast( clname );
}

bool MyWindow::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: show_contour(); break;
    case 1: hide_contour(); break;
    case 2: mode_wire(); break;
    case 3: mode_surface(); break;
    case 4: add_cercle((const Circle_3&)*((const Circle_3*)static_QUType_ptr.get(_o+1)),(int)static_QUType_int.get(_o+2)); break;
    case 5: rotate_tonneau_right(); break;
    case 6: rotate_tonneau_left(); break;
    case 7: rotate_right(); break;
    case 8: rotate_left(); break;
    case 9: rotate_up(); break;
    case 10: rotate_down(); break;
    case 11: zoom_in(); break;
    case 12: zoom_out(); break;
    default:
	return QMainWindow::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool MyWindow::qt_emit( int _id, QUObject* _o )
{
    return QMainWindow::qt_emit(_id,_o);
}
#ifndef QT_NO_PROPERTIES

bool MyWindow::qt_property( int id, int f, QVariant* v)
{
    return QMainWindow::qt_property( id, f, v);
}

bool MyWindow::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
