### Section: Meta data
## Some simple polytope distance example whose constraints are permuted for each instance

with(LinearAlgebra):
is_part_of_CGAL_testsuite:= false:

desc:="Some simple polytope distance example whose constraints are permuted for each instance":

my_name:="QP_combinat_QPE_solver":

### Section: Data 

A:=Matrix([[-1, -4, 0, 0], [-1, 1, 0, 0], [4, 1, 0, 0], [0, 0, 3, -2], [0, 0, -3, -1], [0, 0, 0, 1]]):

relop:=Matrix([[0], [-1], [-1], [-1], [-1], [-1]]):

b:=Matrix([[-10], [0], [25], [13], [-25], [7]]):

c:=Matrix([[0, 0, 0, 0]]):

Q:=Matrix([[1, 0, -1, 0], [0, 1, 0, -1], [-1, 0, 1, 0], [0, -1, 0, 1]]):

### Section: Generation of test data file(s)

src_path:="./":

src:=cat(src_path, "encodeProblem"):

dest_path:="../data/":

dest:=cat(dest_path, my_name):

gen_desc:=StringTools['Join'](["Generated by ", my_name, ".mw"], ""):

read src:

m:=op(1, A)[1]:

n:=op(1, A)[2]:

l:=combinat['permute'](m, m):

for i from 1 to 1 do # combinat['numbperm'](m) do: # takes to long for all possibilities
  A_p:=A[op(i, l), 1 .. n]:
  relop_p:=relop[op(i, l), 1..1]:
  b_p:=b[op(i, l), 1..1]:
  dest_nr:=cat(dest, "_"):
  dest_nr:=cat(dest_nr, convert(i, string));
  encodeQpRatProblem(A_p, relop_p, b_p, c, Q, desc, gen_desc, dest_nr):
  encodeQpIntProblem(A_p, relop_p, b_p, c, Q, desc, gen_desc, dest_nr):
  encodeQpFloatProblem(A_p, relop_p, b_p, c, Q, desc, gen_desc, dest_nr):
end do:
