
\authors Kaspar Fischer, Bernd G&auml;rtner, Sven Sch&ouml;nherr, and Frans Wessendorp

# Classified Reference Pages #

HEADING:Concepts 
--------------

`QuadraticProgram`

\f$ \quad\f$ (for quadratic programs with variable bounds \f$ \qpl\leq \qpx \leq \qpu\f$) 

`LinearProgram` 

\f$ \quad\f$(for linear programs with variable bounds \f$ \qpl\leq \qpx \leq \qpu\f$)

`NonnegativeQuadraticProgram`

\f$ \quad\f$ (for quadratic programs with variable bounds \f$ \qpx\geq 0\f$) 

`NonnegativeLinearProgram`

\f$ \quad\f$ (for linear programs with variable bounds \f$ \qpx\geq 0\f$)

`MPSFormat`

\f$ \quad\f$ (the format used for reading and writing linear and quadratic 
programs)

HEADING:Classes 
--------------

There is a class that represents the solution of a linear
or quadratic program. An instance of this class is returned by any of 
the solution functions below.

\ref ::CGAL::Quadratic_program_solution<ET>

We offer a number of predefined models for the above program concepts.
The following two are simultaneously models for all four concepts and
are probably the most convenient models; they allow you to construct
linear or quadratic programs entry by entry, or from streams in
`MPSFormat`. At any time, you can query these programs for
linearity and nonnegativity and thus select the appropriate 
solution function.

\ref ::CGAL::Quadratic_program<NT>

\f$ \quad\f$ (for linear and quadratic programs that own their 
data and are built entry-wise)

\ref ::CGAL::Quadratic_program_from_mps<NT>

\f$ \quad\f$ (for linear and quadratic programs read from an input stream in 
`MPSFormat`; the constructed program can also be manipulate entry-wise)

Then there are specific models for any of the four program concepts above; 
these are useful if you want to maintain the program data yourself, since
they simply wrap random access iterators over the program data and involve
no further copying of data.

\ref ::CGAL::Quadratic_program_from_iterators<A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, D_it, C_it>

\f$ \quad\f$ (for quadratic programs that wrap given iterators, without copying 
data)

\ref ::CGAL::Linear_program_from_iterators<A_it, B_it, R_it, FL_it, L_it, FU_it, U_it, C_it>

\f$ \quad\f$ (for linear programs wrapping given iterators)

\ref ::CGAL::Nonnegative_quadratic_program_from_iterators<A_it, B_it, R_it, D_it, C_it>

\f$ \quad\f$ (for nonnegative quadratic programs, wrapping given iterators)

\ref ::CGAL::Nonnegative_linear_program_from_iterators<A_it, B_it, R_it, C_it>

\f$ \quad\f$ (for nonnegative linear programs, wrapping given iterators)

HEADING:Functions 
--------------

In case you want to construct a program from complicated iterators
(whose types you don't know, or simply don't want to bother with), 
we provide four makers.

\ref ::CGAL::make_quadratic_program_from_iterators

\ref ::CGAL::make_linear_program_from_iterators

\ref ::CGAL::make_nonnegative_quadratic_program_from_iterators

\ref ::CGAL::make_nonnegative_linear_program_from_iterators

There are four functions to solve a program, one for each program
concept.

\ref ::CGAL::solve_quadratic_program

\ref ::CGAL::solve_linear_program

\ref ::CGAL::solve_nonnegative_quadratic_program

\ref ::CGAL::solve_nonnegative_linear_program

The solution process can customized by passing an object of the class

\ref ::Quadratic_program_options

Programs can be written to an output stream in `MPSFormat`, using
one of the following four functions.

\ref ::CGAL::print_quadratic_program

\ref ::CGAL::print_linear_program

\ref ::CGAL::print_nonnegative_quadratic_program

\ref ::CGAL::print_nonnegative_linear_program

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
    

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
  
    
    
  

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

 

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

   
  
  
  
  
  
    

