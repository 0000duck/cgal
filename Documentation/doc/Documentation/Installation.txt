/*!
\page installation Installation
\cgalAutoToc
\authors Eric Berberich, Joachim Reichel, and Fernando Cacciola

<b>Since \cgal version 5.0, \cgal is header-only be default, which means
that there is no need to compile and install anything before it can be
used. However, the dependencies of \cgal might still need to be installed.</b>

\section seclibraries CGAL Libraries

\cgal is split into four libraries. During configuration, you can select the libraries that
you would like to build by setting a CMake variable of the form <TT>WITH_<library></TT>. By default all
are switched `ON`. All activated libraries are build after
configuration; see \ref secbuilding

We next list the libraries and essential 3rd party software
(see \ref secessential3rdpartysoftware) for each library:

| Library   | CMake Variable | Functionality | Dependencies |
| :-------- | :------------- | :------------ | :----------- |
| `%CGAL`   | none           | Main library  | \sc{Gmp}, \sc{Mpfr}, \sc{Boost} (headers) |
| `CGAL_Core` | `WITH_CGAL_Core`  | The CORE library for algebraic numbers.\cgalFootnote{CGAL_Core is not part of \cgal, but a custom version of the \sc{Core} library distributed by \cgal for the user convenience and it has it's own license.}  | \sc{Gmp} and \sc{Mpfr} |
| `CGAL_ImageIO` | `WITH_CGAL_ImageIO` | Utilities to read and write image files  | \sc{zlib}, \sc{Vtk}(optional) |
| `CGAL_Qt5`  | `WITH_CGAL_Qt5` | `QGraphicsView` support for \sc{Qt}5-based demos | \sc{Qt}5 |

\subsection installation_debug Debug vs. Release

The CMake variable `CMAKE_BUILD_TYPE` indicates how to build
the libraries. It accepts the values `Release` or
`Debug`. The default is `Release` and should be kept, unless you want to debug
your program.

This is not an issue for solution/project files, as there the user selects the build type from within the IDE.

\subsection installation_static Static vs. Shared Libraries

Shared libraries, also called <I>dynamic-link libraries</I>, are built by default
(`.dll` on Windows, `.so` on Linux, `.dylib` on MacOS). You
can choose to produce static libraries instead by setting the CMake
variable `BUILD_SHARED_LIBS` to `FALSE`. If you use
`cmake-gui`, a tick box for that variable is available to set it.

\section installation_examples CGAL Examples and Demos

\cgal is distributed with a large collection of examples and demos. By default, these are <B>not</B> configured along with
the \cgal libraries, unless you set the variables `WITH_examples=ON` and/or `WITH_demos=ON`.

Nevertheless, even when configured with \cgal, they are not automatically built along with the libraries.
You must build the `examples` or `demos` targets (or IDE projects) explicitly.

If you do not plan to compile any demos, you might skip some of the essential libraries (such as \sc{Qt}),
as the corresponding \cgal-libraries are not linked. But for
your own demos you might need these \cgal-libraries.

\section secbuilding Building CGAL

The results of a successful configuration are build files that control the build step.
The nature of the build files depends on the generator used during configuration, but in all cases they
contain several <I>targets</I>, one per library, and a default global target corresponding
to all the libraries.

For example, in a \sc{Unix}-like environment the default generator produces
makefiles. You can use the `make` command-line tool for the
succeeding build step as follows:

    cd CGAL-\cgalReleaseNumber
    # build all the selected libraries at once
    make

The resulting libraries are placed in the subdirectory `lib` under `<CMAKE_BINARY_DIR>`
(which is `CGAL-\cgalReleaseNumber` in case you run an in-source-configuration).

With generators other than `UNIX Makefiles` the resulting build files
are solution and project files which
should be launched in an \sc{Ide}, such as Visual Studio or KDevelop3. They will contain the targets described
above, which you can manually build as with any other solution/project within your \sc{Ide}.

Alternatively, you can build it with the command line version of the
\sc{Visual Studio Ide}:

    devenv CGAL.sln /Build Debug

The "Debug" argument is needed because CMake creates solution files for
all four configurations, and you need to explicitly choose one when building
(the other choices are Release, RelWithDebInfo and MinSizeRel).

\cgalAdvancedBegin
The build files produced by CMake are autoconfigured. That
is, if you change any of the dependencies, the build step
automatically goes all the way back to the configuration step. This
way, once the target has been configured the very first time by
invoking cmake, you don't necessarily need to invoke `cmake`
again. Rebuilding will call itself `cmake` and re-generate the
build file whenever needed. Keep this in mind if you configure \cgal
for the Visual Studio IDE since a build could then change the
solution/project file in-place and VS will prompt you to reload it.
\cgalAdvancedEnd

If you have turned on the configuration of examples
(`-DWITH_examples=ON`) and/or demos (`-DWITH_demos=ON`), there will be additional
targets named `examples` and `demos`, plus one target for
each example and each demo in the build files.
None of these targets are included by default, so you need to build them explicitly
<I>after</I> the \cgal libraries have been successfully built.
The targets `examples` and `demos` include themselves all the targets
for examples and demos respectively.

    # build all examples at once
    make examples

    # build all demos at once
    make demos

\cgalAdvancedBegin
When using `UNIX Makefiles` you can find out the
exact name of the example or demo target of a particular package by
typing `make help | grep <package>`.
\cgalAdvancedEnd

\section secinstalling Installing CGAL

On many platforms, library pieces such as headers, docs and binaries
are expected to be placed in specific locations. A typical example
being <A HREF="/usr/include">`/usr/include`</A> and <A HREF="/usr/lib">`/usr/lib`</A> on \sc{Unix}-like
operating systems or <A HREF="C:/Program Files/">`C:/Program Files/`</A> on Windows. The process
of placing or copying the library elements into its standard location
is sometimes referred to as <I>Installation</I> and it is a
postprocessing step after the build step.

CMake carries out the installation by producing a build target named <I>install</I>.
The following example shows a typical session from configuration to
installation in a \sc{Unix}-like environment:

    cd CGAL-\cgalReleaseNumber

    cmake . # configure
    make # compile
    make install # install

If you use a generator that produces IDE files (for Visual Studio for instance) there will be an optional
`INSTALL` project, which you will be able to <I>"build"</I> to execute the installation step.

\cgalAdvancedBegin
The files are copied into a directory tree relative to the <I>installation directory</I> determined by the
CMake variable `CMAKE_INSTALL_PREFIX`. This variable defaults to `/usr/local` under \sc{Unix}-like operating systems
and <A HREF="C:\ProgramFiles">`C:\Program Files`</A> under Windows. If you want to install to a different location, you must override that CMake
variable explicitly <I>at the configuration time</I> and not when executing the install step.
\cgalAdvancedEnd

The file `CGALConfig.cmake` is installed by default in
`$CMAKE_INSTALLED_PREFIX/lib/``CGAL-\cgalReleaseNumber`.

\section secshippedcgal OS Specific Installation

Some operating systems with package managers offer \cgal and its
essential third party software through the manager,
for instance, Mac OS X, or some Linux distribution (e.g. Debian).
For Windows, an installer is provided.

\subsection sseccgalmacosxe CGAL on macOS

The \cgal project recommends the use of <a href="https://brew.sh/">Homebrew</a>, in the following way:

    brew install cgal

\subsection sseccgaldebian CGAL on Linux

For instance in Debian/Ubuntu, use apt-get in the following way:

    sudo apt-get install libcgal-dev

To get the demos use

    sudo apt-get install libcgal-demo

Check the \cgal-FAQ for source repository of newest releases.

On other distributions, please consult your package manager documentation.

\subsection sseccgalwindows CGAL on Windows

You can download and run `CGAL-\cgalReleaseNumber``-Setup.exe` from https://www.cgal.org/download/windows.html.
It is a self extracting executable that installs the \cgal source, and that allows you
to select and download some precompiled third party libraries. However, you will need to compile
the library using your favorite compiler.
A <a href="https://www.cgal.org/download/windows.html">tutorial</a> is provided on how to proceed with Microsoft Visual Studio.

*/
