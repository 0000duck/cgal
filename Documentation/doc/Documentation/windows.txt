/*!
\page windows Installing %CGAL for Visual C++ on Windows
\cgalAutoToc

\cgal is a library that has mandatory dependencies that must be first installed:
\ref thirdpartyBoost and \ref thirdpartyMPFR.

You have two options to install mandatory dependencies: you can either use
the vcpkg library manager, which will automatically install an appropriate version of
these dependencies as you install \cgal, or you can install the dependencies on your own
(making sure that you are using a supported version) by following their respective
installation instructions.

If you choose to use `vcpkg`, you might have to bootstrap and download
and compile it, but from then on `vcpkg` will make your life easier.

[You may opt for not using `vcpkg` because you upgraded and you already
have installed boost, or you need a specific boost version, and not
the latest one, which you would get with `vcpkg`.]

In the next two sections we explain the two approaches.

\section installing-with-vcpkg Installing CGAL with the vcpkg Library Manager

\subsection install-vcpk Installing vcpkg

The first step is to clone or download `vcpkg` from
<a href="https://github.com/microsoft/vcpkg">https://github.com/microsoft/vcpkg</a>.

\code{.sh}
  C:\dev> git clone https://github.com/microsoft/vcpkg
  C:\dev> cd vcpkg
  C:\dev\vcpkg> .\bootstrap-vcpkg.bat
  C:\dev\vcpkg> .\vcpkg integrate install
\endcode

The last step requires to run *cmd* with administrator rights.

\subsection install-cgal-vcpk Installing CGAL itself

By default `vcpkg` installs for 32 bit and will use the latest version of Visual C++
installed on your machine.   If you develop 64 bit software you must
set the Windows environment variable `VCPKG_DEFAULT_TRIPLE` to `x64-windows`
or pass the option `--triplet x64-windows` whenever you install a package.
We refer to the
<a href="https://github.com/microsoft/vcpkg/blob/master/docs/examples/installing-and-using-packages.md#step-2-use">official documentation</a>
of `vcpkg` if you want to compile for an older version of a compiler.

You are now ready to install \cgal:

\code{.sh}
  C:\dev\vcpkg> ./vcpkg.exe install cgal
\endcode

This will take roughly 15 minutes and it downloads MPIR (a fork of GMP),
MPFR, all boost header files, and it will compile MPIR and MPFR, as well
as several boost libraries.
Afterwards, you will find the include files, libraries, and dlls in the
subdirectory `C:\dev\vcpkg\installed\x64-windows`.

Note that \cgal is a header-only library, and there is therefore no `lib` or `dll` files.

\subsection compile-example-vcpk Compiling an Example

Let's next compile a program that uses \cgal.
The examples you find in these User Manual pages are not downloaded when you install \cgal
with the vcpkg library manager and you must download them separately from the following download page:
<a href="https://github.com/CGAL/cgal/releases/CGAL-\cgalReleaseNumber-examples.zip">CGAL-\cgalReleaseNumber-examples.zip</a>

Assuming you have unzipped this file in your home directory, we will
next compile an example from the 2D Triangulation package.

\subsubsection sssectConfiguration Configuring of an Example

Before building anything using \cgal you have to choose the compiler/linker, set compiler
and linker flags, specify which third-party libraries you want to use and where they can be found.
Gathering all this information is called *configuration* and we use CMake as configuration tool
(see Section \ref seccmake for more information on minimal supported versions and where to
download it).

The end of the process is marked by the generation of a Visual \cpp solution and
project file that you can use to build your program.

\code{.sh}
  C:\Users\Me\CGAL-5.0> cd examples\Triangulation_2
  C:\Users\Me\CGAL-5.0\examples\Triangulation_2> mkdir build
  C:\Users\Me\CGAL-5.0\examples\Triangulation_2> cd build
  C:\Users\Me\CGAL-5.0\examples\Triangulation_2\build> cmake-gui ..
\endcode

When you hit the *Configure* button you must choose the compiler,
you must *Specify the Generator* (Visual Studio 16 2019), you must
specify the *Optional Platform* ('x64' in case you want to create 64 binaries),
and you must select *Specify toolchain file for cross compilation*
(`C:/dev/vcpkg/scripts/buildsystems/vcpkg.cmake`, which you have
to adapt to where you installed * vcpkg* on your machine).
Once the configuration is done, tick *Advanced* and *Grouped* in *cmake-gui*.
You will see entries for where header files and libraries are taken from.

\subsubsection sssectConfigurationAdditionalDependencies Additional Dependencies

Individual \cgal packages may also have additional dependencies. During the configuration
of the above examples, you may have observed the following message:

\code{.sh}
  NOTICE: a few examples require Qt and will not be compiled.
\endcode

\cgal is a library of algorithms and data structures and as such does
not depend on Qt. However, one of the examples does for visualization purposes only. Either you
have Qt installed and you can fill in the requested CMake variables, or we install it now using `vcpkg`:

\code{.sh}
  C:\dev\vcpkg> .\vcpkg.exe install qt5
\endcode

Remember to specify `--triplet` or the related enviromnent variable in case you target 64 bit applications.

When you start *cmake-gui* again and hit the `Configure` button,
the CMake variables concerning Qt should now be filled.

Note that `cmake-gui` is a graphical user interface for CMake, but you can also run `cmake`
commands from the command line, or even manipulate the file CMakeCache.txt directly
with a text editor.

\subsubsection sssectCompilation Compilation of an Example

Hit the *Generate* button, and you will find the file `Triangulation_2_examples.sln`
in the directory `C:\Users\Me\CGAL-5.0\examples\Triangulation_2\build`.
Double click in order to open it. You will see one project per `.cpp` file.
Compile them all or just the one you are interested in.

\subsection vcpk-my-example Compiling my Code which Uses CGAL

todo: Explain the script `cgal_create_CMakeLists` and its options are detailed in Section \ref devman_create_cgal_CMakeLists.

\section install-from-installer Installing By Hand

You can download and run `CGAL-\cgalReleaseNumber``-Setup.exe` from https://www.cgal.org/download/windows.html.
It is a self extracting executable that downloads the \cgal header files, as well as the source code of the
examples and demos, and that allows you to select and download the precompiled versions of GMP and Mpfr.

The script `cgal_create_CMakeLists` and its options are detailed in Section \ref devman_create_cgal_CMakeLists.

In a less ideal world, you might have to install some required tools and third-party libraries.
This is what this page is about.

*/
