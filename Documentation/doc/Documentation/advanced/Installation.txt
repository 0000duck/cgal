/*!
\page installation Installation
\cgalAutoToc

<b>Since \cgal version 5.0, \cgal is header-only be default, which means
that there is no need to compile and install anything before it can be
used. However, the dependencies of \cgal might still need to be installed.</b>

This page is a step-by-step description of how to configure, build, and install \cgal,
in case you do not wish to use the (now enabled by default) header-only mode of \cgal.
It is also possible to install \cgal using package managers on some operating systems,
see Section \ref secspecificinstall.

\section installation_configwithcmake Configuring CGAL with CMake

Before building anything using \cgal you have to choose the compiler/linker,
set compiler and linker flags, specify which
third-party libraries you want to use and where they can be found, and
which \cgal libraries you want to build. Gathering
all this information is called <I>configuration</I>.
The end of the process is marked by the generation of a makefile or a
Visual \cpp solution and project file that you can use to build \cgal.

CMake maintains configuration parameters in so-called <I>cmake variables</I>, like the `CMAKE_CXX_COMPILER`
in the example above. These variables <I>are not environment variables</I> but <I>CMake variables</I>. Some of the CMake
variables represent user choices, such as `CMAKE_BUILD_TYPE`, while others
indicate the details of a third-party library, such as `Boost_INCLUDE_DIR` or the compiler flags to use,
such as `CMAKE_CXX_FLAGS`.

\subsection installation_buildtype Build Type

The CMake variable `CMAKE_BUILD_TYPE` indicates how to build the libraries.
It accepts the values `Debug` or `Release`. Note that the default value is `Debug` as it is
default value in `CMake` and if you do not plan on debugging, it is important to set the variable
to `Release` for performance reasons.

This is not an issue for solution/project files, since the user selects the build type
from within the IDE in this environment.

\subsection seclibraries CGAL Libraries

\cgal is split into four libraries. During configuration, you can select the libraries that
you would like to build by setting a CMake variable of the form <TT>WITH_<library></TT>. By default all
are switched `ON`. All activated libraries are build after
configuration; see \ref secbuilding.

We next list the libraries and essential 3rd party software
(see \ref secessential3rdpartysoftware) for each library:

| Library   | CMake Variable | Functionality | Dependencies |
| :-------- | :------------- | :------------ | :----------- |
| `%CGAL`   | none           | Main library  | \sc{Gmp}, \sc{Mpfr}, \sc{Boost} (headers) |
| `CGAL_Core` | `WITH_CGAL_Core`  | The %CORE library for algebraic numbers.\cgalFootnote{CGAL_Core is not part of \cgal, but a custom version of the \sc{Core} library distributed by \cgal for the user convenience and it has it's own license.}  | \sc{Gmp} and \sc{Mpfr} |
| `CGAL_ImageIO` | `WITH_CGAL_ImageIO` | Utilities to read and write image files  | \sc{zlib}, \sc{Vtk} (optional) |
| `CGAL_Qt5`  | `WITH_CGAL_Qt5` | `QGraphicsView` support for \sc{Qt}5-based demos | \sc{Qt}5 |

\subsubsection installation_static Static vs. Shared Libraries

Shared libraries, also called <I>dynamic-link libraries</I>, are built by default
(`.dll` on Windows, `.so` on Linux, `.dylib` on MacOS). You
can choose to produce static libraries instead by setting the CMake
variable `BUILD_SHARED_LIBS` to `FALSE`. If you use
`cmake-gui`, a tick box for that variable is available to set it.

\subsection installation_examples CGAL Examples and Demos

\cgal is distributed with a large collection of examples and demos. By default, these are <B>not</B> configured along with
the \cgal libraries, unless you set the variables `WITH_examples=ON` and/or `WITH_demos=ON`.
Additionally, even when configured with \cgal, they are not automatically built along with the libraries.
You must build the `examples` or `demos` targets (or IDE projects) explicitly.

If you do not plan to compile any demos, you may skip some of the dependencies (such as \sc{Qt}),
as the corresponding \cgal-libraries will not be used. Note, however, that your own demos
might need these \cgal-libraries and thus their dependencies.

\subsection installation_configuring_gui Configuring CGAL with the CMake GUI

The simplest way to start the configuration is to run the graphical
user interface of CMake. We recommend to use `cmake-gui`. You must pass as
argument the root directory of \cgal. For example:

    cd CGAL-\cgalReleaseNumber
    cmake-gui . # Notice the dot to indicate the current directory.

After `cmake-gui` opens, press 'Configure'.
A dialog will pop up and you will have to choose what shall be generated.
After you have made your choice and pressed 'Finish', you will see
the output of configuration tests in the lower portion of the application.
When these tests are done, you will see many
red entries in the upper portion of the application. Just ignore them and press 'Configure'.
By now CMake should have found many libraries and have initialized variables.
If you still find red entries, you have to provide the necessary information.
This typically happens if you have installed software at non-standard locations.
Providing information and pressing 'Configure' goes on until
all entries are grayed. You are now ready to press 'Generate'. Once this is
done, you can quit `cmake-gui`.

\subsection installation_configuring_cmd Configuring CGAL with the cmake Command-Line Tool

Alternatively, you can run the command-line tool called
`cmake`. You pass as argument the root directory of
\cgal. For example:

    cd CGAL-\cgalReleaseNumber
    cmake . # Notice the dot to indicate the current directory.

The very first thing CMake does is to detect the compiler to use. This
detection is performed by a special CMake module called a
<I>generator</I>.
A CMake generator understands the build requirements for a
particular compiler/linker and generates the necessary files for that. For
example, the <I>UNIX Makefiles</I> generator understands the GNU chain
of tools (\gcc, ld etc.) and produces makefiles, which can be used to build a
target by a simple call to `make`. Likewise, the <I>Visual Studio
2010</I> generator produces solution and project files and can be manually
launched in the VS IDE to build the target.

Each platform has a default generator, so you only need to select one when
the default is not what you want. For example, under Windows, it is
possible to generate <I>NMakefiles</I> instead of Visual Studio project
files in order to build the library with `nmake`. Running
`cmake` with no parameters in a command-line prints the list of
available generators supported by your platform and CMake version. If the
generator you need is not listed there, you can try a newer
CMake version, as generators are hardcoded into CMake, and additional
generators are added with each release.

Since the choice of the generator determines the type of build files to generate, in some cases
you choose a particular generator as a mean to choose a specific compiler (because they use different
build files). For example, the following generates solution files for
use in Visual \cpp 15.0 on a 64bit machine:

    cd CGAL-\cgalReleaseNumber
    cmake -G"Visual Studio 15 2017 Win64" .

In other cases, however, the generator doesn't directly identify a
specific compiler but a chain of tools.
For example, the `UNIX Makefiles` generator produces `makefiles` that call some auto-detected
command-line compiler, like \gcc. If you need the makefiles to use a different compiler, you need to
specify the desired compiler in the call to CMake, as in this example:

    cd CGAL-\cgalReleaseNumber
    cmake -DCMAKE_CXX_COMPILER:FILEPATH=g++-9.2 .

The command line tool `cmake` accepts CMake variables as arguments of the form `-D<VAR>:<TYPE>=<VALUE>`, as
in the example above, but this is only useful if you already know which variables need to be explicitly defined.

\cgalAdvancedBegin
CMake keeps the variables that a user can manipulate in a
so-called <I>CMake cache</I>, a simple text file named
`CMakeCache.txt`, whose entries are of the form
`VARIABLE:TYPE=VALUE`. Advanced users can manually edit this file,
instead of going through the interactive configuration session.
\cgalAdvancedEnd

The configuration process not only determines the location of the required dependencies, it also dynamically generates a
`compiler_config.h` file, which encodes the properties of your system and a special file named
`CGALConfig.cmake`, which is used to build programs using \cgal. The
purpose of this file is explained below.

\subsection installation_cgalconfig CGALConfig.cmake

During configuration of the \cgal libraries a file named `CGALConfig.cmake` is generated
in \cgal's root directory (in contrast to \cgal's source directory that has been used
for installation). This file contains the definitions of several CMake variables
that summarize the configuration of \cgal.
In order to configure a program, you need to indicate the location of this config file
in the CMake variable `CGAL_DIR` (as indicated in the example above).
`CGAL_DIR` can also be an environment variable.

Setting `CGAL_DIR` makes particular sense if having multiple
out-of-source builds of \cgal as in Section \ref seccmakeoutofsource.

If you have installed \cgal, `CGAL_DIR` must afterwards be set to
`$CMAKE_INSTALLED_PREFIX/lib/CGAL`.

\section secbuilding Building CGAL

The results of a successful configuration are build files that control the build step.
The nature of the build files depends on the generator used during configuration, but in all cases they
contain several <I>targets</I>, one per library, and a default global target corresponding
to all the libraries.

For example, in a \sc{Unix}-like environment the default generator produces
makefiles. You can use the `make` command-line tool for the
succeeding build step as follows:

    cd CGAL-\cgalReleaseNumber
    # build all the selected libraries at once
    make

The resulting libraries are placed in the subdirectory `lib` under `<CMAKE_BINARY_DIR>`
(which is `CGAL-\cgalReleaseNumber` in case you run an in-source-configuration).

With generators other than `UNIX Makefiles` the resulting build files
are solution and project files which
should be launched in an \sc{Ide}, such as Visual Studio or KDevelop3. They will contain the targets described
above, which you can manually build as with any other solution/project within your \sc{Ide}.

Alternatively, you can build it with the command line version of the
\sc{Visual Studio Ide}:

    devenv CGAL.sln /Build Debug

The "Debug" argument is needed because CMake creates solution files for
all four configurations, and you need to explicitly choose one when building
(the other choices are `Release`, `RelWithDebInfo`, and `MinSizeRel`).

\cgalAdvancedBegin
The build files produced by CMake are autoconfigured. That
is, if you change any of the dependencies, the build step
automatically goes all the way back to the configuration step. This
way, once the target has been configured the very first time by
invoking cmake, you don't necessarily need to invoke `cmake`
again. Rebuilding will call itself `cmake` and re-generate the
build file whenever needed. Keep this in mind if you configure \cgal
for the Visual Studio IDE since a build could then change the
solution/project file in-place and VS will prompt you to reload it.
\cgalAdvancedEnd

If you have turned on the configuration of examples
(`-DWITH_examples=ON`) and/or demos (`-DWITH_demos=ON`), there will be additional
targets named `examples` and `demos`, plus one target for
each example and each demo in the build files.
None of these targets are included by default, so you need to build them explicitly
<I>after</I> the \cgal libraries have been successfully built.
The targets `examples` and `demos` include themselves all the targets
for examples and demos respectively.

    # build all examples at once
    make examples

    # build all demos at once
    make demos

\cgalAdvancedBegin
When using `UNIX Makefiles` you can find out the
exact name of the example or demo target of a particular package by
typing `make help | grep <package>`.
\cgalAdvancedEnd

\section secinstalling Installing CGAL

On many platforms, library pieces such as headers, docs and binaries
are expected to be placed in specific locations. A typical example
being <A HREF="/usr/include">`/usr/include`</A> and <A HREF="/usr/lib">`/usr/lib`</A> on \sc{Unix}-like
operating systems or <A HREF="C:/Program Files/">`C:/Program Files/`</A> on Windows. The process
of placing or copying the library elements into its standard location
is sometimes referred to as <I>Installation</I> and it is a
postprocessing step after the build step.

CMake carries out the installation by producing a build target named <I>install</I>.
The following example shows a typical session from configuration to
installation in a \sc{Unix}-like environment:

    cd CGAL-\cgalReleaseNumber

    cmake . # configure
    make # compile
    make install # install

If you use a generator that produces IDE files (for Visual Studio for instance) there will be an optional
`INSTALL` project, which you will be able to <I>"build"</I> to execute the installation step.

\cgalAdvancedBegin
The files are copied into a directory tree relative to the <I>installation directory</I> determined by the
CMake variable `CMAKE_INSTALL_PREFIX`. This variable defaults to `/usr/local` under \sc{Unix}-like operating systems
and <A HREF="C:\ProgramFiles">`C:\Program Files`</A> under Windows. If you want to install to a different location, you must override that CMake
variable explicitly <I>at the configuration time</I> and not when executing the install step.
\cgalAdvancedEnd

The file `CGALConfig.cmake` is installed by default in
`$CMAKE_INSTALLED_PREFIX/lib/``CGAL-\cgalReleaseNumber`.

\section seccmakeoutofsource Multiple Variants of Makefiles (out-of-source build)

While you can choose between release or debug builds, and shared or static libraries,
it is not possible to generate different variants during a single configuration. You need to run CMake in a
different directory for each variant you are interested in, each with its own selection of configuration parameters.

CMake stores the resulting makefiles and project files, along with several temporary and auxiliary files such
as the variables cache, in the directory where it is executed, called `CMAKE_BINARY_DIR`, but it
takes the source files and configuration scripts from
`CMAKE_SOURCE_DIR`.

The binary and source directories do not need to be the same. Thus, you can configure multiple variants by creating a
distinct directory for each configuration and by running CMake from there. This is known in CMake terminology
as <I>out-of-source configuration</I>, as opposite to an <I>in-source
configuration</I>, as showed in the previous sections.

You can, for example, generate subdirectories `CGAL-\cgalReleaseNumber``/cmake/platforms/debug` and
`CGAL-\cgalReleaseNumber``/cmake/platforms/release` for two configurations, respectively:

    mkdir CGAL-\cgalReleaseNumber/cmake/platforms/debug
    cd CGAL-\cgalReleaseNumber/cmake/platforms/debug
    cmake -DCMAKE_BUILD_TYPE=Debug ../../..

    mkdir CGAL-\cgalReleaseNumber/cmake/platforms/release
    cd CGAL-\cgalReleaseNumber/cmake/platforms/release
    cmake -DCMAKE_BUILD_TYPE=Release ../../..

\section secspecificinstall OS Specific Installation

Some operating systems with package managers offer \cgal and its
essential third party software through the manager,
for instance, Mac OS X, or some Linux distribution (e.g. Debian).
For Windows, an installer is provided.

\subsection sseccgalmacosxe CGAL on macOS

The \cgal project recommends the use of <a href="https://brew.sh/">Homebrew</a>, in the following way:

    brew install cgal

\subsection sseccgaldebian CGAL on Linux

For instance in Debian/Ubuntu, use apt-get in the following way:

    sudo apt-get install libcgal-dev

To get the demos, use:

    sudo apt-get install libcgal-demo

For other distributions, please consult your respective package manager documentation.

\subsection sseccgalwindows CGAL on Windows

You can download and run `CGAL-\cgalReleaseNumber``-Setup.exe` from https://www.cgal.org/download/windows.html.
It is a self extracting executable that installs the \cgal source, and that allows you
to select and download some precompiled third party libraries. However, you will need to compile
the library using your favorite compiler.
A <a href="https://www.cgal.org/download/windows.html">tutorial</a> is provided on how to proceed with Microsoft Visual Studio.

*/
