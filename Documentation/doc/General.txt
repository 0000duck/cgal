/// \cgalConcept
/// http://en.cppreference.com/w/cpp/concept/CopyAssignable
/// http://en.cppreference.com/w/cpp/concept/CopyConstructible
class Assignable {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/DefaultConstructible
class DefaultConstructible {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/CopyConstructible
class CopyConstructible {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/EqualityComparable
class EqualityComparable {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/LessThanComparable
class LessThanComparable {};

/// \cgalConcept
class AdaptableFunctor {};
/// \cgalConcept
class AdaptableUnaryFunction {};
/// \cgalConcept
class AdaptableBinaryFunction {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/Iterator
class Iterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
class OutputIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/InputIterator
class InputIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/ForwardIterator
class ForwardIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/RandomAccessIterator
class RandomAccessIterator {};

/// \cgalConcept
/// Concept from the \cpp standard.
/// See http://en.cppreference.com/w/cpp/concept/BidirectionalIterator
class BidirectionalIterator {};

/// \cgalConcept
class RandomAccessContainer {};
/// \cgalConcept
class BackInsertionSequence {};

/*!
See http://www.boost.org/libs/property_map/doc/LvaluePropertyMap.html
/// \cgalConcept
*/
class LvaluePropertyMap {};

/*!
This specifies that the actual type exposed through a `typedef` is
implementation specific. It can only be treated through the concepts
it is said to model.
*/
class Hidden_type {};
