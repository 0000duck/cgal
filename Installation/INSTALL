INSTALL
-------------------------------------------------------------------------------


INTRODUCTION
============

This file describes how to install CGAL. The instructions in this file
are for the most common use cases, and cover the command line tools. 

For further information, or in case of problems, please see the
detailed installation instructions, which can be found in this
distribution in the file ./doc_html/index.html or on the CGAL website
http://www.cgal.org/Manual/3.4/doc_html/installation_manual/contents.html

The documentation of CGAL is available in PDF and HTML formats.
It is not bundled with the software but can be downloaded separately
at <http://www.cgal.org/Manual>.

For more information about CGAL, see the <http://www.cgal.org/>.


PREREQUISITES
=============

To install CGAL, you need 'cmake' and several third-party libraries. 
Some are mandatory for entire CGAL, some are mandatory for particular 
CGAL packages, some are only needed for demos.

   * CMake (>= 2.4.5), the build system used by CGAL
     Required for building CGAL
     CMake >= 2.6 is recommended, since it supports a cross platform GUI
     http://www.cmake.org/

   * Boost (>= 1.33.1)
     Required for building CGAL and for applications using CGAL
     Required compiled Boost library: Boost.Threads
     Optional compiled Boost library: Boost.Program_options
     http://www.boost.org/   or   http://www.boostpro.com/products/free/

   * Exact Arithmetic           
     CGAL combines floating point arithmetic with exact arithmetic, in order
     to be fast and reliable. CGAL offers support for GMP and MPFR, for LEDA
     exact number types, as well as a built-in exact number type used when
     none of the other two is installed.
     Required by several examples which have hard coded the number type.

     - GMP (>= 4.1.4)
       http://gmplib.org/

     - MPFR (>= 2.2.1)
       http://www.mpfr.org/

     - LEDA (>= 6.0)
       http://www.algorithmic-solutions.com/leda/index.htm

   * Visualization 
     Required for most demos

     - Qt3 (>= 3.3)
       http://trolltech.com/products/qt/

     - Qt4 (>= 4.2)
       http://trolltech.com/products/qt/

     - libQGLViewer
       http://www.libqglviewer.com/

     - Geomview
       http://www.geomview.org/

   * Numerical Libraries
 
     - BLAS, LAPACK, ATLAS
       Required by the packages:
       o Estimation of Local Differential Properties
       o Approximation of Ridges and Umbilics
       o Planar Parameterization of Triangulated Surface Meshes
       http://www.netlib.org/blas/, http://www.netlib.org/lapack/

     - TAUCS (sparse matrix solver)
       Accelerates the package:
       o Planar Parameterization of Triangulated Surface Meshes
       http://www.tau.ac.il/~stoledo/taucs/

   * Miscellaneous

     - zlib         
       Optional for the package:
       o Surface Mesh Generator can read compressed images directly
       http://www.zlib.net/

   NOTE: The Windows installer comes with a CGAL specific distribution of 
         GMP, MPFR and TAUCS.


CONFIGURATION
=============

To configure CGAL, type

  cmake .

in the directory that contains this INSTALL file. You can add several options
to this command. The most important ones are

  -DCMAKE_INSTALL_PREFIX=<dir>          installation directory [/usr/local]
  -DCMAKE_BUILD_TYPE=<Debug|Release>    build type [Debug]
  -DBUILD_SHARED_LIBS=<TRUE|FALSE>      shared or static libraries [TRUE]
  -DCMAKE_C_COMPILER=<program>          C compiler [gcc]
  -DCMAKE_CXX_COMPILER=<program>        C++ compiler [g++]

In case you want to add additional compiler and linker flags, you can use

  -DCGAL_CXX_FLAGS                      additional compiler flags
  -DCGAL_MODULE_LINKER_FLAGS            add. linker flags (static libraries)
  -DCGAL_SHARED_LINKER_FLAGS            add. linker flags (shared libraries)
  -DCGAL_EXE_LINKER_FLAGS               add. linker flags (executables)

Variants with the additional suffix "_DEBUG" and "_RELEASE" allow to set
separate values for debug and release builds. In case you do not want to add
additional flags, but to override the default flags, replace "CGAL" by
"CMAKE" in the variable names above.

Note that CMake maintains a cache name "CMakeCache.txt". If you change options
(or your environment changes), it is best to remove that file to avoid
problems.


BUILDING
========

To build the CGAL libraries, type

  make

If you want, you can install the CGAL header and libraries. To do so, type

  make install

You can build all demos or examples by typing

  make demo                           or
  make examples

If you are interested in the demos or examples of just a particular module,
you can build them in the following way:

  make -C demo/Alpha_shapes_2        (or: cd demo/Alpha_shapes_2; make)
  make -C examples/Alpha_shapes_2    (or: cd examples/Alpha_shapes_2; make)

A list of all available make targets can be obtained by

  make help


OUT-OF-SOURCE BUILDS
====================

The above instructions build the CGAL library in the same directory tree as
the CGAL sources. Sometimes it is advisable to place all the generated files
somewhere else. For example, if you want to build the library in several
configurations (debug and release, different compilers, and so on). Using
different build directories keeps all the generated files separated for each
configuration.

In the following, $CGAL_SRC denotes the directory with the CGAL sources;
$CGAL_BIN is an arbitrary directory where the generated files will be
placed. You can perform an out-of-source build as follows:

  mkdir $CGAL_BIN
  cd $CGAL_BIN
  cmake [options] $CGAL_SRC
  make
  make install                       (if desired)
  make demo                          (if desired)
  make examples                      (if desired)

Basically, the only difference is the last parameter of the "cmake" command:
$CGAL_SRC instead of "." .
