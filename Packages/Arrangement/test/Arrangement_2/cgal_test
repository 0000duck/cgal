#! /bin/sh

# This is a script for the CGAL test suite. Such a script must obey
# the following rules:
#
# - the name of the script is cgal_test
# - for every target two one line messages are written to the file 'error.txt'
#     the first one indicates if the compilation was successful
#     the second one indicates if the execution was successful
#   if one of the two was not successful, the line should start with 'ERROR:'
# - running the script should not require any user interaction
# - the script should clean up object files and executables

ERRORFILE=error.txt

#---------------------------------------------------------------------#
#                    compile_and_run <target>
#---------------------------------------------------------------------#

compile_and_run()
{
  EXTRA_FLAGS="-DCGAL_ARR_TEST_POINT_LOCATION=$2 -DCGAL_ARR_TEST_TRAITS=$3 \
    $EXTRA_FLAGS "
  export EXTRA_FLAGS

  echo "Compiling $1 with point location $2 and traits $3... "
  if eval 'make CGAL_MAKEFILE=$CGAL_MAKEFILE \
           TESTSUITE_CXXFLAGS="$TESTSUITE_CXXFLAGS" \
           TESTSUITE_LDFLAGS="$TESTSUITE_LDFLAGS" $1' ; then
    echo "   compilation of $1 succeeded" >> $ERRORFILE
    REVERSE=""
    run $1 $2 $3
    REVERSE="reverse"
    run $1 $2 $3

  else
    echo "   ERROR: compilation of $1 failed" >> $ERRORFILE
  fi

  eval "2>&1 make CGAL_MAKEFILE=$CGAL_MAKEFILE clean > /dev/null "
}

run()
{
  if [ $3 -eq $CGAL_SEGMENT_TRAITS -o $3 -eq $CGAL_SEGMENT_LEDA_TRAITS ] ; then
    datafiles="DATA/segments/*"
  elif [ $3 -eq $CGAL_POLYLINE_TRAITS -o $3 -eq $CGAL_POLYLINE_LEDA_TRAITS ]; then
       datafiles="DATA/polylines/*"
  fi

  for DATAFILE in ${datafiles}
  do
    if [ -f $1 ] ; then
        DATANAME=`basename $DATAFILE`
	if [ $REVERSE="reverse" ] ; then
	    OUTPUTFILE=ProgramOutput.$3.$1.$DATANAME.$REVERSE.$PLATFORM.$2
        else
	    OUTPUTFILE=ProgramOutput.$3.$1.$DATANAME.$PLATFORM.$2
	fi
	rm -f $OUTPUTFILE
	COMMAND="./$1 $DATAFILE $REVERSE"
	echo "Executing $1 $DATANAME $REVERSE ... "
	echo
	if eval $COMMAND > $OUTPUTFILE 2>&1 ; then
	echo "   execution of $1 $DATAFILE $REVERSE succeeded" >> $ERRORFILE
	else
	echo "   ERROR: execution of $1 $DATAFILE $REVERSE failed" >> $ERRORFILE
	fi
    else
	echo "   ERROR: could not execute $1 $DATAFILE $REVERSE" >> $ERRORFILE
    fi
  done

}


#---------------------------------------------------------------------#
#                    remove the previous error file
#---------------------------------------------------------------------#

rm -f $ERRORFILE
touch $ERRORFILE

#---------------------------------------------------------------------#
#                    compile and run the tests
#---------------------------------------------------------------------#

if [ $# -ne 0 ] ; then
  for file in $* ; do
    compile_and_run $file
  done
else
  CGAL_SEGMENT_TRAITS=1
  CGAL_SEGMENT_LEDA_TRAITS=2
  CGAL_POLYLINE_TRAITS=11
  CGAL_POLYLINE_LEDA_TRAITS=12

  CGAL_ARR_TEST_TRAITS=$CGAL_SEGMENT_TRAITS
    (compile_and_run test 1 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 2 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 3 $CGAL_ARR_TEST_TRAITS)
  CGAL_ARR_TEST_TRAITS=$CGAL_SEGMENT_LEDA_TRAITS
    (compile_and_run test 1 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 2 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 3 $CGAL_ARR_TEST_TRAITS)
  CGAL_ARR_TEST_TRAITS=$CGAL_POLYLINE_TRAITS
    (compile_and_run test 1 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 2 $CGAL_ARR_TEST_TRAITS)
    (compile_and_run test 3 $CGAL_ARR_TEST_TRAITS)

  # Uncomment when leda polyline traits is fully debugged
  #CGAL_ARR_TEST_TRAITS=$CGAL_POLYLINE_LEDA_TRAITS
  #  compile_and_run test 1 $CGAL_ARR_TEST_TRAITS
  #  compile_and_run test 2 $CGAL_ARR_TEST_TRAITS
  #  compile_and_run test 3 $CGAL_ARR_TEST_TRAITS
fi

