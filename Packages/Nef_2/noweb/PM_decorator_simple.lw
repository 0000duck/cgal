%--------------------------------------------------------------------------------
\documentclass[a4paper]{article}
\usepackage{Lweb}

\begin{document}
\title{A simple plane map decorator}
\author{M. Seel}

\maketitle

We provide a simple plane map decorator for the CGAL halfedge data structure
(HDS). It gives a user comfortable access to graph manipulating methods. The
interface follows the lines of the LEDA graph structure. The embedding is done
via the point coordinates associated with the vertices. If the point
coordinates of all vertices are different and the edges are embedded straight
line the halfedges define oriented lines and have thereby a direction. We
associate face cycles with halfedges on their left side. We talk about the
adjacency list of a vertex |v| containing all halfedges out of |v| (with source
|v|), though that sequence is also a cyclic structure. The entry point into the
cyclic structure defines the first element of the list.
<<PM_decorator_simple.h>>=
#ifndef PM_DECORATOR_SIMPLE_H
#define PM_DECORATOR_SIMPLE_H

#include <CGAL/basic.h>

#define USING(t) typedef typename HDS::t t
CGAL_BEGIN_NAMESPACE  

<<PM decorator simple>>

CGAL_END_NAMESPACE  
#undef USING
#endif //PM_DECORATOR_SIMPLE_H

<<PM decorator simple>>=
/*{\Manpage {PM_decorator_simple} {HDS} 
{A Plane Map Interface to the CGAL HDS} {D}}*/

template <class HDS>
class PM_decorator_simple 
/*{\Mdefinition An instance |\Mvar| of the data type |\Mname| is a simple
decorator to manipulate a CGAL HDS. }*/
{ HDS* phds;
public:
  typedef HDS Plane_map;
  USING(Vertex);           USING(Halfedge);
  USING(Vertex_iterator);  USING(Halfedge_iterator);

/*{\Mtypes 3}*/
  typedef Vertex*   Vertex_handle;
  /*{\Mtypemember  Handles to vertices.}*/ 

  typedef Halfedge* Halfedge_handle;
  /*{\Mtypemember  Handles to halfedges.}*/ 

  typedef typename HDS::Point Point_2;
  /*{\Mtypemember  embedding the vertices.}*/ 

  enum { BEFORE = -1, AFTER = 1 };
  /*{\Menum  flags for edge insertion.}*/ 

/*{\Mcreation 3}*/
  PM_decorator_simple() : phds(0) {}
  PM_decorator_simple(const PM_decorator_simple<HDS>& D) :
    phds(D.phds) {}
  PM_decorator_simple& operator=(
    const PM_decorator_simple<HDS>& D)
  { phds=D.phds; return *this; }

  PM_decorator_simple(HDS& h) : phds(&h) {}
  /*{\Mcreate constructs an HDS decorator working on |h|.}*/

  /*{\Moperations 2 2}*/

  void clear() const
  /*{\Mop reintializes |\Mvar| to the empty map.}*/
  { phds->erase_all(); }

  Vertex_handle source(Halfedge_handle e) const
  /*{\Mop returns the source of |e|.}*/
  { return e->opposite()->vertex(); }

  Vertex_handle target(Halfedge_handle e) const
  /*{\Mop returns the target of |e|.}*/
  { return e->vertex(); }
 
  Halfedge_handle twin(Halfedge_handle e) const
  /*{\Mop returns the twin of |e|.}*/
  { return e->opposite(); }

  bool is_isolated(Vertex_handle v) const
  /*{\Mop returns |true| when |v| has outdegree zero.}*/
  { return v->halfedge()==0; }

  bool is_closed_at_source(Halfedge_handle e) const
  /*{\Mop returns |true| when |prev(e) == twin(e)|.}*/
  { return e->prev() == e->opposite(); }

  Halfedge_handle first_out_edge(Vertex_handle v) const
  /*{\Mop returns one halfedge with source |v|. It's the starting point for
    the circular iteration over the halfedges with source |v|.
    \precond |!is_isolated(v)|.}*/
  { return v->halfedge()->opposite(); }

  Halfedge_handle last_out_edge(Vertex_handle v) const
  /*{\Mop returns one halfedge with source |v|.
    \precond |!is_isolated(v)|.}*/
  { return v->halfedge()->next(); }

  Halfedge_handle cas(Halfedge_handle e) const 
  { return e->prev()->opposite(); } 
  Halfedge_handle cap(Halfedge_handle e) const
  { return e->opposite()->next(); }

  Halfedge_handle cyclic_adj_succ(Halfedge_handle e) const
  { return cas(e); }
  /*{\Mop returns the next edge in the cyclic adjacency list of 
     |source(e)|.}*/

  Halfedge_handle cyclic_adj_pred(Halfedge_handle e) const
  /*{\Mop returns the previous edge in the cyclic adjacency list of 
     |source(e)|.}*/
  { return cap(e); }

  Halfedge_handle next(Halfedge_handle e) const
  /*{\Mop returns the next edge in the face cycle containing |e|.}*/
  { return e->next(); }

  Halfedge_handle previous(Halfedge_handle e) const
  /*{\Mop returns the previous edge in the face cycle containing |e|.}*/
  { return e->prev(); }

  void link_as_target_of(Halfedge_handle e, Vertex_handle v) const
  /*{\Xop makes |v = target(e)| and sets |e| as the first
          in edge if |v| was isolated before.}*/
  { e->set_vertex(v);
    if (v->halfedge() == Halfedge_handle()) v->set_halfedge(e); }

  void link_as_source_of(Halfedge_handle e, Vertex_handle v) const
  /*{\Xop makes |v = source(e)| and sets |e| as the first
          out edge if |v| was isolated before.}*/
  { link_as_target_of(e->opposite(),v); }

  void link_as_prev_next_pair(Halfedge_handle e1, Halfedge_handle e2) const
  /*{\Xop makes |e1| and |e2| adjacent in the face cycle |]e1-e2[|
    corresponding pointers |prev(e)| and |next(twin(e))|.}*/
  { e1->set_next(e2); e2->set_prev(e1); }

  void set_adjacency_at_source_between(Halfedge_handle e, Halfedge_handle en) const
  /*{\Xop makes |e| and |en| neigbors in the cyclic ordered adjacency list 
    around |v=source(e)|. \precond |source(e)==source(en)|.}*/
  { CGAL_assertion(source(e)==source(en));
    link_as_prev_next_pair(en->opposite(),e);
  }

  void set_adjacency_at_source_between(Halfedge_handle e1, 
				       Halfedge_handle e_between, 
				       Halfedge_handle e2) const
  /*{\Xop inserts |e_between| into the adjacency list around |source(e1)| 
    between |e1| and |e2| and makes |source(e1)| the source of |e_between|. 
    \precond |source(e1)==source(e2)|.}*/
  { twin(e_between)->set_vertex(source(e1));
    set_adjacency_at_source_between(e1,e_between);
    set_adjacency_at_source_between(e_between,e2);
  }

  void close_tip_at_target(Halfedge_handle e, Vertex_handle v) const
  /*{\Xop sets |v| as target of |e| and closes the tip by setting the 
    corresponding pointers such that |prev(twin(e)) == e| and 
    |next(e) == twin(e)|.}*/
  { link_as_target_of(e,v);
    link_as_prev_next_pair(e,e->opposite()); }

  void close_tip_at_source(Halfedge_handle e, Vertex_handle v) const
  /*{\Xop sets |v| as source of |e| and closes the tip by setting the 
    corresponding pointers such that |prev(e) == twin(e)| and
    |next(twin(e)) == e|.}*/
  { close_tip_at_target(e->opposite(),v); }

  Vertex_handle new_vertex() const
  /*{\Mop creates a new vertex and initializes it as isolated.}*/
  { Vertex_handle v = phds->new_vertex();
    v->set_halfedge(0);
    return v; 
  }

  Vertex_handle new_vertex(const Point_2& p) const
  /*{\Mop creates a new vertex with embedding |p|, and initializes it as 
    isolated.}*/
  { Vertex_handle v = phds->new_vertex();
    v->set_halfedge(0); v->point()=p;
    return v; 
  }

  Halfedge_handle new_halfedge_pair(Vertex_handle v1, Vertex_handle v2) const
  /*{\Mop creates a new pair of edges |(e1,e2)| representing |(v1,v2)| 
    by appending the |ei| to |Out(vi)| $(i=1,2)$.}*/
  { Halfedge_handle e1 = phds->new_edge();
    Halfedge_handle e2 = e1->opposite(); 
    if ( ! is_isolated(v1) ) 
      set_adjacency_at_source_between(cap(first_out_edge(v1)),e1,
				      first_out_edge(v1));
    else
      close_tip_at_source(e1,v1);
    if ( ! is_isolated(v2) )
      set_adjacency_at_source_between(cap(first_out_edge(v2)),e2,
				      first_out_edge(v2));
    else 
      close_tip_at_source(e2,v2);
    return e1;
  }

  Halfedge_handle new_halfedge_pair(Halfedge_handle e1, 
			            Halfedge_handle e2,
				    int pos1 = AFTER, int pos2 = AFTER) const
  /*{\Mop creates a new pair of edges |(es1,es2)| representing 
    |(source(e1),source(e2))| by inserting the |esi| before or after |ei| 
    into the cyclic adjacency list of |source(ei)| depending on |posi| 
    $(i=1,2)$ from |\Mname::BEFORE, \Mname::AFTER|.}*/
  { 
    Halfedge_handle er = phds->new_edge();
    Halfedge_handle ero = er->opposite();
    if (pos1 < 0) { // before e1
      set_adjacency_at_source_between(cap(e1),er,e1);
    } else { // after e1
      set_adjacency_at_source_between(e1,er,cas(e1));
    }
    if (pos2 < 0) { // before e2
      set_adjacency_at_source_between(cap(e2),ero,e2);
    } else { // after e2
      set_adjacency_at_source_between(e2,ero,cas(e2));
    }
    return er;
  }

  Halfedge_handle new_halfedge_pair(Halfedge_handle e, Vertex_handle v,
				    int pos = AFTER) const
  /*{\Mop creates a new pair of edges  |(e1,e2)| representing |(source(e),v)| 
    by inserting |e1| before or after |e| into cyclic adjacency list of
    |source(e)| depending on |pos| from |\Mname::BEFORE, \Mname::AFTER|
    and appending |e2| at |Out(v)|.}*/
  {
    Halfedge_handle e_new = phds->new_edge();
    Halfedge_handle e_opp = e_new->opposite();
    if (pos < 0) // before e
      set_adjacency_at_source_between(cap(e),e_new,e);
    else  // after e
      set_adjacency_at_source_between(e,e_new,cas(e));
    
    if ( ! is_isolated(v) ) {
      Halfedge_handle e_first = first_out_edge(v);
      set_adjacency_at_source_between(cap(e_first),e_opp,e_first);
    } else
      close_tip_at_source(e_opp,v);

    return e_new;
  }


  Halfedge_handle new_halfedge_pair(Vertex_handle v, Halfedge_handle e,
                                    int pos = AFTER) const
  /*{\Mop symmetric to the previous one.}*/
  { return new_halfedge_pair(e,v,pos)->opposite(); }


  void remove_from_adj_list_at_source(Halfedge_handle e) const
  /*{\Mop removes a halfedge pair |(e,eo)| from the adjacency list
          of |source(e)|. Afterwards |next(prev(e))==next(eo)|
	  and |first_out_edge(source(e))| is valid if 
	  |degree(source(v))>1| before the operation.}*/
  {
    Vertex_handle vs = source(e);
    if ( is_closed_at_source(e) ) { // last outgoing
      vs->set_halfedge(Halfedge_handle());
    } else {
      if (e == first_out_edge(vs)) 
	vs->set_halfedge(e->prev());
      set_adjacency_at_source_between(cap(e),cas(e));
    }
  }


  void delete_halfedge_pair(Halfedge_handle e) const
  /*{\Mop deletes |e| and its twin and maintains the adjacency at its source 
          and its target.}*/
  { remove_from_adj_list_at_source(e);
    remove_from_adj_list_at_source(e->opposite());
    phds->delete_edge(e);
  }

  void delete_vertex(Vertex_handle v) const
  /*{\Mop deletes |v| and all outgoing edges |Out(v)| as well as their twins. 
          Updates the adjacency at sources of the twins of |Out(v)|.}*/
  { 
    if ( ! is_isolated(v) ) {
      Halfedge_handle e = first_out_edge(v);
      while ( e != cap(e) ) 
        delete_halfedge_pair(cap(e));  
      delete_halfedge_pair(e); 
    }
    phds->delete_vertex(v);
  }

  Halfedge_handle new_halfedge_pair_at_source
    (Vertex_handle v, int pos = AFTER) const
  /*{\Mop creates a new pair of edges  |(e1,e2)| representing |(v,())| 
    by inserting |e1| at the beginning (BEFORE) or end (AFTER)
    of adjacency list of |v|.}*/
  { Halfedge_handle e1 = phds->new_edge();
    Halfedge_handle e2 = e1->opposite(); 
    if ( ! is_isolated(v) ) {
      Halfedge_handle ef = first_out_edge(v);
      set_adjacency_at_source_between(cap(ef),e1,ef);
      if ( pos == BEFORE ) v->set_halfedge(e2);
    } else
      close_tip_at_source(e1,v);
    return e1;
  }

  void link_as_target_and_append(Vertex_handle v, Halfedge_handle e) const
  /*{\Mop makes |v| the target of |e| appends |twin(e)| to the 
      adjacency list of |v|.}*/
  { if ( ! is_isolated(v) ) 
      set_adjacency_at_source_between(cap(first_out_edge(v)),twin(e),
	                              first_out_edge(v));
    else
      close_tip_at_target(e,v);
  }
 
}; // PM_decorator_simple


@ 
\end{document}
