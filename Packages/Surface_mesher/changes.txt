3 novembre 2005 Mariette
- surface mesher is now on cgal cvs serveur
- added in doc_tex the specifications of Complex_2_in Triangulation_3
  although they do not correspond to the code developped by David

14 september 2005 Mariette
  - put package Surface_mesher on cgal local cvs serveur

2 september 2005 Laurent Rineau
- in Surface_mesher:
    - new file include/CGAL/Point_with_surface_index_geom_traits.h to have
      one class per file.
    - new files:
        include/CGAL/Weighted_point_with_surface_index.h
        include/CGAL/Point_with_surface_index_geom_traits.h
      so that CGAL::Weighted_point_with_surface_index<Weighted_point> can
      have several additional constructors with Bare_point parameters.
    - two important hacks in files:
        include/CGAL/Surface_mesher/Oracles/Polyhedral.h
        include/CGAL/Surface_mesher/Oracles/Implicit_oracle.h

      1/ Use of a new typedef Kernel_point, obtained by Kernel_traits, so
      these two classes work with Point_with_surface_index<Point> and
      Weighted_point_with_surface_index<Weighted_point>. Some assign
      statement has to be used with a Kernel_point, so that they do not
      fail systematicaly (assign sucks!).

      2/ Use of CGAL::Random_points_in_sphere_3<Point, Point_creator> in
      include/CGAL/Surface_mesher/Oracles/Implicit_oracle.h in function
      random_points(), so that this function does not use the contructor
      Point(double x, double y, double z). This implied that the tenmplate
      Implicit_oracle had a new template parameter, Point_creator, which I
      gave default
            Creator_uniform_3<typename GT::RT, typename GT::Point_3>.
      With Point_with_surface_index<Point> and
      Weighted_point_with_surface_index<Weighted_point> this creator should
      be defined. See ../Mesh_3/test/Mesh_3/combined_spheres.C and   
      ../Surface_mesher/examples/Surface_mesher/surfaces_union.C
    - same problem, file
        include/CGAL/Surface_mesher/Oracles/Point_surface_indices_visitor.h
      has been changed: Point_surface_indices_visitor<Tr> now has a
      templated new_point() function, so that is can take Kernel_point or
      Point as argument.
    - minor changes:
        - include/CGAL/IO/Complex_2_in_triangulation_3_file_writer.h now has
          correct copyright and #ifdef sentinel
        - include/CGAL/Surface_mesher/Oracles/Multi_implicit_oracle.h now
          has correct copyright
        - rename DT_3 into Tr, and GT_3 into Geom_traits in file
          include/CGAL/Surface_mesher/Oracles/Polyhedral.h
    - updated examples/Surface_mesher/surfaces_union.C so that it works.

TODO: - fix include/CGAL/Surface_mesher/Oracles/Multi_implicit_oracle.h as
        regards Kernel_point stuff
      - merge it with include/CGAL/Surface_mesher/Oracles/Implicit_oracle.h

- in Mesh_3:
    - include/CGAL/IO/File_medit.h :
        - fix namespace !!
        - some functions now takes a C2T3 as argument, now that C2T3 has a
        triangulation() getter.
        - new function input_pslg_from_medit() !! It reads indices.
        - output_pslg_to_medit() now uses surface_index() too 
    - new implementation of CGAL::Point_traits.h

18 august 2005 Laurent Rineau
- Complex_2_in_triangulation_3 now has an accessor:
    Triangulation_3& triangulation()

15 august 2005 Laurent Rineau
- in Surface_mesher: new Combining_oracle, and Oracle_visitor,
- in Mesh_3: test/Mesh_3/combined_spheres tests that new oracle.

28 july 2005 LR MY
- fixed the add_node() for memory leaks in Graph.h
- fixed the face_type() for edges in Complex_2_in_triangulation_3.h

27 July 2005 LR MY
- fixed return type of apply in Multi_implicit_oracle.h 
- remove the const of const int number_of_functions 


27 July 2005 LR MY
- changed some named
- multi_implicit_oracle added


19 July 2005 Laurent Rineau
Change in examples/Surface_mesher/surface_mesher.C :
- added a macro SURFACE_MESHER_POLYHEDRAL. If defined, the polyhedral
version is compiled.
- change of makefile (and .cvsignore), so that two versions
implicit_surface_mesher and polyhedral_surface_mesher are built by make
all.

19 July 2005 Laurent Rineau
Minor changes:
- use mirror_facet, from Triangulation_3. Introduced in CGAL_3_2_I_146.


30 June 2005 Laurent Rineau
- attempt to merged trunk, sliver_branch and my local modifications...
- may be correct, or not.

12 may 2005 David Rey
- create several surface meshers:
  - with no verification about manifoldness
  - constraint regulare edges
  - constraint regular edges and no boundary
  - constraint manifoldness

- mv names into better ones:
  - Chew_4_surfaces -> Surface_mesher
  - Chew_4_surfaces_manifold -> Surface_mesher_regular_edges
  - Chew_4_surfaces_manifold_without_boundary -> 
    Surface_mesher_regular_edges_without_boundary
  - Chew_4_surfaces_manifold_simple_vertices -> Surface_mesher_manifold

24 March 2005 Laurent Rineau
- compatibility with new requirements of Mesher_level
- code is still broken, since 2005/02/27.

8 February 2005 Laurent Rineau
- new changes.txt file
- removed files that are in Mesh_2 and Mesh_3:
    - Mesher_level.h (Mesh_2)
    - Triangulation_mesher_level_traits_3 (Mesh_3)
- new template parameters for Mesher_level
- modified Complex_2_in_triangulation_3:
    - factorised set_in_complex and remove_from_complex
    - new functions is_in_complex
- rename Complex_2_in_triangulation_cell_base_* classes:
    - Complex_2_in_triangulation_cell_base_3
    - Complex_2_in_triangulation_surface_mesh_cell_base_3
- new Mesher_level function names:
    - Tr& triangulation_ref_impl()
    - Vertex_handle insert_impl(p, z)
    - Zone conflicts_zone_impl(p)
    - void scan_triangulation_impl()
    - bool no_longer_element_to_refine_impl()
    - Element get_next_element_impl()
    - void pop_next_element_impl()
    - Point refinement_point_impl(e)
    - void before_conflicts_impl(e, p)
    - Mesher_level_conflict_status private_test_point_conflict_impl(p, zone)
    - Mesher_level_conflict_status 
        test_point_conflict_from_superior_impl(p, zone)
    - void before_insertion_impl(e, p, zone)
    - void after_insertion_impl(vh)
    - void after_no_insertion_impl(e, p, zone)
- new class in Mesher_level.h for default implementations:
    - class Triangulation_ref_impl
    - No_private_test_point_conflict
    - No_test_point_conflict_from_superior
    - No_test_point_conflict :
    - No_before_insertion
    - No_after_insertion
    - No_after_no_insertion
    - No_before_after_insertion
- added implementation of:
    Chew_4_surface::test_point_conflict_from_superior_impl()
