#!/usr/local/bin/perl5
#
#  This script takes as stdin "predicates_on_ofC2.h" or equivalent.
#  It produces as stdout "filtered_predicates_on_ofC2.h" or equivalent.
#
# Sylvain Pion, 1998.

$in_def=0;
$in_decl=0;
$after_template=0;
$after_inline=0;
$result_type="";
@args=();

while (<>)
{
  if (/^}$/) {
    $in_def=0;
    next;
  }
  next if ($in_def);
  if (/^{$/) {
    $after_template=0;
    $in_decl=0;
    $in_def=1;
    print "
{ // The new body.\n
  $result_type result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = $function_name(\n";
    foreach (@args) {
      print "\t\tCGAL_to_interval_nt($_.value)";
      if ($_ ne $last_arg) { print ",\n"; }
      else { print ");"; }
    }
print "
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = $function_name(\n";
    foreach (@args) {
      print "\t\tCGAL_to_exact_type<ET>($_.value)";
      if ($_ ne $last_arg) { print ",\n"; }
      else { print ");"; }
    }
print "
  }
  return result;
}
    ";
    # print "args: @args\n" ;
    @args=();
    next;
  }

  if ($after_template)
  {
    # s/(CGAL_KERNEL_.*INLINE)/\/\/ $1/; # Comment the INLINE line.
    if ($result_type eq "") {
      if ($after_inline) {
        $result_type = $_;
        chop($result_type);
        # print "RESULT_TYPE = $result_type\n";
      }
    }
    if (/INLINE/) { $after_inline=1; $result_type=""; }
    if (/[,\)]/) { $in_decl = 1; }
    if ($in_decl)
    {
      @a = split /[,\)]/;
      foreach (@a) {
        next if /^$/;
        /(\w+)\s*$/;
        push(@args, $1);
        $last_arg=$1;
      }
      s/FT/CGAL_Filtering<CT,ET>/g;
    }
    if (/\(/) {
      /([a-zA-Z_]\w*)\s*\(/;
      $function_name=$1;
      # print "Function name: $function_name\n";
    }
  }
  if (/template/) { $after_template = 1; }
  s/template\s*<\s*class\s*FT\s*>/template < class CT, class ET >/;
  print $_;
}
