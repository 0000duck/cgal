#!/usr/local/bin/perl5 -w
#
# Copyright (c) 1998-1999 The CGAL Consortium
# Author: Sylvain Pion <Sylvain.Pion@sophia.inria.fr>.
#
# This script takes as input a source code file containing template predicates.
# It outputs the filtered specializations.
#
# See the CGAL documentation: Support Library, Number Types.

use vars qw($opt_p $opt_h $opt_s $opt_d $opt_v); # Suppress stupid warnings
require 'getopt.pl';

# Global variables
$static_version=0;		# Default is the filtered_exact version.
%known_ret_types=("bool", 1);	# Known allowed return types (completed in main)
@predicates=(			# list of predicates, with the built-ins.
# CGAL::, template_type, inline, ret_type, fct_name, #eps, body, new_body, args
    [ "", "NT", "CGAL_KERNEL_INLINE", "Sign", "lexicographical_sign", 1, "",
      "", "x", "y" ],
    [ "", "NT", "inline", "Comparison_result", "compare", 1, "", "", "a", "b" ],
    [ "", "NT", "inline", "Sign", "sign", 1, "", "", "x"] );
# Note: we don't actually care about a few fields ($body...) for these.
$num_built_in_predicates=$#predicates+1;	# Number of built-in predicates.
$pred_list_re="sign|compare|lexicographical_sign";

# We _must_ manipulate the fields of @predicate using these constants:
# (aren't there structs in Perl ?  Are packs the way to go ? )
# ($CGAL_pos, $template_type_pos, $inline_pos, $ret_type_pos)=(0..3); # unused
($fct_name_pos, $eps_pos, $body_pos, $new_body_pos, $args_pos)=(4..8);

# Useful regexps.
$C_symbol_re='[a-zA-Z_]\w*';			# A pure C symbol name.
$CGAL_symbol_re='(?:CGAL::|)'.$C_symbol_re;	# Idem with eventually 'CGAL::'

# Parse the command line options.
sub parse_command_line {
  Getopt('iod');
  if ($opt_h) {
    print STDERR "Usage: filtered_predicate_converter [options]
    -i file   : specify the main input source file [default is stdin]
    -o file   : specify the main output file       [default is stdout]
    -d files  : list of dependant predicates file (concatenated with \":\")
                by default, only the built-in predicates are known.
                (typically, it's just sign_of_determinant.h that you want)
		(it's only useful when \"-s\" is here too).
    -p        : be pedantic (changes warnings into errors)
    -s        : semi-static version [default is Filtered_exact<>]
    -v        : be verbose [to stderr]
    -h        : print this help\n";
    exit;
  }
  @dependancy_files = split(':', $opt_d) if ($opt_d);
  $opt_i = "-" unless $opt_i;
  $opt_o = "-" unless $opt_o;
  $static_version = 1 if $opt_s;
  $pedantic = $opt_p;
}

# Auxiliary routine to emit a warning and die if pedantic.
sub warning {
  warn "// Warning : @_\n";
  die if $pedantic;
}

# Emit a message in verbose mode only.
sub verbose {
  warn "// Info : @_\n" if $opt_v;
}

# Parse the CGAL header
sub parse_CGAL_header {
  local ($_) = @_;
  my $file_name = $1 if m#// file[\s]*: include/CGAL/(.*)#m;
  my $rest      = $' if /^#ifndef[\s]*([\S]*_H)\s*?/m;
  $_ = $1;
  $_ = "CGAL_$_" unless /CGAL_/;
  s/CGAL_/CGAL_ARITHMETIC_FILTER_/;
  return ($_, $file_name, $rest);
}

# Put new CGAL header
sub put_CGAL_header {
  my ($new_protect_name, $file_name) = @_;
  print FO
"// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Arithmetic_filter/$file_name
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion\@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec\@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef $new_protect_name
#define $new_protect_name\n\n";
}

# Output "$before$_$after$after_not_last" for each arg, except last.
sub arg_string {
  my ($before, $after, $after_not_last, @args) = @_;
  my $output="";
  foreach (@args) {
    $output.="$before$_$after";
    $output.= $after_not_last unless $_ eq $args[$#args];
  }
  return $output;
}

# Print the Filtered_exact<> version of a predicate.
sub print_filtered_exact {
  my ($CGAL, $t, $inline, $ret_type, $fct_name, $e, $b, $n, @args) = @_;
  my $args_call  = arg_string("\n    const ${CGAL}Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &", "", ",",  @args);
  my $args_inter = arg_string("\n\t\t", ".interval()", ",", @args);
  my $args_exact = arg_string("\n\t\t", ".exact()", ",", @args);

  print FO
"#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* $inline */
$ret_type
$fct_name($args_call)
{
  ${CGAL}FPU_CW_t backup = ${CGAL}FPU_get_and_set_cw(${CGAL}FPU_cw_up);
  try
  {
    $ret_type result = $fct_name($args_inter);
    ${CGAL}FPU_set_cw(backup);
    return result;
  } 
  catch (${CGAL}Interval_nt_advanced::unsafe_comparison)
  {
    ${CGAL}FPU_set_cw(backup);
    return $fct_name($args_exact);
  }
}\n\n";
}

# Print the epsilon variant of the function
sub print_epsilon_function {
  my ($ret_type, $fct_name, $body, $t, $eps, $new_t, $const, @args) = @_;
  my $args_call = arg_string("\n    const $new_t &", ",", "", @args);
  my $eps_call = arg_string("\n    ${const}double & epsilon_", "", ",", 0..$eps-1);
  # We just typedef the original template type at the beginning of the body.
  $_ = $body;
  s/{/{\n  typedef $new_t $t;\n/s;
  print FO
"inline
$ret_type
$fct_name\_SAF($args_call$eps_call)$_\n\n";
}

# Print the Static Adaptative version of a function
sub print_static_adaptatif {
  my ($CGAL, $t, $inline, $ret_type, $fct_name, $eps, $b, $new_body, @args)=@_;

  if ($eps == 0) {
    warning("Predicate \"$fct_name\" (".scalar(@args)." args) _must_ have at least one epsilon.");
  }

  # Print the accessory versions of the predicate.
  print_epsilon_function($ret_type, $fct_name, $new_body, $t, $eps,
  		         "${CGAL}Static_filter_error", "", @args);

  print_epsilon_function($ret_type, $fct_name, $new_body, $t, $eps,
  		         "Restricted_double", "const ", @args);

  # Print the function declaration
  my $bounds_check = arg_string("\n        fabs(", ".value()) > SAF_bound", " ||", @args);
  my $args_value = arg_string("\n\t\tRestricted_double(", ".value())", ",", @args);
  my $args_error = "\n\t\tStatic_filter_error(SAF_bound,0,1)," x ($#args+1);
  my $args_exact = arg_string("\n\t\t", ".exact()", ",", @args);
  my $args_epsilons = arg_string("\n\t\tSAF_epsilon_", "", ",", 0..$eps-1);
  my $static_epsilons = arg_string("  static double SAF_epsilon_",";\n", "", 0..$eps-1);
  my $args_call = arg_string("\n    const ${CGAL}Static_adaptatif_filter &", "", ",", @args);
  my $compute_new_bounds = arg_string("\n      SAF_bound = std::max(SAF_bound, fabs(", ".value()));", "", @args);

  print FO
"inline
$ret_type
$fct_name($args_call)
{
  bool tried = false;
  static double SAF_bound = -1.0;
$static_epsilons
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= SAF_bound.
    // The throw mecanism is not useful here, it should be before the try{}.
    if ($bounds_check)
      throw ${CGAL}Restricted_double::unsafe_comparison();
    // Try the epsilon variant of the predicate.
    return $fct_name\_SAF($args_value,$args_epsilons);
  }
  catch (${CGAL}Restricted_double::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute SAF_bound (tighter or larger).
      SAF_bound = 0;$compute_new_bounds

      // recompute epsilons: \"just\" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) $fct_name\_SAF($args_error$args_epsilons);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (SAF_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return $fct_name($args_exact);
  }
}\n\n";
}

# Parse from "template" to end of body
sub parse_function_definition {
  local ($_) = @_;
  /^\W*template\s*\<\s*(?:class|typename)\s*(\S*)\s*\>	# template type name
    \W*(CGAL_\w*INLINE|inline|)			# eventual inline directive
    \W*($CGAL_symbol_re)			# return type
    \W*($C_symbol_re)				# function name
    .*?\((.*?)\)/smx;				# argument list
  my ($x, $body, $after) = extract_balanced("{", "}", $');
  my @pred = ($1, $2, $3, $4, -1, $body."}", "");
  my $fct_name = $4;
  if (not $known_ret_types{$3}) {
    warning("Return type \"$3\" of function \"$4\" is unknown");
  }
  foreach (split (',', $5)) {
    if (not /const/) {
      warning("Non const argument \"$_\" in function \"$fct_name\".");
    }
    /($C_symbol_re)\s*$/;
    push @pred, $1;
  }
  return ($after, @pred);
}

# Main parsing subroutine
sub parse_input_code {
  local ($_) = @_;
  my $CGAL = "CGAL::";
  # Treat NO_FILTER parts
  s#//CGAL_NO_FILTER_BEGIN.*?//CGAL_NO_FILTER_END##msg;
  # Note that the following are buggy if they appear in strings (cf Perl FAQ).
  s#//.*##mg;      # Remove C++ "//" comments
  s#/\*.*?\*/##sg; # Remove C "/**/" comments
  while (/(CGAL_BEGIN_NAMESPACE|CGAL_END_NAMESPACE|template\s*\<.*?\>)/sm) {
    if ($1 eq "CGAL_BEGIN_NAMESPACE") { $CGAL=""; $_=$'; }
    elsif ($1 eq "CGAL_END_NAMESPACE") { $CGAL="CGAL::"; $_=$'; }
    else {
      my ($after, @pred) = parse_function_definition($1.$');
      push @predicates, [ $CGAL, @pred ];
      $pred_list_re.="|".$pred[$fct_name_pos-1];
      if ($static_version) { treat_predicate($#predicates); }
      $_ = $after;
    }
  }
}

# Print the code of the overloaded predicates
sub print_predicates {
  my $was_in_CGAL = 0;
  # We skip the built-in predicates.
  for $i ( $num_built_in_predicates .. $#predicates ) {
    my ($CGAL) = @{$predicates[$i]};
    print "CGAL_BEGIN_NAMESPACE\n\n" if $CGAL eq "" && not $was_in_CGAL;
    print "CGAL_END_NAMESPACE\n\n"   if $CGAL ne "" && $was_in_CGAL;
    if ($static_version) { print_static_adaptatif(@{$predicates[$i]}); }
    else { print_filtered_exact(@{$predicates[$i]}); }
    $was_in_CGAL = $CGAL eq "";
  }
  print "CGAL_END_NAMESPACE\n\n" if $was_in_CGAL;
}

# Matches balanced $beg $end (say "(" and ")"), and counts the number
# of zones separated by a comma at level 1.
# Returns number of zones found, text before, and after.
# Perl 5.6 will support extended regexp that will understand balanced exprs...
sub extract_balanced {
  local ($beg, $end, $_) = @_;
  my $num_args = 1;	# We don't handle 0 argument functions.
  my $before = "";
  my $quote_level = 0;
  while ( /./sm ) {
    if    ($& eq $beg) { ++$quote_level; }
    elsif ($& eq $end) { --$quote_level; last if ($quote_level == 0); }
    elsif ($& eq "," && $quote_level == 1) { ++$num_args; }
    $before .= $&;
    $_ = $';
  }
  # The original text was "$before$end$_" (the last closing $end).
  return ($num_args, $before, $_);
}

# Find predicate calls in the body
# Returns the number of epsilons that this predicate needs, and the new body.
sub match_calls_in_body {
  local ($_) = @_;
  my $new_body = "";
  my $num_eps = 0;

  # We match the first call to a known predicate function.
  while (/(\W)($pred_list_re)(\s*\()/sm) {
    my $predicate_name = $2;
    my ($num_args, $before, $after) = extract_balanced ("(", ")", "(".$');
    $new_body .= "$`$1$2_SAF$before"; # We add "_SAF" to the predicate name

    # Recognize the actual predicate, with same number of arguments.
    my $p;
    foreach ( @predicates ) {
      $p = $_;
      last if (scalar(@$p)-$args_pos == $num_args) && (@$p[$fct_name_pos] eq $predicate_name);
    }
    if (not $p) {
      warning("We matched \"$predicate_name\" with an unknown number of arguments");
    };

    # We add the epsilon arguments to the call in $new_body.
    for $i ( 0 .. @$p[$eps_pos] - 1 ) {
      $new_body .= ", epsilon_".($num_eps+$i);
    }
    $num_eps += @$p[$eps_pos];
    $_ = $after;
  }

  return ($num_eps, $new_body.$_);
}

# Calls match_calls_in_body over @predicates[$_], and updates $eps & $new_body.
sub treat_predicate {
  my ($i) = @_;
  my ($eps, $new_body) = match_calls_in_body($predicates[$i][$body_pos]);
  $predicates[$i][$new_body_pos] = $new_body;
  $predicates[$i][$eps_pos] = $eps;
}

# Parse the list of dependancy files, and populate @predicates with them.
sub parse_dependancy_files {
  foreach (@dependancy_files) {
    open(FI, "<$_") || die "Couldn't open dependancy file \"$_\"\n";
    parse_input_code(<FI>);
    close(FI);
  }
  # Consider them as built-in now (i.e. don't output specializations for them)
  $num_built_in_predicates=$#predicates+1;
}

# Main program
sub main {
  for ("Sign","Comparison_result","Orientation","Oriented_side","Bounded_side"){
    $known_ret_types{$_}=1;
    $known_ret_types{"CGAL::$_"}=1;
  }
  parse_command_line();
  undef $/; # We parse the _whole_ input files as strings, not line by line.
  if ($static_version && $opt_d) { parse_dependancy_files(); }
  open(FI, "<$opt_i") || die "Couldn't open input file \"$opt_i\"\n";
  my ($new_protect_name, $file_name, $rest) = parse_CGAL_header(<FI>);
  close(FI);
  parse_input_code($rest);
  open(FO, ">$opt_o") || die "Couldn't open output file \"$opt_o\"\n";
  put_CGAL_header($new_protect_name, $file_name);
  print_predicates();
  print FO "#endif // $new_protect_name\n";
  close(FO);
}

main();
