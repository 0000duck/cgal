#!/usr/local/bin/perl5 -w
#
# Copyright (c) 1998-1999 The CGAL Consortium
# Author: Sylvain Pion <Sylvain.Pion@sophia.inria.fr>.
#
# This script takes as input a source code file containing template predicates.
# It outputs the filtered specializations.
#
# It is not supposed to be universal: it doesn't understand full C++.
# But it appears to work for CGAL's predicates, so you might want
# to use it for your predicates too.
#
# See the CGAL documentation: Support Library, Number Types, Filtered_exact.

use vars qw($opt_p $opt_h $opt_s); # Suppress stupid warnings
require 'getopt.pl';

# Global variables
$static_version=0;		# Default is the filtered_exact version.
$new_protect_name="";		# equivalent to CGAL_ARITHMETIC_FILTER_BASIC_H.
@CGAL_enum_types=("Sign", "Comparison_result", "Orientation", "Oriented_side",
                  "Bounded_side");	# List of CGAL's enum types.
%known_ret_types=("bool", 1);	# Known allowed return types (completed in main)
@predicates=(			# list of predicates, with the 2 built-ins.
	# CGAL::, template_type, inline, ret_type, fct_name, #eps, body, args
    [ "", "NT", "inline", "Comparison_result", "compare", 1,
      "return (a < b) ? SMALLER : (b < a) ? LARGER : EQUAL;", "a", "b" ],
    [ "", "NT", "inline", "Sign", "sign", 1,
      "return (x < NT(0)) ? NEGATIVE : (NT(0) < x) ? POSITIVE : ZERO;", "x"] );
# What about the other excluded lexicographical_sign(), ... ?

# Useful regexps.
$C_symbol_re='[a-zA-Z_]\w*';			# A pure C symbol name.
$CGAL_symbol_re='(?:CGAL::|)'.$C_symbol_re;	# Idem with eventually 'CGAL::'


# Parse the command line options.
sub parse_command_line {
  Getopt('io');
  $pedantic=$opt_p;
  if ($opt_h) {
    print STDERR "Usage: filtered_predicate_converter [options]
    -i file : specify the input source file [default is stdin]
    -o file : specify the output file       [default is stdout]
    -p      : be pedantic (changes warnings into errors)
    -s      : semi-static version [default is Filtered_exact<>]
    -h      : print this help\n";
    exit;
  }
  $opt_i = "-" unless $opt_i;
  $opt_o = "-" unless $opt_o;
  $static_version = 1 if $opt_s;
}

# Auxiliary routine to emit a warning and die if pedantic.
sub warning {
  my ($msg) = @_;
  print STDERR "// Warning [above line $.]: $msg\n";
  die if $pedantic;
}

# Treats the CGAL header.
sub treat_CGAL_header {
  # skip the old header.
  while (<FI>) {
    # get $file_name from the "file:" field in the headers.
    $file_name = $1 if m#// file[\s]*: include/CGAL/(.*)#;

    # set $new_protect_name and exit.
    if (/^#ifndef[\s]*([\S]*_H)\s*/) {
      $_ = $1;
      $_ = "CGAL_$_" unless /CGAL_/;
      s/CGAL_/CGAL_ARITHMETIC_FILTER_/;
      $new_protect_name = $_;
      last;
    }
  }

  # put the new header.
  print FO
"// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Arithmetic_filter/$file_name
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion\@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec\@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.\n\n";
}

# Skips a "CGAL_NO_FILTER" section.
sub skip_no_filter_section {
  while (<FI>) { last if m#//CGAL_NO_FILTER_END#; }
}

# Print the Filtered_exact<> version of a predicate.
sub print_filtered_exact {
  # This version doesn't need the template type, the body, nor the epsilons.
  my ($CGAL, $t, $inline, $ret_type, $fct_name, $e, $b, @args) = @_;
  # Print the function declaration
  # The template line would be more pretty without the MipsPro hack...
  print FO
"#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif\n";
  print FO "/* $inline */\n" if $inline;	# No inline by default.
  print FO "$ret_type\n";
  print FO "$fct_name(\n";
  foreach (@args) {
    print FO "    const ${CGAL}Filtered_exact ";
    print FO "<CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &$_";
    print FO ($_ eq $args[$#args] ? ")\n" : ",\n");
  }
  # Print the body
  print FO "{
  ${CGAL}FPU_CW_t backup = ${CGAL}FPU_get_and_set_cw(${CGAL}FPU_cw_up);
  try
  {
    $ret_type result = $fct_name(\n";
  foreach (@args) {
    print FO "\t\t$_.interval()", ($_ eq $args[$#args] ? ");\n" : ",\n");
  }
  print FO "    ${CGAL}FPU_set_cw(backup);
    return result;
  } 
  catch (${CGAL}Interval_nt_advanced::unsafe_comparison)
  {
    ${CGAL}FPU_set_cw(backup);
    return $fct_name(\n";
  foreach (@args) {
    print FO "\t\t$_.exact()", ($_ eq $args[$#args] ? ");\n  }\n}\n\n" : ",\n");
  }
}

# Print the Static Adaptatif version of a predicate.
sub print_static_adaptatif {
  # Note: the template type needs to be exchanged with the actual type.
  my ($CGAL, $t, $inline, $ret_type, $fct_name, $e, $body, @args) = @_;
  my ($eps, $new_body) = match_calls_in_body($body);

  # Print the function declaration
  print FO "/* $inline */\n" if $inline;	# No inline by default.
  print FO "$ret_type\n";
  print FO "$fct_name(\n";
  foreach (@args) {
    print FO "    const ${CGAL}Static_adaptatif_filter &$_";
    print FO ($_ eq $args[$#args] ? ")\n" : ",\n");
  }
  # Print the body
  print FO "{
#error Check the bounds.
  try
  {
    return $fct_name(\n";
  foreach (@args) {
    print FO "\t\t$_.double(),\n";
  }
  for $i (0 .. $eps) {
    print FO "\t\tFilter_epsilon_$fct_name"."_$#@args"."_$i";
    print FO ($i eq $eps ? ");\n" : ",\n");
  }
  print FO "  } 
  catch (${CGAL}Static_adaptatif_filter::unsafe_comparison)
  {
#error We update the epsilon, or we call the interval version.
    return $fct_name(\n";
  foreach (@args) {
    print FO "\t\t$_.exact()", ($_ eq $args[$#args] ? ");\n  }\n}\n\n" : ",\n");
  }
}

# Parse from "template" to end of body "}"
sub parse_function_definition {
  my ($def) = @_;
  my ($template_type, $inline, $ret_type, $fct_name, $arg_list, $body, @args);
  while (<FI>) {
    $def .= $_;
    last if /^}\s*$/;
  }
  $_ = $def;
  /^\W*template\s*\<\s*(?:class|typename)\s*(\S*)\s*\>	# template type name
    \W*(CGAL_\w*INLINE|inline|)			# eventual inline directive
    \W*($CGAL_symbol_re)			# return type
    \W*($C_symbol_re)				# function name
    .*?\((.*?)\)/smx;				# argument list
  $template_type = $1;
  $inline   = $2;
  $ret_type = $3;
  $fct_name = $4;
  $arg_list = $5;
  $body     = $';
  # print STDERR "$template_type, $inline, $ret_type, $fct_name\n";
  foreach (split (',', $arg_list)) {
    if (not /const/) {
      warning("Non const argument \"$_\" in function \"$fct_name\".");
    }
    /($C_symbol_re)\s*$/;
    push @args, $1;
  }
  if (not $known_ret_types{$ret_type}) {
    warning("Return type \"$ret_type\" of function \"$fct_name\" is unknown");
  }
  return ($template_type, $inline, $ret_type, $fct_name, -1, $body, @args);
}

sub parse_input_code {
  my $CGAL = "CGAL::";
  while (<FI>) {
    # Treat the CGAL_NO_FILTER_BEGIN/CGAL_NO_FILTER_END section.
    if (m#//CGAL_NO_FILTER_BEGIN#) {
      skip_no_filter_section();
      next;
    }
  
    # Detect if we are in namespace CGAL:
    $CGAL="" if /CGAL_BEGIN_NAMESPACE/;
    $CGAL="CGAL::" if /CGAL_END_NAMESPACE/;
  
    # Treat next template function declaration.
    if (/template\W*\<.*\>/) {
      push @predicates, [ $CGAL, parse_function_definition($_) ];
    }
  }
}

# Print the code of the overloaded predicates
sub print_predicates {
  my $was_in_CGAL = 0;
  # We skip the 2 built-in predicates sign() and compare().
  for $i ( 2 .. $#predicates ) {
    my ($CGAL) = @{$predicates[$i]};
    print "CGAL_BEGIN_NAMESPACE\n\n" if $CGAL eq "" && not $was_in_CGAL;
    print "CGAL_END_NAMESPACE\n\n"   if $CGAL ne "" && $was_in_CGAL;
    if ($static_version) {
      print_static_adaptatif(@{$predicates[$i]});
    } else {
      print_filtered_exact(@{$predicates[$i]});
    }
    $was_in_CGAL = $CGAL eq "";
  }
  print "CGAL_END_NAMESPACE\n\n" if $was_in_CGAL;
}

# Match the first closing parenthesis at level -1 (assumes "(" already open).
# Returns number of arguments found before, text before, and after.
sub extract_closing_paren {
  local ($_) = @_;
  my $num_args = 1;	# We don't handle 0 argument functions.
  my $before = "";
  my $quote_level = 0;
  while ( /./sm ) {
    if ($& eq "(") {
      ++$quote_level;
    } elsif ($& eq ")") {
      --$quote_level;
      last if ($quote_level == -1);
    } elsif ($& eq "," && not $quote_level) {
      ++$num_args;
    }
    $before .= $&;
    $_ = $';
  }
  return ($num_args, $before, $_);
}

# Find predicate calls in the function body
# Returns the number of epsilons that this predicate needs, and the new body.
sub match_calls_in_body {
  my ($body) = @_;
  my $new_body = "";
  my $predicates_re = "(?:";
  my $num_eps=0;

  # We prepare the $predicates_re (should be done at an upper level).
  # Final is sthg like "(?:compare|sign|orientationC2)".
  foreach ( @predicates ) {
    $predicates_re .= "@$_[4]|";
  }
  chop($predicates_re);
  $predicates_re .= ')';

  # Maybe we should first globally remove comments ?
  # Note that the following are buggy if they appear in strings...
  # (http://www.perl.com/cgi-bin/pace/pub/doc/manual/html/pod/perlfaq6.html)
  $_ = $body;
  s#//.*##mg;      # Remove C++ "//" comments.
  s#/\*.*?\*/##sg; # Remove C "/* ... */" comments.

  # We match the first call to a known predicate function.
  while (/[^\w\d_]($predicates_re)\s*\(/sm) {
    $new_body .= "$`$&";
    $predicate_name = $1;
    $_ = $'; # useful or is it implicit ?
    ($num_args, $before, $after) = extract_closing_paren($_);
    $new_body .= $before;

    # Recognize the actual predicate.
    my $p;
    foreach ( @predicates ) {
      $p = $_;
      last if (scalar(@$p)-7 == $num_args) && (@$p[4] eq $predicate_name);
    }
    # We beleive we matched a predicate, but it's not in our list !!!
    die unless (scalar(@$p)-7 == $num_args) && (@$p[4] eq $predicate_name);

    # We add the epsilon arguments to the call in $new_body.
    for $i ( $num_eps .. $num_eps + @$p[5] - 1 ) {
      $new_body .= ", Filter_epsilon_$predicate_name"."_$num_args"."_$i";
    }
    
    $num_eps += @$p[5];
    $_ = $after;
  }
  $new_body .= $_;

  print STDERR "NEW BODY (num_eps = $num_eps): $new_body\n";
  print STDERR "---------------------------------------------------------\n";
  return ($num_eps, $new_body);
}

# Main program
sub main {
  foreach (@CGAL_enum_types) {
    $known_ret_types{$_}=1;
    $known_ret_types{"CGAL::$_"}=1;
  }
  parse_command_line();
  open(FI, "<$opt_i") || die "Couldn't open input file \"$opt_i\"\n";
  open(FO, ">$opt_o") || die "Couldn't open output file \"$opt_o\"\n";
  treat_CGAL_header();
  parse_input_code();
  print FO "#ifndef $new_protect_name\n";
  print FO "#define $new_protect_name\n\n";
  print_predicates();
  print FO "#endif // $new_protect_name\n";
}

main();
