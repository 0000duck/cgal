// This is an extract from include/CGAL/predicates_on_ftC2.h
// It's a template predicate.

#ifndef CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H
#define CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                 const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                 const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c)
{
  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		px.interval(),
		py.interval(),
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		px.exact(),
		py.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
  return result;
}

#ifdef CGAL_ARITHMETIC_FILTER_H
#include <CGAL/Arithmetic_filter/template_predicates_on_ft.h>
#endif

#endif // CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H
