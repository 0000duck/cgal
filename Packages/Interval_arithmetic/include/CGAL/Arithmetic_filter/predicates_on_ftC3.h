// ======================================================================
//
// Copyright (c) 1997 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
//
// release       :
// release_date  :
//
// file          : include/CGAL/Filter/predicates_on_ftC3.h
// package       : Interval_arithmetic
// source        : include/CGAL/predicates_on_ftC3.h
// revision      : $Revision$
// revision_date :
// author(s)     : Sylvain.Pion@sophia.inria.fr
//
// coordinator   : INRIA Sophia-Antipolis (Herve.Bronnimann@sophia.inria.fr)
//
// ======================================================================


#ifndef CGAL_FILTER_PREDICATES_ON_FTC3_H
#define CGAL_FILTER_PREDICATES_ON_FTC3_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

#ifndef CGAL_DETERMINANT_H
#include <CGAL/determinant.h>
#endif // CGAL_DETERMINANT_H
#ifndef CGAL_BASIC_CONSTRUCTIONS_FTC3_H
#include <CGAL/basic_constructions_ftC3.h>
#endif // CGAL_BASIC_CONSTRUCTIONS_FTC3_H

template < class CT, class ET >
CGAL_Comparison_result
CGAL_compare_lexicographically_xyzC3(const CGAL_Filtering<CT,ET> &x1,
	const CGAL_Filtering<CT,ET> &y1,
	const CGAL_Filtering<CT,ET> &z1,
	                                     const CGAL_Filtering<CT,ET> &x2,
	const CGAL_Filtering<CT,ET> &y2,
	const CGAL_Filtering<CT,ET> &z2)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_lexicographically_xyzC3(
		CGAL_to_Interval_nt_advanced(x1.value),
		CGAL_to_Interval_nt_advanced(y1.value),
		CGAL_to_Interval_nt_advanced(z1.value),
		CGAL_to_Interval_nt_advanced(x2.value),
		CGAL_to_Interval_nt_advanced(y2.value),
		CGAL_to_Interval_nt_advanced(z2.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_lexicographically_xyzC3(
		CGAL_to_exact_type<ET>(x1.value),
		CGAL_to_exact_type<ET>(y1.value),
		CGAL_to_exact_type<ET>(z1.value),
		CGAL_to_exact_type<ET>(x2.value),
		CGAL_to_exact_type<ET>(y2.value),
		CGAL_to_exact_type<ET>(z2.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinearC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                 const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                 const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinearC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinearC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
CGAL_Orientation
CGAL_orientationC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                   const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                   const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz,
	                   const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy,
	const CGAL_Filtering<CT,ET> &sz)
{ // This is the default filter (specialization).

  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value),
		CGAL_to_Interval_nt_advanced(sz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value),
		CGAL_to_exact_type<ET>(sz.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinear_are_ordered_along_lineC3(
     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	     const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_ordered_along_lineC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_ordered_along_lineC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinear_are_strictly_ordered_along_lineC3(
     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	     const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}


template < class CT, class ET >
CGAL_Oriented_side
CGAL_side_of_oriented_sphereC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                               const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                               const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz,
	                               const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy,
	const CGAL_Filtering<CT,ET> &sz,
	                               const CGAL_Filtering<CT,ET> &tx,
	const CGAL_Filtering<CT,ET> &ty,
	const CGAL_Filtering<CT,ET> &tz)
{ // This is the default filter (specialization).

  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_sphereC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value),
		CGAL_to_Interval_nt_advanced(sz.value),
		CGAL_to_Interval_nt_advanced(tx.value),
		CGAL_to_Interval_nt_advanced(ty.value),
		CGAL_to_Interval_nt_advanced(tz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_sphereC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value),
		CGAL_to_exact_type<ET>(sz.value),
		CGAL_to_exact_type<ET>(tx.value),
		CGAL_to_exact_type<ET>(ty.value),
		CGAL_to_exact_type<ET>(tz.value));
  }
  return result;
}

template < class CT, class ET >
CGAL_Bounded_side
CGAL_side_of_bounded_sphereC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                              const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                              const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz,
	                              const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy,
	const CGAL_Filtering<CT,ET> &sz,
	                              const CGAL_Filtering<CT,ET> &tx,
	const CGAL_Filtering<CT,ET> &ty,
	const CGAL_Filtering<CT,ET> &tz)
{ // This is the default filter (specialization).

  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_sphereC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value),
		CGAL_to_Interval_nt_advanced(sz.value),
		CGAL_to_Interval_nt_advanced(tx.value),
		CGAL_to_Interval_nt_advanced(ty.value),
		CGAL_to_Interval_nt_advanced(tz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_sphereC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value),
		CGAL_to_exact_type<ET>(sz.value),
		CGAL_to_exact_type<ET>(tx.value),
		CGAL_to_exact_type<ET>(ty.value),
		CGAL_to_exact_type<ET>(tz.value));
  }
  return result;
}


template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_dist_to_pointC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                         const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                         const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_dist_to_pointC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_dist_to_pointC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_dist_to_pointC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                                const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                                const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_dist_to_pointC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_dist_to_pointC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_dist_to_pointC3(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	                                 const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz,
	                                 const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	const CGAL_Filtering<CT,ET> &rz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_dist_to_pointC3(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_dist_to_pointC3(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &pa,
	const CGAL_Filtering<CT,ET> &pb,
	const CGAL_Filtering<CT,ET> &pc,
	const CGAL_Filtering<CT,ET> &pd,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(pa.value),
		CGAL_to_Interval_nt_advanced(pb.value),
		CGAL_to_Interval_nt_advanced(pc.value),
		CGAL_to_Interval_nt_advanced(pd.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(pa.value),
		CGAL_to_exact_type<ET>(pb.value),
		CGAL_to_exact_type<ET>(pc.value),
		CGAL_to_exact_type<ET>(pd.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &pa,
	const CGAL_Filtering<CT,ET> &pb,
	const CGAL_Filtering<CT,ET> &pc,
	const CGAL_Filtering<CT,ET> &pd,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(pa.value),
		CGAL_to_Interval_nt_advanced(pb.value),
		CGAL_to_Interval_nt_advanced(pc.value),
		CGAL_to_Interval_nt_advanced(pd.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(pa.value),
		CGAL_to_exact_type<ET>(pb.value),
		CGAL_to_exact_type<ET>(pc.value),
		CGAL_to_exact_type<ET>(pd.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &pa,
	const CGAL_Filtering<CT,ET> &pb,
	const CGAL_Filtering<CT,ET> &pc,
	const CGAL_Filtering<CT,ET> &pd,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(pa.value),
		CGAL_to_Interval_nt_advanced(pb.value),
		CGAL_to_Interval_nt_advanced(pc.value),
		CGAL_to_Interval_nt_advanced(pd.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(pa.value),
		CGAL_to_exact_type<ET>(pb.value),
		CGAL_to_exact_type<ET>(pc.value),
		CGAL_to_exact_type<ET>(pd.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &ppx,
	const CGAL_Filtering<CT,ET> &ppy,
	const CGAL_Filtering<CT,ET> &ppz,
	     const CGAL_Filtering<CT,ET> &pqx,
	const CGAL_Filtering<CT,ET> &pqy,
	const CGAL_Filtering<CT,ET> &pqz,
	     const CGAL_Filtering<CT,ET> &prx,
	const CGAL_Filtering<CT,ET> &pry,
	const CGAL_Filtering<CT,ET> &prz,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(ppx.value),
		CGAL_to_Interval_nt_advanced(ppy.value),
		CGAL_to_Interval_nt_advanced(ppz.value),
		CGAL_to_Interval_nt_advanced(pqx.value),
		CGAL_to_Interval_nt_advanced(pqy.value),
		CGAL_to_Interval_nt_advanced(pqz.value),
		CGAL_to_Interval_nt_advanced(prx.value),
		CGAL_to_Interval_nt_advanced(pry.value),
		CGAL_to_Interval_nt_advanced(prz.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(ppx.value),
		CGAL_to_exact_type<ET>(ppy.value),
		CGAL_to_exact_type<ET>(ppz.value),
		CGAL_to_exact_type<ET>(pqx.value),
		CGAL_to_exact_type<ET>(pqy.value),
		CGAL_to_exact_type<ET>(pqz.value),
		CGAL_to_exact_type<ET>(prx.value),
		CGAL_to_exact_type<ET>(pry.value),
		CGAL_to_exact_type<ET>(prz.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &ppx,
	const CGAL_Filtering<CT,ET> &ppy,
	const CGAL_Filtering<CT,ET> &ppz,
	     const CGAL_Filtering<CT,ET> &pqx,
	const CGAL_Filtering<CT,ET> &pqy,
	const CGAL_Filtering<CT,ET> &pqz,
	     const CGAL_Filtering<CT,ET> &prx,
	const CGAL_Filtering<CT,ET> &pry,
	const CGAL_Filtering<CT,ET> &prz,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(ppx.value),
		CGAL_to_Interval_nt_advanced(ppy.value),
		CGAL_to_Interval_nt_advanced(ppz.value),
		CGAL_to_Interval_nt_advanced(pqx.value),
		CGAL_to_Interval_nt_advanced(pqy.value),
		CGAL_to_Interval_nt_advanced(pqz.value),
		CGAL_to_Interval_nt_advanced(prx.value),
		CGAL_to_Interval_nt_advanced(pry.value),
		CGAL_to_Interval_nt_advanced(prz.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(ppx.value),
		CGAL_to_exact_type<ET>(ppy.value),
		CGAL_to_exact_type<ET>(ppz.value),
		CGAL_to_exact_type<ET>(pqx.value),
		CGAL_to_exact_type<ET>(pqy.value),
		CGAL_to_exact_type<ET>(pqz.value),
		CGAL_to_exact_type<ET>(prx.value),
		CGAL_to_exact_type<ET>(pry.value),
		CGAL_to_exact_type<ET>(prz.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtering<CT,ET> &ppx,
	const CGAL_Filtering<CT,ET> &ppy,
	const CGAL_Filtering<CT,ET> &ppz,
	     const CGAL_Filtering<CT,ET> &pqx,
	const CGAL_Filtering<CT,ET> &pqy,
	const CGAL_Filtering<CT,ET> &pqz,
	     const CGAL_Filtering<CT,ET> &prx,
	const CGAL_Filtering<CT,ET> &pry,
	const CGAL_Filtering<CT,ET> &prz,
	     const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	const CGAL_Filtering<CT,ET> &pz,
	     const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	const CGAL_Filtering<CT,ET> &qz)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_to_Interval_nt_advanced(ppx.value),
		CGAL_to_Interval_nt_advanced(ppy.value),
		CGAL_to_Interval_nt_advanced(ppz.value),
		CGAL_to_Interval_nt_advanced(pqx.value),
		CGAL_to_Interval_nt_advanced(pqy.value),
		CGAL_to_Interval_nt_advanced(pqz.value),
		CGAL_to_Interval_nt_advanced(prx.value),
		CGAL_to_Interval_nt_advanced(pry.value),
		CGAL_to_Interval_nt_advanced(prz.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(pz.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_to_exact_type<ET>(ppx.value),
		CGAL_to_exact_type<ET>(ppy.value),
		CGAL_to_exact_type<ET>(ppz.value),
		CGAL_to_exact_type<ET>(pqx.value),
		CGAL_to_exact_type<ET>(pqy.value),
		CGAL_to_exact_type<ET>(pqz.value),
		CGAL_to_exact_type<ET>(prx.value),
		CGAL_to_exact_type<ET>(pry.value),
		CGAL_to_exact_type<ET>(prz.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(pz.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(qz.value));
  }
  return result;
}

// Sylvain: you can uncomment this whenever you're ready
// #ifdef CGAL_FILTER_H
// #include <CGAL/Filter/predicates_on_ftC3.h>
// #endif


#endif // CGAL_FILTER_PREDICATES_ON_FTC3_H
