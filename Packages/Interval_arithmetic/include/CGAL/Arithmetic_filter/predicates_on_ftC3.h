// ======================================================================
//
// Copyright (c) 1997 The CGAL Consortium
//
// This software and related documentation is part of the
// Computational Geometry Algorithms Library (CGAL).
//
// Every use of CGAL requires a license. Licenses come in three kinds:
//
// - For academic research and teaching purposes, permission to use and
//   copy the software and its documentation is hereby granted free of  
//   charge, provided that
//   (1) it is not a component of a commercial product, and
//   (2) this notice appears in all copies of the software and
//       related documentation.
// - Development licenses grant access to the source code of the library 
//   to develop programs. These programs may be sold to other parties as 
//   executable code. To obtain a development license, please contact
//   the CGAL Consortium (at cgal@cs.uu.nl).
// - Commercialization licenses grant access to the source code and the
//   right to sell development licenses. To obtain a commercialization 
//   license, please contact the CGAL Consortium (at cgal@cs.uu.nl).
//
// This software and documentation is provided "as-is" and without
// warranty of any kind. In no event shall the CGAL Consortium be
// liable for any damage of any kind.
//
// The CGAL Consortium consists of Utrecht University (The Netherlands),
// ETH Zurich (Switzerland), Free University of Berlin (Germany),
// INRIA Sophia-Antipolis (France), Martin-Luther-University Halle-Wittenberg
// (Germany) Max-Planck-Institute Saarbrucken (Germany), RISC Linz (Austria),
// and Tel-Aviv University (Israel).
//
// ----------------------------------------------------------------------
//
// release       :
// release_date  :
//
// file          : include/CGAL/Arithmetic_filter/predicates_on_ftC3.h
// package       : Interval_arithmetic
// source        : include/CGAL/predicates_on_ftC3.h
// revision      : $Revision$
// revision_date :
// author(s)     : Sylvain.Pion@sophia.inria.fr
//
// coordinator   : INRIA Sophia-Antipolis
//
//
// email         : cgal@cs.uu.nl
//
// ======================================================================


#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

#ifndef CGAL_DETERMINANT_H
#include <CGAL/determinant.h>
#endif // CGAL_DETERMINANT_H
#ifndef CGAL_BASIC_CONSTRUCTIONS_FTC3_H
#include <CGAL/basic_constructions_ftC3.h>
#endif // CGAL_BASIC_CONSTRUCTIONS_FTC3_H

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Comparison_result
CGAL_compare_lexicographically_xyzC3(const CGAL_Filtered_exact<CT,ET> &x1,
	const CGAL_Filtered_exact<CT,ET> &y1,
	const CGAL_Filtered_exact<CT,ET> &z1,
	                                     const CGAL_Filtered_exact<CT,ET> &x2,
	const CGAL_Filtered_exact<CT,ET> &y2,
	const CGAL_Filtered_exact<CT,ET> &z2)
{
  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_lexicographically_xyzC3(
		x1.interval(),
		y1.interval(),
		z1.interval(),
		x2.interval(),
		y2.interval(),
		z2.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_lexicographically_xyzC3(
		x1.exact(),
		y1.exact(),
		z1.exact(),
		x2.exact(),
		y2.exact(),
		z2.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_collinearC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinearC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinearC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Orientation
CGAL_orientationC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                   const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                   const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                   const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz)
{
  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_collinear_are_ordered_along_lineC3(
     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	     const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_ordered_along_lineC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_ordered_along_lineC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_collinear_are_strictly_ordered_along_lineC3(
     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	     const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}


template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Oriented_side
CGAL_side_of_oriented_sphereC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                               const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                               const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                               const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz,
	                               const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty,
	const CGAL_Filtered_exact<CT,ET> &tz)
{
  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Bounded_side
CGAL_side_of_bounded_sphereC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                              const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                              const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                              const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz,
	                              const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty,
	const CGAL_Filtered_exact<CT,ET> &tz)
{
  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
  return result;
}


template < class CT, class ET >
// CGAL_KERNEL_INLINE
CGAL_Comparison_result
CGAL_cmp_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                         const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                         const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_dist_to_pointC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_larger_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                                const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                                const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_dist_to_pointC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_smaller_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_dist_to_pointC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		pa.interval(),
		pb.interval(),
		pc.interval(),
		pd.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		pd.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		pa.interval(),
		pb.interval(),
		pc.interval(),
		pd.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		pd.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		pa.interval(),
		pb.interval(),
		pc.interval(),
		pd.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		pd.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		ppx.interval(),
		ppy.interval(),
		ppz.interval(),
		pqx.interval(),
		pqy.interval(),
		pqz.interval(),
		prx.interval(),
		pry.interval(),
		prz.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		ppx.interval(),
		ppy.interval(),
		ppz.interval(),
		pqx.interval(),
		pqy.interval(),
		pqz.interval(),
		prx.interval(),
		pry.interval(),
		prz.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{
  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		ppx.interval(),
		ppy.interval(),
		ppz.interval(),
		pqx.interval(),
		pqy.interval(),
		pqz.interval(),
		prx.interval(),
		pry.interval(),
		prz.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
  return result;
}

#ifdef CGAL_ARITHMETIC_FILTER_H
#include <CGAL/Arithmetic_filter/predicates_on_ftC3.h>
#endif


#endif // CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H
