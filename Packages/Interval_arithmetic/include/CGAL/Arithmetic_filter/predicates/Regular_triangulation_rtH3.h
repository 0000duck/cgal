// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Arithmetic_filter/predicates/Regular_triangulation_rtH3.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_RTH3_H
#define CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_RTH3_H

CGAL_BEGIN_NAMESPACE

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/*  */
Oriented_side
power_testH3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &phx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &phy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &phz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &phw,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &pwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qhx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qhy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qhz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qhw,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rhx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rhy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rhz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rhw,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &shx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &shy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &shz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &shw,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &swt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &thx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &thy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &thz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &thw,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &twt)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Oriented_side result = power_testH3(
		phx.interval(),
		phy.interval(),
		phz.interval(),
		phw.interval(),
		pwt.interval(),
		qhx.interval(),
		qhy.interval(),
		qhz.interval(),
		qhw.interval(),
		qwt.interval(),
		rhx.interval(),
		rhy.interval(),
		rhz.interval(),
		rhw.interval(),
		rwt.interval(),
		shx.interval(),
		shy.interval(),
		shz.interval(),
		shw.interval(),
		swt.interval(),
		thx.interval(),
		thy.interval(),
		thz.interval(),
		thw.interval(),
		twt.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return power_testH3(
		phx.exact(),
		phy.exact(),
		phz.exact(),
		phw.exact(),
		pwt.exact(),
		qhx.exact(),
		qhy.exact(),
		qhz.exact(),
		qhw.exact(),
		qwt.exact(),
		rhx.exact(),
		rhy.exact(),
		rhz.exact(),
		rhw.exact(),
		rwt.exact(),
		shx.exact(),
		shy.exact(),
		shz.exact(),
		shw.exact(),
		swt.exact(),
		thx.exact(),
		thy.exact(),
		thz.exact(),
		thw.exact(),
		twt.exact());
  }
}

inline
Oriented_side
power_testH3(
    const Static_adaptatif_filter &phx,
    const Static_adaptatif_filter &phy,
    const Static_adaptatif_filter &phz,
    const Static_adaptatif_filter &phw,
    const Static_adaptatif_filter &pwt,
    const Static_adaptatif_filter &qhx,
    const Static_adaptatif_filter &qhy,
    const Static_adaptatif_filter &qhz,
    const Static_adaptatif_filter &qhw,
    const Static_adaptatif_filter &qwt,
    const Static_adaptatif_filter &rhx,
    const Static_adaptatif_filter &rhy,
    const Static_adaptatif_filter &rhz,
    const Static_adaptatif_filter &rhw,
    const Static_adaptatif_filter &rwt,
    const Static_adaptatif_filter &shx,
    const Static_adaptatif_filter &shy,
    const Static_adaptatif_filter &shz,
    const Static_adaptatif_filter &shw,
    const Static_adaptatif_filter &swt,
    const Static_adaptatif_filter &thx,
    const Static_adaptatif_filter &thy,
    const Static_adaptatif_filter &thz,
    const Static_adaptatif_filter &thw,
    const Static_adaptatif_filter &twt)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(phx.value()) > SAF_bound ||
	fabs(phy.value()) > SAF_bound ||
	fabs(phz.value()) > SAF_bound ||
	fabs(phw.value()) > SAF_bound ||
	fabs(pwt.value()) > SAF_bound ||
	fabs(qhx.value()) > SAF_bound ||
	fabs(qhy.value()) > SAF_bound ||
	fabs(qhz.value()) > SAF_bound ||
	fabs(qhw.value()) > SAF_bound ||
	fabs(qwt.value()) > SAF_bound ||
	fabs(rhx.value()) > SAF_bound ||
	fabs(rhy.value()) > SAF_bound ||
	fabs(rhz.value()) > SAF_bound ||
	fabs(rhw.value()) > SAF_bound ||
	fabs(rwt.value()) > SAF_bound ||
	fabs(shx.value()) > SAF_bound ||
	fabs(shy.value()) > SAF_bound ||
	fabs(shz.value()) > SAF_bound ||
	fabs(shw.value()) > SAF_bound ||
	fabs(swt.value()) > SAF_bound ||
	fabs(thx.value()) > SAF_bound ||
	fabs(thy.value()) > SAF_bound ||
	fabs(thz.value()) > SAF_bound ||
	fabs(thw.value()) > SAF_bound ||
	fabs(twt.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(phx.value()));
      SAF_bound = std::max(SAF_bound, fabs(phy.value()));
      SAF_bound = std::max(SAF_bound, fabs(phz.value()));
      SAF_bound = std::max(SAF_bound, fabs(phw.value()));
      SAF_bound = std::max(SAF_bound, fabs(pwt.value()));
      SAF_bound = std::max(SAF_bound, fabs(qhx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qhy.value()));
      SAF_bound = std::max(SAF_bound, fabs(qhz.value()));
      SAF_bound = std::max(SAF_bound, fabs(qhw.value()));
      SAF_bound = std::max(SAF_bound, fabs(qwt.value()));
      SAF_bound = std::max(SAF_bound, fabs(rhx.value()));
      SAF_bound = std::max(SAF_bound, fabs(rhy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rhz.value()));
      SAF_bound = std::max(SAF_bound, fabs(rhw.value()));
      SAF_bound = std::max(SAF_bound, fabs(rwt.value()));
      SAF_bound = std::max(SAF_bound, fabs(shx.value()));
      SAF_bound = std::max(SAF_bound, fabs(shy.value()));
      SAF_bound = std::max(SAF_bound, fabs(shz.value()));
      SAF_bound = std::max(SAF_bound, fabs(shw.value()));
      SAF_bound = std::max(SAF_bound, fabs(swt.value()));
      SAF_bound = std::max(SAF_bound, fabs(thx.value()));
      SAF_bound = std::max(SAF_bound, fabs(thy.value()));
      SAF_bound = std::max(SAF_bound, fabs(thz.value()));
      SAF_bound = std::max(SAF_bound, fabs(thw.value()));
      SAF_bound = std::max(SAF_bound, fabs(twt.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) power_testH3_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return power_testH3_SAF(
		Restricted_double(phx.value()),
		Restricted_double(phy.value()),
		Restricted_double(phz.value()),
		Restricted_double(phw.value()),
		Restricted_double(pwt.value()),
		Restricted_double(qhx.value()),
		Restricted_double(qhy.value()),
		Restricted_double(qhz.value()),
		Restricted_double(qhw.value()),
		Restricted_double(qwt.value()),
		Restricted_double(rhx.value()),
		Restricted_double(rhy.value()),
		Restricted_double(rhz.value()),
		Restricted_double(rhw.value()),
		Restricted_double(rwt.value()),
		Restricted_double(shx.value()),
		Restricted_double(shy.value()),
		Restricted_double(shz.value()),
		Restricted_double(shw.value()),
		Restricted_double(swt.value()),
		Restricted_double(thx.value()),
		Restricted_double(thy.value()),
		Restricted_double(thz.value()),
		Restricted_double(thw.value()),
		Restricted_double(twt.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testH3(
		phx.exact(),
		phy.exact(),
		phz.exact(),
		phw.exact(),
		pwt.exact(),
		qhx.exact(),
		qhy.exact(),
		qhz.exact(),
		qhw.exact(),
		qwt.exact(),
		rhx.exact(),
		rhy.exact(),
		rhz.exact(),
		rhw.exact(),
		rwt.exact(),
		shx.exact(),
		shy.exact(),
		shz.exact(),
		shw.exact(),
		swt.exact(),
		thx.exact(),
		thy.exact(),
		thz.exact(),
		thw.exact(),
		twt.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_RTH3_H
