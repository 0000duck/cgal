// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Arithmetic_filter/predicates/Regular_triangulation_ftC2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_FTC2_H
#define CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_FTC2_H

CGAL_BEGIN_NAMESPACE

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/*  */
Oriented_side
power_testC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &twt)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Oriented_side result = power_testC2(
		px.interval(),
		py.interval(),
		pwt.interval(),
		qx.interval(),
		qy.interval(),
		qwt.interval(),
		rx.interval(),
		ry.interval(),
		rwt.interval(),
		tx.interval(),
		ty.interval(),
		twt.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		rx.exact(),
		ry.exact(),
		rwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

struct Static_Filtered_power_testC2_12
{
  static double _bound;
  static double _epsilon_0;
  // static unsigned number_of_failures; // ?

  // Call this function from the outside to update the context.
  static void new_bound (double b, error = 0)
  {
    _bound = b;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilons(b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Oriented_side update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pwt,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qwt,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rwt,
	const Static_filter_error &tx,
	const Static_filter_error &ty,
	const Static_filter_error &twt,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
      
  
      
      FT dpx = px - tx;
      FT dpy = py - ty;
      FT dpz = square(dpx) + square(dpy) - pwt + twt;
      FT dqx = qx - tx;
      FT dqy = qy - ty;
      FT dqz = square(dqx) + square(dqy) - qwt + twt;
      FT drx = rx - tx;
      FT dry = ry - ty;
      FT drz = square(drx) + square(dry) - rwt + twt;
  
      return Oriented_side(Static_Filtered_sign_of_determinant3x3_9::update_epsilon(dpx, dpy, dpz,
                                                  dqx, dqy, dqz,
                                                  drx, dry, drz,
  		epsilon_0));
  }

  static Oriented_side epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pwt,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qwt,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rwt,
	const Restricted_double &tx,
	const Restricted_double &ty,
	const Restricted_double &twt,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
      
  
      
      FT dpx = px - tx;
      FT dpy = py - ty;
      FT dpz = square(dpx) + square(dpy) - pwt + twt;
      FT dqx = qx - tx;
      FT dqy = qy - ty;
      FT dqz = square(dqx) + square(dqy) - qwt + twt;
      FT drx = rx - tx;
      FT dry = ry - ty;
      FT drz = square(drx) + square(dry) - rwt + twt;
  
      return Oriented_side(Static_Filtered_sign_of_determinant3x3_9::epsilon_variant(dpx, dpy, dpz,
                                                  dqx, dqy, dqz,
                                                  drx, dry, drz,
  		epsilon_0));
  }
};

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/*  */
Oriented_side
power_testC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &twt)
{
  bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_power_testC2_12::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pwt.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qwt.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rwt.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(twt.to_double()) > SAF_bound)
  {
re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pwt.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qwt.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rwt.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ty.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(twt.to_double()));
    // Re-adjust the context.
    Static_Filtered_power_testC2_12::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_power_testC2_12::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pwt.dbl(),
		qx.dbl(),
		qy.dbl(),
		qwt.dbl(),
		rx.dbl(),
		ry.dbl(),
		rwt.dbl(),
		tx.dbl(),
		ty.dbl(),
		twt.dbl(),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		rx.exact(),
		ry.exact(),
		rwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/*  */
Oriented_side
power_testC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &twt)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Oriented_side result = power_testC2(
		px.interval(),
		py.interval(),
		pwt.interval(),
		qx.interval(),
		qy.interval(),
		qwt.interval(),
		tx.interval(),
		ty.interval(),
		twt.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

struct Static_Filtered_power_testC2_9
{
  static double _bound;
  static double _epsilon_0,_epsilon_1,_epsilon_2,_epsilon_3;
  // static unsigned number_of_failures; // ?

  // Call this function from the outside to update the context.
  static void new_bound (double b, error = 0)
  {
    _bound = b;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilons(b,b,b,b,b,b,_epsilon_0,_epsilon_1,_epsilon_2,_epsilon_3);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Oriented_side update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pwt,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qwt,
	const Static_filter_error &tx,
	const Static_filter_error &ty,
	const Static_filter_error &twt,
	double & epsilon_0,
	double & epsilon_1,
	double & epsilon_2,
	double & epsilon_3)
  {
    typedef Static_filter_error FT;
  
      
      FT dpx = px - tx;
      FT dpy = py - ty;
      FT dpz = square(dpx) + square(dpy) - pwt + twt;
      FT dqx = qx - tx;
      FT dqy = qy - ty;
      FT dqz = square(dqx) + square(dqy) - qwt + twt;
  
      
      Comparison_result cmpx = CGAL::Static_Filtered_compare_2::update_epsilon(px, qx,
  		epsilon_0);
      if (cmpx != EQUAL)
  	return Oriented_side(cmpx * Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dpx, dpz, dqx, dqz,
  		epsilon_1));
  
      
      Comparison_result cmpy = CGAL::Static_Filtered_compare_2::update_epsilon(py, qy,
  		epsilon_2);
      return Oriented_side(cmpy * Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dpy, dpz, dqy, dqz,
  		epsilon_3));
  }

  static Oriented_side epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pwt,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qwt,
	const Restricted_double &tx,
	const Restricted_double &ty,
	const Restricted_double &twt,
	const double & epsilon_0,
	const double & epsilon_1,
	const double & epsilon_2,
	const double & epsilon_3)
  {
    typedef Restricted_double FT;
  
      
      FT dpx = px - tx;
      FT dpy = py - ty;
      FT dpz = square(dpx) + square(dpy) - pwt + twt;
      FT dqx = qx - tx;
      FT dqy = qy - ty;
      FT dqz = square(dqx) + square(dqy) - qwt + twt;
  
      
      Comparison_result cmpx = CGAL::Static_Filtered_compare_2::epsilon_variant(px, qx,
  		epsilon_0);
      if (cmpx != EQUAL)
  	return Oriented_side(cmpx * Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dpx, dpz, dqx, dqz,
  		epsilon_1));
  
      
      Comparison_result cmpy = CGAL::Static_Filtered_compare_2::epsilon_variant(py, qy,
  		epsilon_2);
      return Oriented_side(cmpy * Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dpy, dpz, dqy, dqz,
  		epsilon_3));
  }
};

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/*  */
Oriented_side
power_testC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qwt,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &twt)
{
  bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_power_testC2_9::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pwt.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qwt.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(twt.to_double()) > SAF_bound)
  {
re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pwt.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qwt.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ty.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(twt.to_double()));
    // Re-adjust the context.
    Static_Filtered_power_testC2_9::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_power_testC2_9::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pwt.dbl(),
		qx.dbl(),
		qy.dbl(),
		qwt.dbl(),
		tx.dbl(),
		ty.dbl(),
		twt.dbl(),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2,
		SAF_epsilon_3);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_ARITHMETIC_FILTER_REGULAR_TRIANGULATION_FTC2_H
