// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Arithmetic_filter/predicates_on_ftC2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H

CGAL_BEGIN_NAMESPACE

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
compare_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2c)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_xC2(
		px.interval(),
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

inline
Comparison_result
compare_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(l1a.value()) > SAF_bound ||
	fabs(l1b.value()) > SAF_bound ||
	fabs(l1c.value()) > SAF_bound ||
	fabs(l2a.value()) > SAF_bound ||
	fabs(l2b.value()) > SAF_bound ||
	fabs(l2c.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2c.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_xC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(l1a.value()),
		Restricted_double(l1b.value()),
		Restricted_double(l1c.value()),
		Restricted_double(l2a.value()),
		Restricted_double(l2b.value()),
		Restricted_double(l2c.value()),
		SAF_epsilon_0,
		SAF_epsilon_1);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
compare_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2c)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_xC2(
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval(),
		h1a.interval(),
		h1b.interval(),
		h1c.interval(),
		h2a.interval(),
		h2b.interval(),
		h2c.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

inline
Comparison_result
compare_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &h1a,
    const Static_adaptatif_filter &h1b,
    const Static_adaptatif_filter &h1c,
    const Static_adaptatif_filter &h2a,
    const Static_adaptatif_filter &h2b,
    const Static_adaptatif_filter &h2c)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;
  static double SAF_epsilon_2;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(l1a.value()) > SAF_bound ||
	fabs(l1b.value()) > SAF_bound ||
	fabs(l1c.value()) > SAF_bound ||
	fabs(l2a.value()) > SAF_bound ||
	fabs(l2b.value()) > SAF_bound ||
	fabs(l2c.value()) > SAF_bound ||
	fabs(h1a.value()) > SAF_bound ||
	fabs(h1b.value()) > SAF_bound ||
	fabs(h1c.value()) > SAF_bound ||
	fabs(h2a.value()) > SAF_bound ||
	fabs(h2b.value()) > SAF_bound ||
	fabs(h2c.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(l1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2c.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2c.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_xC2_SAF(
		Restricted_double(l1a.value()),
		Restricted_double(l1b.value()),
		Restricted_double(l1c.value()),
		Restricted_double(l2a.value()),
		Restricted_double(l2b.value()),
		Restricted_double(l2c.value()),
		Restricted_double(h1a.value()),
		Restricted_double(h1b.value()),
		Restricted_double(h1c.value()),
		Restricted_double(h2a.value()),
		Restricted_double(h2b.value()),
		Restricted_double(h2c.value()),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
compare_y_at_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &la,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &lb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &lc)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_y_at_xC2(
		px.interval(),
		py.interval(),
		la.interval(),
		lb.interval(),
		lc.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_y_at_xC2(
		px.exact(),
		py.exact(),
		la.exact(),
		lb.exact(),
		lc.exact());
  }
}

inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &la,
    const Static_adaptatif_filter &lb,
    const Static_adaptatif_filter &lc)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(la.value()) > SAF_bound ||
	fabs(lb.value()) > SAF_bound ||
	fabs(lc.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(la.value()));
      SAF_bound = std::max(SAF_bound, fabs(lb.value()));
      SAF_bound = std::max(SAF_bound, fabs(lc.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_y_at_xC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(la.value()),
		Restricted_double(lb.value()),
		Restricted_double(lc.value()),
		SAF_epsilon_0,
		SAF_epsilon_1);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		px.exact(),
		py.exact(),
		la.exact(),
		lb.exact(),
		lc.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
compare_y_at_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2c)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_y_at_xC2(
		px.interval(),
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_y_at_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;
  static double SAF_epsilon_2;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(l1a.value()) > SAF_bound ||
	fabs(l1b.value()) > SAF_bound ||
	fabs(l1c.value()) > SAF_bound ||
	fabs(l2a.value()) > SAF_bound ||
	fabs(l2b.value()) > SAF_bound ||
	fabs(l2c.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2c.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_y_at_xC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(l1a.value()),
		Restricted_double(l1b.value()),
		Restricted_double(l1c.value()),
		Restricted_double(l2a.value()),
		Restricted_double(l2b.value()),
		Restricted_double(l2c.value()),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Comparison_result
compare_y_at_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ha,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &hb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &hc)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_y_at_xC2(
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval(),
		ha.interval(),
		hb.interval(),
		hc.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		ha.exact(),
		hb.exact(),
		hc.exact());
  }
}

inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &ha,
    const Static_adaptatif_filter &hb,
    const Static_adaptatif_filter &hc)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;
  static double SAF_epsilon_2;
  static double SAF_epsilon_3;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(l1a.value()) > SAF_bound ||
	fabs(l1b.value()) > SAF_bound ||
	fabs(l1c.value()) > SAF_bound ||
	fabs(l2a.value()) > SAF_bound ||
	fabs(l2b.value()) > SAF_bound ||
	fabs(l2c.value()) > SAF_bound ||
	fabs(ha.value()) > SAF_bound ||
	fabs(hb.value()) > SAF_bound ||
	fabs(hc.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(l1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2c.value()));
      SAF_bound = std::max(SAF_bound, fabs(ha.value()));
      SAF_bound = std::max(SAF_bound, fabs(hb.value()));
      SAF_bound = std::max(SAF_bound, fabs(hc.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2,
		SAF_epsilon_3);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_y_at_xC2_SAF(
		Restricted_double(l1a.value()),
		Restricted_double(l1b.value()),
		Restricted_double(l1c.value()),
		Restricted_double(l2a.value()),
		Restricted_double(l2b.value()),
		Restricted_double(l2c.value()),
		Restricted_double(ha.value()),
		Restricted_double(hb.value()),
		Restricted_double(hc.value()),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2,
		SAF_epsilon_3);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		ha.exact(),
		hb.exact(),
		hc.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Comparison_result
compare_y_at_xC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &l2c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h1c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &h2c)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_y_at_xC2(
		l1a.interval(),
		l1b.interval(),
		l1c.interval(),
		l2a.interval(),
		l2b.interval(),
		l2c.interval(),
		h1a.interval(),
		h1b.interval(),
		h1c.interval(),
		h2a.interval(),
		h2b.interval(),
		h2c.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &h1a,
    const Static_adaptatif_filter &h1b,
    const Static_adaptatif_filter &h1c,
    const Static_adaptatif_filter &h2a,
    const Static_adaptatif_filter &h2b,
    const Static_adaptatif_filter &h2c)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;
  static double SAF_epsilon_2;
  static double SAF_epsilon_3;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(l1a.value()) > SAF_bound ||
	fabs(l1b.value()) > SAF_bound ||
	fabs(l1c.value()) > SAF_bound ||
	fabs(l2a.value()) > SAF_bound ||
	fabs(l2b.value()) > SAF_bound ||
	fabs(l2c.value()) > SAF_bound ||
	fabs(h1a.value()) > SAF_bound ||
	fabs(h1b.value()) > SAF_bound ||
	fabs(h1c.value()) > SAF_bound ||
	fabs(h2a.value()) > SAF_bound ||
	fabs(h2b.value()) > SAF_bound ||
	fabs(h2c.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(l1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(l2c.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1a.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1b.value()));
      SAF_bound = std::max(SAF_bound, fabs(h1c.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2a.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2b.value()));
      SAF_bound = std::max(SAF_bound, fabs(h2c.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2,
		SAF_epsilon_3);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_y_at_xC2_SAF(
		Restricted_double(l1a.value()),
		Restricted_double(l1b.value()),
		Restricted_double(l1c.value()),
		Restricted_double(l2a.value()),
		Restricted_double(l2b.value()),
		Restricted_double(l2c.value()),
		Restricted_double(h1a.value()),
		Restricted_double(h1b.value()),
		Restricted_double(h1c.value()),
		Restricted_double(h2a.value()),
		Restricted_double(h2b.value()),
		Restricted_double(h2c.value()),
		SAF_epsilon_0,
		SAF_epsilon_1,
		SAF_epsilon_2,
		SAF_epsilon_3);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* inline */
Comparison_result
compare_deltax_deltayC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &sy)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = compare_deltax_deltayC2(
		px.interval(),
		qx.interval(),
		ry.interval(),
		sy.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return compare_deltax_deltayC2(
		px.exact(),
		qx.exact(),
		ry.exact(),
		sy.exact());
  }
}

inline
Comparison_result
compare_deltax_deltayC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &sy)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound ||
	fabs(sy.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));
      SAF_bound = std::max(SAF_bound, fabs(sy.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_deltax_deltayC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return compare_deltax_deltayC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(qx.value()),
		Restricted_double(ry.value()),
		Restricted_double(sy.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_deltax_deltayC2(
		px.exact(),
		qx.exact(),
		ry.exact(),
		sy.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* inline */
Orientation
orientationC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Orientation result = orientationC2(
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval(),
		rx.interval(),
		ry.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return orientationC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

inline
Orientation
orientationC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound ||
	fabs(rx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) orientationC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return orientationC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		Restricted_double(rx.value()),
		Restricted_double(ry.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return orientationC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_circleC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ty)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Oriented_side result = side_of_oriented_circleC2(
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval(),
		rx.interval(),
		ry.interval(),
		tx.interval(),
		ty.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return side_of_oriented_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

inline
Oriented_side
side_of_oriented_circleC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound ||
	fabs(rx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound ||
	fabs(tx.value()) > SAF_bound ||
	fabs(ty.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));
      SAF_bound = std::max(SAF_bound, fabs(tx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ty.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) side_of_oriented_circleC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return side_of_oriented_circleC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		Restricted_double(rx.value()),
		Restricted_double(ry.value()),
		Restricted_double(tx.value()),
		Restricted_double(ty.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return side_of_oriented_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Bounded_side
side_of_bounded_circleC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ty)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Bounded_side result = side_of_bounded_circleC2(
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval(),
		rx.interval(),
		ry.interval(),
		tx.interval(),
		ty.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return side_of_bounded_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

inline
Bounded_side
side_of_bounded_circleC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;
  static double SAF_epsilon_1;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound ||
	fabs(rx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound ||
	fabs(tx.value()) > SAF_bound ||
	fabs(ty.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));
      SAF_bound = std::max(SAF_bound, fabs(tx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ty.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) side_of_bounded_circleC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0,
		SAF_epsilon_1);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return side_of_bounded_circleC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		Restricted_double(rx.value()),
		Restricted_double(ry.value()),
		Restricted_double(tx.value()),
		Restricted_double(ty.value()),
		SAF_epsilon_0,
		SAF_epsilon_1);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return side_of_bounded_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* inline */
Comparison_result
cmp_dist_to_pointC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = cmp_dist_to_pointC2(
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval(),
		rx.interval(),
		ry.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_dist_to_pointC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

inline
Comparison_result
cmp_dist_to_pointC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound ||
	fabs(rx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_dist_to_pointC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return cmp_dist_to_pointC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		Restricted_double(rx.value()),
		Restricted_double(ry.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_dist_to_pointC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* inline */
Comparison_result
cmp_signed_dist_to_lineC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &la,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &lb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &lc,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = cmp_signed_dist_to_lineC2(
		la.interval(),
		lb.interval(),
		lc.interval(),
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_signed_dist_to_lineC2(
		la.exact(),
		lb.exact(),
		lc.exact(),
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact());
  }
}

inline
Comparison_result
cmp_signed_dist_to_lineC2(
    const Static_adaptatif_filter &la,
    const Static_adaptatif_filter &lb,
    const Static_adaptatif_filter &lc,
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(la.value()) > SAF_bound ||
	fabs(lb.value()) > SAF_bound ||
	fabs(lc.value()) > SAF_bound ||
	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(la.value()));
      SAF_bound = std::max(SAF_bound, fabs(lb.value()));
      SAF_bound = std::max(SAF_bound, fabs(lc.value()));
      SAF_bound = std::max(SAF_bound, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_signed_dist_to_lineC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return cmp_signed_dist_to_lineC2_SAF(
		Restricted_double(la.value()),
		Restricted_double(lb.value()),
		Restricted_double(lc.value()),
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_signed_dist_to_lineC2(
		la.exact(),
		lb.exact(),
		lc.exact(),
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact());
  }
}

#ifndef CGAL_CFG_NO_EXPLICIT_TEMPLATE_FUNCTION_ARGUMENT_SPECIFICATION
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#endif
/* inline */
Comparison_result
cmp_signed_dist_to_lineC2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, CGAL_IA_CACHE> &sy)
{
  CGAL_assertion(Interval_nt_advanced::want_exceptions);
  FPU_CW_t backup = FPU_get_and_set_cw(FPU_cw_up);
  try
  {
    Comparison_result result = cmp_signed_dist_to_lineC2(
		px.interval(),
		py.interval(),
		qx.interval(),
		qy.interval(),
		rx.interval(),
		ry.interval(),
		sx.interval(),
		sy.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_signed_dist_to_lineC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		sx.exact(),
		sy.exact());
  }
}

inline
Comparison_result
cmp_signed_dist_to_lineC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &sx,
    const Static_adaptatif_filter &sy)
{
  bool re_adjusted = false;
  static double SAF_bound = -1.0;
  static double SAF_epsilon_0;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (	fabs(px.value()) > SAF_bound ||
	fabs(py.value()) > SAF_bound ||
	fabs(qx.value()) > SAF_bound ||
	fabs(qy.value()) > SAF_bound ||
	fabs(rx.value()) > SAF_bound ||
	fabs(ry.value()) > SAF_bound ||
	fabs(sx.value()) > SAF_bound ||
	fabs(sy.value()) > SAF_bound)
  {
re_adjust:
      // Re-adjust SAF_bound.
      SAF_bound = std::max(0.0, fabs(px.value()));
      SAF_bound = std::max(SAF_bound, fabs(py.value()));
      SAF_bound = std::max(SAF_bound, fabs(qx.value()));
      SAF_bound = std::max(SAF_bound, fabs(qy.value()));
      SAF_bound = std::max(SAF_bound, fabs(rx.value()));
      SAF_bound = std::max(SAF_bound, fabs(ry.value()));
      SAF_bound = std::max(SAF_bound, fabs(sx.value()));
      SAF_bound = std::max(SAF_bound, fabs(sy.value()));

      // recompute the epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_signed_dist_to_lineC2_SAF(
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		Static_filter_error(SAF_bound),
		SAF_epsilon_0);

      // TODO: We should verify that all epsilons have really been updated.
  }

  try  // Try the epsilon variant of the predicate.
  {
    return cmp_signed_dist_to_lineC2_SAF(
		Restricted_double(px.value()),
		Restricted_double(py.value()),
		Restricted_double(qx.value()),
		Restricted_double(qy.value()),
		Restricted_double(rx.value()),
		Restricted_double(ry.value()),
		Restricted_double(sx.value()),
		Restricted_double(sy.value()),
		SAF_epsilon_0);
  }
  catch (Restricted_double::unsafe_comparison)
  {
    // It failed, we re-adjust once.
    if (!re_adjusted) {
      re_adjusted = true;
      goto re_adjust;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_signed_dist_to_lineC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		sx.exact(),
		sy.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H
