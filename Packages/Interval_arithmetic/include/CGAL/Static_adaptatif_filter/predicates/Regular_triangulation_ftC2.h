// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Static_adaptatif_filter/predicates/Regular_triangulation_ftC2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_FTC2_H
#define CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_FTC2_H

CGAL_BEGIN_NAMESPACE

double Filter_epsilon_power_testC2_12_0;

inline
Oriented_side
power_testC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &pwt,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &qwt,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    const Static_filter_error &rwt,
    const Static_filter_error &tx,
    const Static_filter_error &ty,
    const Static_filter_error &twt,
    double & epsilon_0)
{
    

    
    Static_filter_error dpx = px - tx;
    Static_filter_error dpy = py - ty;
    Static_filter_error dpz = square(dpx) + square(dpy) - pwt + twt;
    Static_filter_error dqx = qx - tx;
    Static_filter_error dqy = qy - ty;
    Static_filter_error dqz = square(dqx) + square(dqy) - qwt + twt;
    Static_filter_error drx = rx - tx;
    Static_filter_error dry = ry - ty;
    Static_filter_error drz = square(drx) + square(dry) - rwt + twt;

    return Oriented_side(sign_of_determinant3x3_SAF(dpx, dpy, dpz,
                                                dqx, dqy, dqz,
                                                drx, dry, drz, epsilon_0));
}


inline
Oriented_side
power_testC2_SAF(
    const double &px,
    const double &py,
    const double &pwt,
    const double &qx,
    const double &qy,
    const double &qwt,
    const double &rx,
    const double &ry,
    const double &rwt,
    const double &tx,
    const double &ty,
    const double &twt,
    const double & epsilon_0)
{
    

    
    double dpx = px - tx;
    double dpy = py - ty;
    double dpz = square(dpx) + square(dpy) - pwt + twt;
    double dqx = qx - tx;
    double dqy = qy - ty;
    double dqz = square(dqx) + square(dqy) - qwt + twt;
    double drx = rx - tx;
    double dry = ry - ty;
    double drz = square(drx) + square(dry) - rwt + twt;

    return Oriented_side(sign_of_determinant3x3_SAF(dpx, dpy, dpz,
                                                dqx, dqy, dqz,
                                                drx, dry, drz, epsilon_0));
}


inline
Oriented_side
power_testC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &pwt,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &qwt,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &rwt,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty,
    const Static_adaptatif_filter &twt)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(pwt) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(qwt) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound ||
        fabs(rwt) > _bound ||
        fabs(tx) > _bound ||
        fabs(ty) > _bound ||
        fabs(twt) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return power_testC2_SAF(
		px.value(),
		py.value(),
		pwt.value(),
		qx.value(),
		qy.value(),
		qwt.value(),
		rx.value(),
		ry.value(),
		rwt.value(),
		tx.value(),
		ty.value(),
		twt.value(),
		Filter_epsilon_power_testC2_12_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(pwt));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(qwt));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));
      _bound = max(_bound, fabs(rwt));
      _bound = max(_bound, fabs(tx));
      _bound = max(_bound, fabs(ty));
      _bound = max(_bound, fabs(twt));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) power_testC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_power_testC2_12_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		rx.exact(),
		ry.exact(),
		rwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

double Filter_epsilon_power_testC2_9_0;
double Filter_epsilon_power_testC2_9_1;
double Filter_epsilon_power_testC2_9_2;
double Filter_epsilon_power_testC2_9_3;

inline
Oriented_side
power_testC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &pwt,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &qwt,
    const Static_filter_error &tx,
    const Static_filter_error &ty,
    const Static_filter_error &twt,
    double & epsilon_0,
    double & epsilon_1,
    double & epsilon_2,
    double & epsilon_3)
{
    
    Static_filter_error dpx = px - tx;
    Static_filter_error dpy = py - ty;
    Static_filter_error dpz = square(dpx) + square(dpy) - pwt + twt;
    Static_filter_error dqx = qx - tx;
    Static_filter_error dqy = qy - ty;
    Static_filter_error dqz = square(dqx) + square(dqy) - qwt + twt;

    
    Comparison_result cmpx = CGAL::compare_SAF(px, qx, epsilon_0);
    if (cmpx != EQUAL)
	return Oriented_side(cmpx * sign_of_determinant2x2_SAF(dpx, dpz, dqx, dqz, epsilon_1));

    
    Comparison_result cmpy = CGAL::compare_SAF(py, qy, epsilon_2);
    return Oriented_side(cmpy * sign_of_determinant2x2_SAF(dpy, dpz, dqy, dqz, epsilon_3));
}


inline
Oriented_side
power_testC2_SAF(
    const double &px,
    const double &py,
    const double &pwt,
    const double &qx,
    const double &qy,
    const double &qwt,
    const double &tx,
    const double &ty,
    const double &twt,
    const double & epsilon_0,
    const double & epsilon_1,
    const double & epsilon_2,
    const double & epsilon_3)
{
    
    double dpx = px - tx;
    double dpy = py - ty;
    double dpz = square(dpx) + square(dpy) - pwt + twt;
    double dqx = qx - tx;
    double dqy = qy - ty;
    double dqz = square(dqx) + square(dqy) - qwt + twt;

    
    Comparison_result cmpx = CGAL::compare_SAF(px, qx, epsilon_0);
    if (cmpx != EQUAL)
	return Oriented_side(cmpx * sign_of_determinant2x2_SAF(dpx, dpz, dqx, dqz, epsilon_1));

    
    Comparison_result cmpy = CGAL::compare_SAF(py, qy, epsilon_2);
    return Oriented_side(cmpy * sign_of_determinant2x2_SAF(dpy, dpz, dqy, dqz, epsilon_3));
}


inline
Oriented_side
power_testC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &pwt,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &qwt,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty,
    const Static_adaptatif_filter &twt)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(pwt) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(qwt) > _bound ||
        fabs(tx) > _bound ||
        fabs(ty) > _bound ||
        fabs(twt) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return power_testC2_SAF(
		px.value(),
		py.value(),
		pwt.value(),
		qx.value(),
		qy.value(),
		qwt.value(),
		tx.value(),
		ty.value(),
		twt.value(),
		Filter_epsilon_power_testC2_9_0,
		Filter_epsilon_power_testC2_9_1,
		Filter_epsilon_power_testC2_9_2,
		Filter_epsilon_power_testC2_9_3);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(pwt));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(qwt));
      _bound = max(_bound, fabs(tx));
      _bound = max(_bound, fabs(ty));
      _bound = max(_bound, fabs(twt));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) power_testC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_power_testC2_9_0,
		Filter_epsilon_power_testC2_9_1,
		Filter_epsilon_power_testC2_9_2,
		Filter_epsilon_power_testC2_9_3);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testC2(
		px.exact(),
		py.exact(),
		pwt.exact(),
		qx.exact(),
		qy.exact(),
		qwt.exact(),
		tx.exact(),
		ty.exact(),
		twt.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_FTC2_H
