// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Static_adaptatif_filter/predicates/in_smallest_orthogonalcircle_ftC2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_STATIC_ADAPTATIF_FILTER_IN_SMALLEST_ORTHOGONALCIRCLE_FTC2_H
#define CGAL_STATIC_ADAPTATIF_FILTER_IN_SMALLEST_ORTHOGONALCIRCLE_FTC2_H

CGAL_BEGIN_NAMESPACE

double Filter_epsilon_in_smallest_orthogonalcircleC2_9_0;

inline
Oriented_side
in_smallest_orthogonalcircleC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &pw,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &qw,
    const Static_filter_error &tx,
    const Static_filter_error &ty,
    const Static_filter_error &tw,
    double & epsilon_0)
{
  Static_filter_error dpx = px-qx;
  Static_filter_error dpy = py-qy;
  Static_filter_error dtx = tx-qx;
  Static_filter_error dty = ty-qy;
  Static_filter_error dpz = square(dpx)+square(dpy);
 
  return Oriented_side (sign_SAF((square(dtx)+square(dty)-tw+qw)*dpz
			     -(dpz-pw+qw)*(dpx*dtx+dpy*dty), epsilon_0));
}


inline
Oriented_side
in_smallest_orthogonalcircleC2_SAF(
    const double &px,
    const double &py,
    const double &pw,
    const double &qx,
    const double &qy,
    const double &qw,
    const double &tx,
    const double &ty,
    const double &tw,
   const double & epsilon_0)
{
  double dpx = px-qx;
  double dpy = py-qy;
  double dtx = tx-qx;
  double dty = ty-qy;
  double dpz = square(dpx)+square(dpy);
 
  return Oriented_side (sign_SAF((square(dtx)+square(dty)-tw+qw)*dpz
			     -(dpz-pw+qw)*(dpx*dtx+dpy*dty), epsilon_0));
}


inline
Oriented_side
in_smallest_orthogonalcircleC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &pw,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &qw,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty,
    const Static_adaptatif_filter &tw)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(pw) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(qw) > _bound ||
        fabs(tx) > _bound ||
        fabs(ty) > _bound ||
        fabs(tw) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return in_smallest_orthogonalcircleC2_SAF(
		px.value(),
		py.value(),
		pw.value(),
		qx.value(),
		qy.value(),
		qw.value(),
		tx.value(),
		ty.value(),
		tw.value(),
		Filter_epsilon_in_smallest_orthogonalcircleC2_9_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(pw));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(qw));
      _bound = max(_bound, fabs(tx));
      _bound = max(_bound, fabs(ty));
      _bound = max(_bound, fabs(tw));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) in_smallest_orthogonalcircleC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_in_smallest_orthogonalcircleC2_9_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return in_smallest_orthogonalcircleC2(
		px.exact(),
		py.exact(),
		pw.exact(),
		qx.exact(),
		qy.exact(),
		qw.exact(),
		tx.exact(),
		ty.exact(),
		tw.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_STATIC_ADAPTATIF_FILTER_IN_SMALLEST_ORTHOGONALCIRCLE_FTC2_H
