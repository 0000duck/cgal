// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Static_adaptatif_filter/predicates/Regular_triangulation_rtH2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_RTH2_H
#define CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_RTH2_H

CGAL_BEGIN_NAMESPACE

double Filter_epsilon_power_testH2_16_0;

inline
Oriented_side
power_testH2_SAF(
    const Static_filter_error &phx,
    const Static_filter_error &phy,
    const Static_filter_error &phw,
    const Static_filter_error &pwt,
    const Static_filter_error &qhx,
    const Static_filter_error &qhy,
    const Static_filter_error &qhw,
    const Static_filter_error &qwt,
    const Static_filter_error &rhx,
    const Static_filter_error &rhy,
    const Static_filter_error &rhw,
    const Static_filter_error &rwt,
    const Static_filter_error &thx,
    const Static_filter_error &thy,
    const Static_filter_error &thw,
    const Static_filter_error &twt,
    double & epsilon_0)
{
    Static_filter_error dphx = phx*phw;
    Static_filter_error dphy = phy*phw;
    Static_filter_error dphw = square(phw);
    Static_filter_error dpz = square(phx) + square(phy) - pwt*dphw;

    Static_filter_error dqhx = qhx*qhw;
    Static_filter_error dqhy = qhy*qhw;
    Static_filter_error dqhw = square(qhw);
    Static_filter_error dqz = square(qhx) + square(qhy) - qwt*dqhw;

    Static_filter_error drhx = rhx*rhw;
    Static_filter_error drhy = rhy*rhw;
    Static_filter_error drhw = square(rhw);
    Static_filter_error drz = square(rhx) + square(rhy) - rwt*drhw;

    Static_filter_error dthx = thx*thw;
    Static_filter_error dthy = thy*thw;
    Static_filter_error dthw = square(thw);
    Static_filter_error dtz = square(thx) + square(thy) - twt*dthw;

    return Oriented_side(sign_of_determinant4x4_SAF(dphx, dphy, dpz, dphw,
	                                        dqhx, dqhy, dqz, dqhw,
	                                        drhx, drhy, drz, drhw,
	                                        dthx, dthy, dtz, dthw, epsilon_0));
}


inline
Oriented_side
power_testH2_SAF(
    const double &phx,
    const double &phy,
    const double &phw,
    const double &pwt,
    const double &qhx,
    const double &qhy,
    const double &qhw,
    const double &qwt,
    const double &rhx,
    const double &rhy,
    const double &rhw,
    const double &rwt,
    const double &thx,
    const double &thy,
    const double &thw,
    const double &twt,
    const double & epsilon_0)
{
    double dphx = phx*phw;
    double dphy = phy*phw;
    double dphw = square(phw);
    double dpz = square(phx) + square(phy) - pwt*dphw;

    double dqhx = qhx*qhw;
    double dqhy = qhy*qhw;
    double dqhw = square(qhw);
    double dqz = square(qhx) + square(qhy) - qwt*dqhw;

    double drhx = rhx*rhw;
    double drhy = rhy*rhw;
    double drhw = square(rhw);
    double drz = square(rhx) + square(rhy) - rwt*drhw;

    double dthx = thx*thw;
    double dthy = thy*thw;
    double dthw = square(thw);
    double dtz = square(thx) + square(thy) - twt*dthw;

    return Oriented_side(sign_of_determinant4x4_SAF(dphx, dphy, dpz, dphw,
	                                        dqhx, dqhy, dqz, dqhw,
	                                        drhx, drhy, drz, drhw,
	                                        dthx, dthy, dtz, dthw, epsilon_0));
}


inline
Oriented_side
power_testH2(
    const Static_adaptatif_filter &phx,
    const Static_adaptatif_filter &phy,
    const Static_adaptatif_filter &phw,
    const Static_adaptatif_filter &pwt,
    const Static_adaptatif_filter &qhx,
    const Static_adaptatif_filter &qhy,
    const Static_adaptatif_filter &qhw,
    const Static_adaptatif_filter &qwt,
    const Static_adaptatif_filter &rhx,
    const Static_adaptatif_filter &rhy,
    const Static_adaptatif_filter &rhw,
    const Static_adaptatif_filter &rwt,
    const Static_adaptatif_filter &thx,
    const Static_adaptatif_filter &thy,
    const Static_adaptatif_filter &thw,
    const Static_adaptatif_filter &twt)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(phx) > _bound ||
        fabs(phy) > _bound ||
        fabs(phw) > _bound ||
        fabs(pwt) > _bound ||
        fabs(qhx) > _bound ||
        fabs(qhy) > _bound ||
        fabs(qhw) > _bound ||
        fabs(qwt) > _bound ||
        fabs(rhx) > _bound ||
        fabs(rhy) > _bound ||
        fabs(rhw) > _bound ||
        fabs(rwt) > _bound ||
        fabs(thx) > _bound ||
        fabs(thy) > _bound ||
        fabs(thw) > _bound ||
        fabs(twt) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return power_testH2_SAF(
		phx.value(),
		phy.value(),
		phw.value(),
		pwt.value(),
		qhx.value(),
		qhy.value(),
		qhw.value(),
		qwt.value(),
		rhx.value(),
		rhy.value(),
		rhw.value(),
		rwt.value(),
		thx.value(),
		thy.value(),
		thw.value(),
		twt.value(),
		Filter_epsilon_power_testH2_16_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(phx));
      _bound = max(_bound, fabs(phy));
      _bound = max(_bound, fabs(phw));
      _bound = max(_bound, fabs(pwt));
      _bound = max(_bound, fabs(qhx));
      _bound = max(_bound, fabs(qhy));
      _bound = max(_bound, fabs(qhw));
      _bound = max(_bound, fabs(qwt));
      _bound = max(_bound, fabs(rhx));
      _bound = max(_bound, fabs(rhy));
      _bound = max(_bound, fabs(rhw));
      _bound = max(_bound, fabs(rwt));
      _bound = max(_bound, fabs(thx));
      _bound = max(_bound, fabs(thy));
      _bound = max(_bound, fabs(thw));
      _bound = max(_bound, fabs(twt));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) power_testH2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_power_testH2_16_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testH2(
		phx.exact(),
		phy.exact(),
		phw.exact(),
		pwt.exact(),
		qhx.exact(),
		qhy.exact(),
		qhw.exact(),
		qwt.exact(),
		rhx.exact(),
		rhy.exact(),
		rhw.exact(),
		rwt.exact(),
		thx.exact(),
		thy.exact(),
		thw.exact(),
		twt.exact());
  }
}

double Filter_epsilon_power_testH2_12_0;
double Filter_epsilon_power_testH2_12_1;

inline
Oriented_side
power_testH2_SAF(
    const Static_filter_error &phx,
    const Static_filter_error &phy,
    const Static_filter_error &phw,
    const Static_filter_error &pwt,
    const Static_filter_error &qhx,
    const Static_filter_error &qhy,
    const Static_filter_error &qhw,
    const Static_filter_error &qwt,
    const Static_filter_error &thx,
    const Static_filter_error &thy,
    const Static_filter_error &thw,
    const Static_filter_error &twt,
    double & epsilon_0,
    double & epsilon_1)
{
    
    
    Static_filter_error pa, qa, ta;

    if (phx * qhw != qhx * phw )
    {
	pa = phx*phw;
	qa = qhx*qhw;
	ta = thx*thw;
    }
    else
    {   
	pa = phy*phw;
	qa = qhy*qhw;
	ta = thy*thw;
    }

    Static_filter_error dphw = square(phw);
    Static_filter_error dpz = square(phx) + square(phy) - pwt*dphw;

    Static_filter_error dqhw = square(qhw);
    Static_filter_error dqz = square(qhx) + square(qhy) - qwt*dqhw;

    Static_filter_error dthw = square(thw);
    Static_filter_error dtz = square(thx) + square(thy) - twt*dthw;

    return Oriented_side(CGAL::compare_SAF(pa, qa, epsilon_0) *
	                 sign_of_determinant3x3_SAF(pa, dpz, dphw,
				                qa, dqz, dqhw,
				                ta, dtz, dthw, epsilon_1));
}


inline
Oriented_side
power_testH2_SAF(
    const double &phx,
    const double &phy,
    const double &phw,
    const double &pwt,
    const double &qhx,
    const double &qhy,
    const double &qhw,
    const double &qwt,
    const double &thx,
    const double &thy,
    const double &thw,
    const double &twt,
    const double & epsilon_0,
    const double & epsilon_1)
{
    
    
    double pa, qa, ta;

    if (phx * qhw != qhx * phw )
    {
	pa = phx*phw;
	qa = qhx*qhw;
	ta = thx*thw;
    }
    else
    {   
	pa = phy*phw;
	qa = qhy*qhw;
	ta = thy*thw;
    }

    double dphw = square(phw);
    double dpz = square(phx) + square(phy) - pwt*dphw;

    double dqhw = square(qhw);
    double dqz = square(qhx) + square(qhy) - qwt*dqhw;

    double dthw = square(thw);
    double dtz = square(thx) + square(thy) - twt*dthw;

    return Oriented_side(CGAL::compare_SAF(pa, qa, epsilon_0) *
	                 sign_of_determinant3x3_SAF(pa, dpz, dphw,
				                qa, dqz, dqhw,
				                ta, dtz, dthw, epsilon_1));
}


inline
Oriented_side
power_testH2(
    const Static_adaptatif_filter &phx,
    const Static_adaptatif_filter &phy,
    const Static_adaptatif_filter &phw,
    const Static_adaptatif_filter &pwt,
    const Static_adaptatif_filter &qhx,
    const Static_adaptatif_filter &qhy,
    const Static_adaptatif_filter &qhw,
    const Static_adaptatif_filter &qwt,
    const Static_adaptatif_filter &thx,
    const Static_adaptatif_filter &thy,
    const Static_adaptatif_filter &thw,
    const Static_adaptatif_filter &twt)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(phx) > _bound ||
        fabs(phy) > _bound ||
        fabs(phw) > _bound ||
        fabs(pwt) > _bound ||
        fabs(qhx) > _bound ||
        fabs(qhy) > _bound ||
        fabs(qhw) > _bound ||
        fabs(qwt) > _bound ||
        fabs(thx) > _bound ||
        fabs(thy) > _bound ||
        fabs(thw) > _bound ||
        fabs(twt) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return power_testH2_SAF(
		phx.value(),
		phy.value(),
		phw.value(),
		pwt.value(),
		qhx.value(),
		qhy.value(),
		qhw.value(),
		qwt.value(),
		thx.value(),
		thy.value(),
		thw.value(),
		twt.value(),
		Filter_epsilon_power_testH2_12_0,
		Filter_epsilon_power_testH2_12_1);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(phx));
      _bound = max(_bound, fabs(phy));
      _bound = max(_bound, fabs(phw));
      _bound = max(_bound, fabs(pwt));
      _bound = max(_bound, fabs(qhx));
      _bound = max(_bound, fabs(qhy));
      _bound = max(_bound, fabs(qhw));
      _bound = max(_bound, fabs(qwt));
      _bound = max(_bound, fabs(thx));
      _bound = max(_bound, fabs(thy));
      _bound = max(_bound, fabs(thw));
      _bound = max(_bound, fabs(twt));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) power_testH2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_power_testH2_12_0,
		Filter_epsilon_power_testH2_12_1);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return power_testH2(
		phx.exact(),
		phy.exact(),
		phw.exact(),
		pwt.exact(),
		qhx.exact(),
		qhy.exact(),
		qhw.exact(),
		qwt.exact(),
		thx.exact(),
		thy.exact(),
		thw.exact(),
		twt.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_STATIC_ADAPTATIF_FILTER_REGULAR_TRIANGULATION_RTH2_H
