// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// file          : include/CGAL/Static_adaptatif_filter/predicates_on_ftC2.h
// package       : Interval_arithmetic
// author(s)     : Sylvain Pion <Sylvain.Pion@sophia.inria.fr>
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec@sophia.inria.fr>)
// ======================================================================

// This file is automatically generated by the script
// examples/Interval_arithmetic/filtered_predicate_converter.

#ifndef CGAL_STATIC_ADAPTATIF_FILTER_PREDICATES_ON_FTC2_H
#define CGAL_STATIC_ADAPTATIF_FILTER_PREDICATES_ON_FTC2_H

CGAL_BEGIN_NAMESPACE

double Filter_epsilon_compare_xC2_7_0;
double Filter_epsilon_compare_xC2_7_1;

inline
Comparison_result
compare_xC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &l1a,
    const Static_filter_error &l1b,
    const Static_filter_error &l1c,
    const Static_filter_error &l2a,
    const Static_filter_error &l2b,
    const Static_filter_error &l2c,
    double & epsilon_0,
    double & epsilon_1)
{
  Sign sign1 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_0);
  Sign sign2 = sign_of_determinant3x3_SAF(l1a, l1b, l1c,
                                      l2a, l2b, l2c,
                                      -Static_filter_error(1), Static_filter_error(0), px, epsilon_1);
  CGAL_kernel_assertion( sign1 != 0 );
  return Comparison_result (sign1 * sign2);
}


inline
Comparison_result
compare_xC2_SAF(
    const double &px,
    const double &l1a,
    const double &l1b,
    const double &l1c,
    const double &l2a,
    const double &l2b,
    const double &l2c,
    const double & epsilon_0,
    const double & epsilon_1)
{
  Sign sign1 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_0);
  Sign sign2 = sign_of_determinant3x3_SAF(l1a, l1b, l1c,
                                      l2a, l2b, l2c,
                                      -double(1), double(0), px, epsilon_1);
  CGAL_kernel_assertion( sign1 != 0 );
  return Comparison_result (sign1 * sign2);
}


inline
Comparison_result
compare_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(l1a) > _bound ||
        fabs(l1b) > _bound ||
        fabs(l1c) > _bound ||
        fabs(l2a) > _bound ||
        fabs(l2b) > _bound ||
        fabs(l2c) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_xC2_SAF(
		px.value(),
		l1a.value(),
		l1b.value(),
		l1c.value(),
		l2a.value(),
		l2b.value(),
		l2c.value(),
		Filter_epsilon_compare_xC2_7_0,
		Filter_epsilon_compare_xC2_7_1);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(l1a));
      _bound = max(_bound, fabs(l1b));
      _bound = max(_bound, fabs(l1c));
      _bound = max(_bound, fabs(l2a));
      _bound = max(_bound, fabs(l2b));
      _bound = max(_bound, fabs(l2c));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_xC2_7_0,
		Filter_epsilon_compare_xC2_7_1);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

double Filter_epsilon_compare_xC2_12_0;
double Filter_epsilon_compare_xC2_12_1;
double Filter_epsilon_compare_xC2_12_2;

inline
Comparison_result
compare_xC2_SAF(
    const Static_filter_error &l1a,
    const Static_filter_error &l1b,
    const Static_filter_error &l1c,
    const Static_filter_error &l2a,
    const Static_filter_error &l2b,
    const Static_filter_error &l2c,
    const Static_filter_error &h1a,
    const Static_filter_error &h1b,
    const Static_filter_error &h1c,
    const Static_filter_error &h2a,
    const Static_filter_error &h2b,
    const Static_filter_error &h2c,
    double & epsilon_0,
    double & epsilon_1,
    double & epsilon_2)
{
  Sign sign1 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_0);
  Sign sign2 = sign_of_determinant2x2_SAF(h1a, h1b, h2a, h2b, epsilon_1);
  
  
  Static_filter_error Static_filter_error0(0);
  Sign sign3 = sign_of_determinant4x4_SAF(l1a, l1b, Static_filter_error0, l1c,
                                      l2a, l2b, Static_filter_error0, l2c,
                                      h1a, Static_filter_error0, h1b, h1c,
                                      h2a, Static_filter_error0, h2b, h2c, epsilon_2);
  CGAL_kernel_assertion( (sign1 != 0) && (sign2 != 0) );
  return Comparison_result (- sign1 * sign2 * sign3);
}


inline
Comparison_result
compare_xC2_SAF(
    const double &l1a,
    const double &l1b,
    const double &l1c,
    const double &l2a,
    const double &l2b,
    const double &l2c,
    const double &h1a,
    const double &h1b,
    const double &h1c,
    const double &h2a,
    const double &h2b,
    const double &h2c,
    const double & epsilon_0,
    const double & epsilon_1,
    const double & epsilon_2)
{
  Sign sign1 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_0);
  Sign sign2 = sign_of_determinant2x2_SAF(h1a, h1b, h2a, h2b, epsilon_1);
  
  
  double double0(0);
  Sign sign3 = sign_of_determinant4x4_SAF(l1a, l1b, double0, l1c,
                                      l2a, l2b, double0, l2c,
                                      h1a, double0, h1b, h1c,
                                      h2a, double0, h2b, h2c, epsilon_2);
  CGAL_kernel_assertion( (sign1 != 0) && (sign2 != 0) );
  return Comparison_result (- sign1 * sign2 * sign3);
}


inline
Comparison_result
compare_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &h1a,
    const Static_adaptatif_filter &h1b,
    const Static_adaptatif_filter &h1c,
    const Static_adaptatif_filter &h2a,
    const Static_adaptatif_filter &h2b,
    const Static_adaptatif_filter &h2c)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(l1a) > _bound ||
        fabs(l1b) > _bound ||
        fabs(l1c) > _bound ||
        fabs(l2a) > _bound ||
        fabs(l2b) > _bound ||
        fabs(l2c) > _bound ||
        fabs(h1a) > _bound ||
        fabs(h1b) > _bound ||
        fabs(h1c) > _bound ||
        fabs(h2a) > _bound ||
        fabs(h2b) > _bound ||
        fabs(h2c) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_xC2_SAF(
		l1a.value(),
		l1b.value(),
		l1c.value(),
		l2a.value(),
		l2b.value(),
		l2c.value(),
		h1a.value(),
		h1b.value(),
		h1c.value(),
		h2a.value(),
		h2b.value(),
		h2c.value(),
		Filter_epsilon_compare_xC2_12_0,
		Filter_epsilon_compare_xC2_12_1,
		Filter_epsilon_compare_xC2_12_2);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(l1a));
      _bound = max(_bound, fabs(l1b));
      _bound = max(_bound, fabs(l1c));
      _bound = max(_bound, fabs(l2a));
      _bound = max(_bound, fabs(l2b));
      _bound = max(_bound, fabs(l2c));
      _bound = max(_bound, fabs(h1a));
      _bound = max(_bound, fabs(h1b));
      _bound = max(_bound, fabs(h1c));
      _bound = max(_bound, fabs(h2a));
      _bound = max(_bound, fabs(h2b));
      _bound = max(_bound, fabs(h2c));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_xC2_12_0,
		Filter_epsilon_compare_xC2_12_1,
		Filter_epsilon_compare_xC2_12_2);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

double Filter_epsilon_compare_y_at_xC2_5_0;
double Filter_epsilon_compare_y_at_xC2_5_1;

inline
Comparison_result
compare_y_at_xC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &la,
    const Static_filter_error &lb,
    const Static_filter_error &lc,
    double & epsilon_0,
    double & epsilon_1)
{
  Sign sign1 = CGAL::sign_SAF(lb, epsilon_0);
  Sign sign2 = CGAL::sign_SAF(la*px + lb*py + lc, epsilon_1);
  CGAL_kernel_assertion( sign1 != 0 );
  return Comparison_result (sign1 * sign2);
}


inline
Comparison_result
compare_y_at_xC2_SAF(
    const double &px,
    const double &py,
    const double &la,
    const double &lb,
    const double &lc,
    const double & epsilon_0,
    const double & epsilon_1)
{
  Sign sign1 = CGAL::sign_SAF(lb, epsilon_0);
  Sign sign2 = CGAL::sign_SAF(la*px + lb*py + lc, epsilon_1);
  CGAL_kernel_assertion( sign1 != 0 );
  return Comparison_result (sign1 * sign2);
}


inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &la,
    const Static_adaptatif_filter &lb,
    const Static_adaptatif_filter &lc)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(la) > _bound ||
        fabs(lb) > _bound ||
        fabs(lc) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_y_at_xC2_SAF(
		px.value(),
		py.value(),
		la.value(),
		lb.value(),
		lc.value(),
		Filter_epsilon_compare_y_at_xC2_5_0,
		Filter_epsilon_compare_y_at_xC2_5_1);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(la));
      _bound = max(_bound, fabs(lb));
      _bound = max(_bound, fabs(lc));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_y_at_xC2_5_0,
		Filter_epsilon_compare_y_at_xC2_5_1);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		px.exact(),
		py.exact(),
		la.exact(),
		lb.exact(),
		lc.exact());
  }
}

double Filter_epsilon_compare_y_at_xC2_7_0;
double Filter_epsilon_compare_y_at_xC2_7_1;
double Filter_epsilon_compare_y_at_xC2_7_2;

inline
Comparison_result
compare_y_at_xC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &l1a,
    const Static_filter_error &l1b,
    const Static_filter_error &l1c,
    const Static_filter_error &l2a,
    const Static_filter_error &l2b,
    const Static_filter_error &l2c,
    double & epsilon_0,
    double & epsilon_1,
    double & epsilon_2)
{
  Sign sign1 = CGAL::sign_SAF(l1b, epsilon_0);
  Sign sign2 = CGAL::sign_SAF(l2b, epsilon_1);
  Sign sign3 = sign_of_determinant2x2_SAF(l1a*px+l1c,l2a*px+l2c,l1b,l2b, epsilon_2);
  CGAL_kernel_assertion( (sign1 != 0) && (sign2 != 0) );
  return Comparison_result (- sign1 * sign2 * sign3);
}


inline
Comparison_result
compare_y_at_xC2_SAF(
    const double &px,
    const double &l1a,
    const double &l1b,
    const double &l1c,
    const double &l2a,
    const double &l2b,
    const double &l2c,
    const double & epsilon_0,
    const double & epsilon_1,
    const double & epsilon_2)
{
  Sign sign1 = CGAL::sign_SAF(l1b, epsilon_0);
  Sign sign2 = CGAL::sign_SAF(l2b, epsilon_1);
  Sign sign3 = sign_of_determinant2x2_SAF(l1a*px+l1c,l2a*px+l2c,l1b,l2b, epsilon_2);
  CGAL_kernel_assertion( (sign1 != 0) && (sign2 != 0) );
  return Comparison_result (- sign1 * sign2 * sign3);
}


inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(l1a) > _bound ||
        fabs(l1b) > _bound ||
        fabs(l1c) > _bound ||
        fabs(l2a) > _bound ||
        fabs(l2b) > _bound ||
        fabs(l2c) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_y_at_xC2_SAF(
		px.value(),
		l1a.value(),
		l1b.value(),
		l1c.value(),
		l2a.value(),
		l2b.value(),
		l2c.value(),
		Filter_epsilon_compare_y_at_xC2_7_0,
		Filter_epsilon_compare_y_at_xC2_7_1,
		Filter_epsilon_compare_y_at_xC2_7_2);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(l1a));
      _bound = max(_bound, fabs(l1b));
      _bound = max(_bound, fabs(l1c));
      _bound = max(_bound, fabs(l2a));
      _bound = max(_bound, fabs(l2b));
      _bound = max(_bound, fabs(l2c));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_y_at_xC2_7_0,
		Filter_epsilon_compare_y_at_xC2_7_1,
		Filter_epsilon_compare_y_at_xC2_7_2);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		px.exact(),
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact());
  }
}

double Filter_epsilon_compare_y_at_xC2_9_0;
double Filter_epsilon_compare_y_at_xC2_9_1;
double Filter_epsilon_compare_y_at_xC2_9_2;

inline
Comparison_result
compare_y_at_xC2_SAF(
    const Static_filter_error &l1a,
    const Static_filter_error &l1b,
    const Static_filter_error &l1c,
    const Static_filter_error &l2a,
    const Static_filter_error &l2b,
    const Static_filter_error &l2c,
    const Static_filter_error &ha,
    const Static_filter_error &hb,
    const Static_filter_error &hc,
    double & epsilon_0,
    double & epsilon_1,
    double & epsilon_2)
{
  Sign sign0 = sign_of_determinant2x2_SAF(l1a,l1b,l2a,l2b, epsilon_0);
  Sign sign1 = sign_of_determinant3x3_SAF(ha,hb,hc,l1a,l1b,l1c,l2a,l2b,l2c, epsilon_1);
  CGAL_kernel_assertion( (sign0 != ZERO) && (hb != Static_filter_error(0)) );
  return Comparison_result (sign0 * CGAL::sign_SAF(hb, epsilon_2) * sign1);
}


inline
Comparison_result
compare_y_at_xC2_SAF(
    const double &l1a,
    const double &l1b,
    const double &l1c,
    const double &l2a,
    const double &l2b,
    const double &l2c,
    const double &ha,
    const double &hb,
    const double &hc,
    const double & epsilon_0,
    const double & epsilon_1,
    const double & epsilon_2)
{
  Sign sign0 = sign_of_determinant2x2_SAF(l1a,l1b,l2a,l2b, epsilon_0);
  Sign sign1 = sign_of_determinant3x3_SAF(ha,hb,hc,l1a,l1b,l1c,l2a,l2b,l2c, epsilon_1);
  CGAL_kernel_assertion( (sign0 != ZERO) && (hb != double(0)) );
  return Comparison_result (sign0 * CGAL::sign_SAF(hb, epsilon_2) * sign1);
}


inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &ha,
    const Static_adaptatif_filter &hb,
    const Static_adaptatif_filter &hc)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(l1a) > _bound ||
        fabs(l1b) > _bound ||
        fabs(l1c) > _bound ||
        fabs(l2a) > _bound ||
        fabs(l2b) > _bound ||
        fabs(l2c) > _bound ||
        fabs(ha) > _bound ||
        fabs(hb) > _bound ||
        fabs(hc) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_y_at_xC2_SAF(
		l1a.value(),
		l1b.value(),
		l1c.value(),
		l2a.value(),
		l2b.value(),
		l2c.value(),
		ha.value(),
		hb.value(),
		hc.value(),
		Filter_epsilon_compare_y_at_xC2_9_0,
		Filter_epsilon_compare_y_at_xC2_9_1,
		Filter_epsilon_compare_y_at_xC2_9_2);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(l1a));
      _bound = max(_bound, fabs(l1b));
      _bound = max(_bound, fabs(l1c));
      _bound = max(_bound, fabs(l2a));
      _bound = max(_bound, fabs(l2b));
      _bound = max(_bound, fabs(l2c));
      _bound = max(_bound, fabs(ha));
      _bound = max(_bound, fabs(hb));
      _bound = max(_bound, fabs(hc));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_y_at_xC2_9_0,
		Filter_epsilon_compare_y_at_xC2_9_1,
		Filter_epsilon_compare_y_at_xC2_9_2);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		ha.exact(),
		hb.exact(),
		hc.exact());
  }
}

double Filter_epsilon_compare_y_at_xC2_12_0;
double Filter_epsilon_compare_y_at_xC2_12_1;
double Filter_epsilon_compare_y_at_xC2_12_2;
double Filter_epsilon_compare_y_at_xC2_12_3;

inline
Comparison_result
compare_y_at_xC2_SAF(
    const Static_filter_error &l1a,
    const Static_filter_error &l1b,
    const Static_filter_error &l1c,
    const Static_filter_error &l2a,
    const Static_filter_error &l2b,
    const Static_filter_error &l2c,
    const Static_filter_error &h1a,
    const Static_filter_error &h1b,
    const Static_filter_error &h1c,
    const Static_filter_error &h2a,
    const Static_filter_error &h2b,
    const Static_filter_error &h2c,
    double & epsilon_0,
    double & epsilon_1,
    double & epsilon_2,
    double & epsilon_3)
{
  Static_filter_error Static_filter_error0(0);
  Sign s1 = lexicographical_sign_SAF(h1b, -h1a, epsilon_0);
  Sign s2 = lexicographical_sign_SAF(h2b, -h2a, epsilon_1);
  Sign s3 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_2);
  Sign s4 = sign_of_determinant4x4_SAF(h2a, h2b, Static_filter_error0, h2c,
                                   l1a, Static_filter_error0, l1b, l1c,
                                   l2a, Static_filter_error0, l2b, l2c,
                                   h1a, h1b, Static_filter_error0, h1c, epsilon_3);
  return Comparison_result (s1 * s2 * s3 * s4);
}


inline
Comparison_result
compare_y_at_xC2_SAF(
    const double &l1a,
    const double &l1b,
    const double &l1c,
    const double &l2a,
    const double &l2b,
    const double &l2c,
    const double &h1a,
    const double &h1b,
    const double &h1c,
    const double &h2a,
    const double &h2b,
    const double &h2c,
    const double & epsilon_0,
    const double & epsilon_1,
    const double & epsilon_2,
    const double & epsilon_3)
{
  double double0(0);
  Sign s1 = lexicographical_sign_SAF(h1b, -h1a, epsilon_0);
  Sign s2 = lexicographical_sign_SAF(h2b, -h2a, epsilon_1);
  Sign s3 = sign_of_determinant2x2_SAF(l1a, l1b, l2a, l2b, epsilon_2);
  Sign s4 = sign_of_determinant4x4_SAF(h2a, h2b, double0, h2c,
                                   l1a, double0, l1b, l1c,
                                   l2a, double0, l2b, l2c,
                                   h1a, h1b, double0, h1c, epsilon_3);
  return Comparison_result (s1 * s2 * s3 * s4);
}


inline
Comparison_result
compare_y_at_xC2(
    const Static_adaptatif_filter &l1a,
    const Static_adaptatif_filter &l1b,
    const Static_adaptatif_filter &l1c,
    const Static_adaptatif_filter &l2a,
    const Static_adaptatif_filter &l2b,
    const Static_adaptatif_filter &l2c,
    const Static_adaptatif_filter &h1a,
    const Static_adaptatif_filter &h1b,
    const Static_adaptatif_filter &h1c,
    const Static_adaptatif_filter &h2a,
    const Static_adaptatif_filter &h2b,
    const Static_adaptatif_filter &h2c)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(l1a) > _bound ||
        fabs(l1b) > _bound ||
        fabs(l1c) > _bound ||
        fabs(l2a) > _bound ||
        fabs(l2b) > _bound ||
        fabs(l2c) > _bound ||
        fabs(h1a) > _bound ||
        fabs(h1b) > _bound ||
        fabs(h1c) > _bound ||
        fabs(h2a) > _bound ||
        fabs(h2b) > _bound ||
        fabs(h2c) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_y_at_xC2_SAF(
		l1a.value(),
		l1b.value(),
		l1c.value(),
		l2a.value(),
		l2b.value(),
		l2c.value(),
		h1a.value(),
		h1b.value(),
		h1c.value(),
		h2a.value(),
		h2b.value(),
		h2c.value(),
		Filter_epsilon_compare_y_at_xC2_12_0,
		Filter_epsilon_compare_y_at_xC2_12_1,
		Filter_epsilon_compare_y_at_xC2_12_2,
		Filter_epsilon_compare_y_at_xC2_12_3);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(l1a));
      _bound = max(_bound, fabs(l1b));
      _bound = max(_bound, fabs(l1c));
      _bound = max(_bound, fabs(l2a));
      _bound = max(_bound, fabs(l2b));
      _bound = max(_bound, fabs(l2c));
      _bound = max(_bound, fabs(h1a));
      _bound = max(_bound, fabs(h1b));
      _bound = max(_bound, fabs(h1c));
      _bound = max(_bound, fabs(h2a));
      _bound = max(_bound, fabs(h2b));
      _bound = max(_bound, fabs(h2c));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_y_at_xC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_y_at_xC2_12_0,
		Filter_epsilon_compare_y_at_xC2_12_1,
		Filter_epsilon_compare_y_at_xC2_12_2,
		Filter_epsilon_compare_y_at_xC2_12_3);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_y_at_xC2(
		l1a.exact(),
		l1b.exact(),
		l1c.exact(),
		l2a.exact(),
		l2b.exact(),
		l2c.exact(),
		h1a.exact(),
		h1b.exact(),
		h1c.exact(),
		h2a.exact(),
		h2b.exact(),
		h2c.exact());
  }
}

double Filter_epsilon_compare_deltax_deltayC2_4_0;

inline
Comparison_result
compare_deltax_deltayC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &qx,
    const Static_filter_error &ry,
    const Static_filter_error &sy,
    double & epsilon_0)
{
    return CGAL::compare_SAF(abs(px-qx), abs(ry-sy), epsilon_0);
}


inline
Comparison_result
compare_deltax_deltayC2_SAF(
    const double &px,
    const double &qx,
    const double &ry,
    const double &sy,
    const double & epsilon_0)
{
    return CGAL::compare_SAF(abs(px-qx), abs(ry-sy), epsilon_0);
}


inline
Comparison_result
compare_deltax_deltayC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &sy)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(qx) > _bound ||
        fabs(ry) > _bound ||
        fabs(sy) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return compare_deltax_deltayC2_SAF(
		px.value(),
		qx.value(),
		ry.value(),
		sy.value(),
		Filter_epsilon_compare_deltax_deltayC2_4_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(ry));
      _bound = max(_bound, fabs(sy));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) compare_deltax_deltayC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_compare_deltax_deltayC2_4_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return compare_deltax_deltayC2(
		px.exact(),
		qx.exact(),
		ry.exact(),
		sy.exact());
  }
}

double Filter_epsilon_orientationC2_6_0;

inline
Orientation
orientationC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    double & epsilon_0)
{
  return sign_of_determinant2x2_SAF(px-rx,py-ry,qx-rx,qy-ry, epsilon_0);
}


inline
Orientation
orientationC2_SAF(
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double &rx,
    const double &ry,
    const double & epsilon_0)
{
  return sign_of_determinant2x2_SAF(px-rx,py-ry,qx-rx,qy-ry, epsilon_0);
}


inline
Orientation
orientationC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return orientationC2_SAF(
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		rx.value(),
		ry.value(),
		Filter_epsilon_orientationC2_6_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) orientationC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_orientationC2_6_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return orientationC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

double Filter_epsilon_side_of_oriented_circleC2_8_0;

inline
Oriented_side
side_of_oriented_circleC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    const Static_filter_error &tx,
    const Static_filter_error &ty,
    double & epsilon_0)
{
  
  
  
  
  
  
  Static_filter_error ptx = px-tx;
  Static_filter_error pty = py-ty;
  Static_filter_error qtx = qx-tx;
  Static_filter_error qty = qy-ty;
  Static_filter_error rtx = rx-tx;
  Static_filter_error rty = ry-ty;
  return Oriented_side(
           sign_of_determinant3x3_SAF(ptx, pty, square(ptx) + square(pty),
                                  qtx, qty, square(qtx) + square(qty),
                                  rtx, rty, square(rtx) + square(rty), epsilon_0));
}


inline
Oriented_side
side_of_oriented_circleC2_SAF(
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double &rx,
    const double &ry,
    const double &tx,
    const double &ty,
    const double & epsilon_0)
{
  
  
  
  
  
  
  double ptx = px-tx;
  double pty = py-ty;
  double qtx = qx-tx;
  double qty = qy-ty;
  double rtx = rx-tx;
  double rty = ry-ty;
  return Oriented_side(
           sign_of_determinant3x3_SAF(ptx, pty, square(ptx) + square(pty),
                                  qtx, qty, square(qtx) + square(qty),
                                  rtx, rty, square(rtx) + square(rty), epsilon_0));
}


inline
Oriented_side
side_of_oriented_circleC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound ||
        fabs(tx) > _bound ||
        fabs(ty) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return side_of_oriented_circleC2_SAF(
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		rx.value(),
		ry.value(),
		tx.value(),
		ty.value(),
		Filter_epsilon_side_of_oriented_circleC2_8_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));
      _bound = max(_bound, fabs(tx));
      _bound = max(_bound, fabs(ty));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) side_of_oriented_circleC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_side_of_oriented_circleC2_8_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return side_of_oriented_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

double Filter_epsilon_side_of_bounded_circleC2_8_0;
double Filter_epsilon_side_of_bounded_circleC2_8_1;

inline
Bounded_side
side_of_bounded_circleC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    const Static_filter_error &tx,
    const Static_filter_error &ty,
    double & epsilon_0,
    double & epsilon_1)
{
  Oriented_side s = side_of_oriented_circleC2_SAF(px,py,qx,qy,rx,ry,tx,ty, epsilon_0);
  Orientation o = orientationC2_SAF(px,py,qx,qy,rx,ry, epsilon_1);

  return Bounded_side (s * o);
}


inline
Bounded_side
side_of_bounded_circleC2_SAF(
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double &rx,
    const double &ry,
    const double &tx,
    const double &ty,
    const double & epsilon_0,
    const double & epsilon_1)
{
  Oriented_side s = side_of_oriented_circleC2_SAF(px,py,qx,qy,rx,ry,tx,ty, epsilon_0);
  Orientation o = orientationC2_SAF(px,py,qx,qy,rx,ry, epsilon_1);

  return Bounded_side (s * o);
}


inline
Bounded_side
side_of_bounded_circleC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &tx,
    const Static_adaptatif_filter &ty)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound ||
        fabs(tx) > _bound ||
        fabs(ty) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return side_of_bounded_circleC2_SAF(
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		rx.value(),
		ry.value(),
		tx.value(),
		ty.value(),
		Filter_epsilon_side_of_bounded_circleC2_8_0,
		Filter_epsilon_side_of_bounded_circleC2_8_1);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));
      _bound = max(_bound, fabs(tx));
      _bound = max(_bound, fabs(ty));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) side_of_bounded_circleC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_side_of_bounded_circleC2_8_0,
		Filter_epsilon_side_of_bounded_circleC2_8_1);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return side_of_bounded_circleC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		tx.exact(),
		ty.exact());
  }
}

double Filter_epsilon_cmp_dist_to_pointC2_6_0;

inline
Comparison_result
cmp_dist_to_pointC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    double & epsilon_0)
{
  return CGAL::compare_SAF(squared_distanceC2(px,py,qx,qy),
                       squared_distanceC2(px,py,rx,ry), epsilon_0);
}


inline
Comparison_result
cmp_dist_to_pointC2_SAF(
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double &rx,
    const double &ry,
    const double & epsilon_0)
{
  return CGAL::compare_SAF(squared_distanceC2(px,py,qx,qy),
                       squared_distanceC2(px,py,rx,ry), epsilon_0);
}


inline
Comparison_result
cmp_dist_to_pointC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return cmp_dist_to_pointC2_SAF(
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		rx.value(),
		ry.value(),
		Filter_epsilon_cmp_dist_to_pointC2_6_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_dist_to_pointC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_cmp_dist_to_pointC2_6_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_dist_to_pointC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact());
  }
}

double Filter_epsilon_cmp_signed_dist_to_lineC2_7_0;

inline
Comparison_result
cmp_signed_dist_to_lineC2_SAF(
    const Static_filter_error &la,
    const Static_filter_error &lb,
    const Static_filter_error &lc,
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    double & epsilon_0)
{
  return CGAL::compare_SAF(scaled_distance_to_directionC2(la,lb,px,py),
                       scaled_distance_to_directionC2(la,lb,qx,qy), epsilon_0);
}


inline
Comparison_result
cmp_signed_dist_to_lineC2_SAF(
    const double &la,
    const double &lb,
    const double &lc,
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double & epsilon_0)
{
  return CGAL::compare_SAF(scaled_distance_to_directionC2(la,lb,px,py),
                       scaled_distance_to_directionC2(la,lb,qx,qy), epsilon_0);
}


inline
Comparison_result
cmp_signed_dist_to_lineC2(
    const Static_adaptatif_filter &la,
    const Static_adaptatif_filter &lb,
    const Static_adaptatif_filter &lc,
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(la) > _bound ||
        fabs(lb) > _bound ||
        fabs(lc) > _bound ||
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return cmp_signed_dist_to_lineC2_SAF(
		la.value(),
		lb.value(),
		lc.value(),
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		Filter_epsilon_cmp_signed_dist_to_lineC2_7_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(la));
      _bound = max(_bound, fabs(lb));
      _bound = max(_bound, fabs(lc));
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_signed_dist_to_lineC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_cmp_signed_dist_to_lineC2_7_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_signed_dist_to_lineC2(
		la.exact(),
		lb.exact(),
		lc.exact(),
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact());
  }
}

double Filter_epsilon_cmp_signed_dist_to_lineC2_8_0;

inline
Comparison_result
cmp_signed_dist_to_lineC2_SAF(
    const Static_filter_error &px,
    const Static_filter_error &py,
    const Static_filter_error &qx,
    const Static_filter_error &qy,
    const Static_filter_error &rx,
    const Static_filter_error &ry,
    const Static_filter_error &sx,
    const Static_filter_error &sy,
    double & epsilon_0)
{
  return CGAL::compare_SAF(scaled_distance_to_lineC2(px,py,qx,qy,rx,ry),
                       scaled_distance_to_lineC2(px,py,qx,qy,sx,sy), epsilon_0);
}


inline
Comparison_result
cmp_signed_dist_to_lineC2_SAF(
    const double &px,
    const double &py,
    const double &qx,
    const double &qy,
    const double &rx,
    const double &ry,
    const double &sx,
    const double &sy,
    const double & epsilon_0)
{
  return CGAL::compare_SAF(scaled_distance_to_lineC2(px,py,qx,qy,rx,ry),
                       scaled_distance_to_lineC2(px,py,qx,qy,sx,sy), epsilon_0);
}


inline
Comparison_result
cmp_signed_dist_to_lineC2(
    const Static_adaptatif_filter &px,
    const Static_adaptatif_filter &py,
    const Static_adaptatif_filter &qx,
    const Static_adaptatif_filter &qy,
    const Static_adaptatif_filter &rx,
    const Static_adaptatif_filter &ry,
    const Static_adaptatif_filter &sx,
    const Static_adaptatif_filter &sy)
{
  bool tried = false;
  static double _bound=0;
letstry:
  try
  {
    // Check the bounds.  All arguments must be <= _bound.
    if (
        fabs(px) > _bound ||
        fabs(py) > _bound ||
        fabs(qx) > _bound ||
        fabs(qy) > _bound ||
        fabs(rx) > _bound ||
        fabs(ry) > _bound ||
        fabs(sx) > _bound ||
        fabs(sy) > _bound)
      throw (Static_adaptatif_filter::unsafe_comparison);
    // Try the epsilon variant of the predicate.
    return cmp_signed_dist_to_lineC2_SAF(
		px.value(),
		py.value(),
		qx.value(),
		qy.value(),
		rx.value(),
		ry.value(),
		sx.value(),
		sy.value(),
		Filter_epsilon_cmp_signed_dist_to_lineC2_8_0);
  }
  catch (Static_adaptatif_filter::unsafe_comparison)
  {
    // It failed once, we re-adjust (bound, epsilons).
    if (!tried)
    {
      tried = true;
      // Recompute _bound (tighter or larger).
      _bound = 0;
      _bound = max(_bound, fabs(px));
      _bound = max(_bound, fabs(py));
      _bound = max(_bound, fabs(qx));
      _bound = max(_bound, fabs(qy));
      _bound = max(_bound, fabs(rx));
      _bound = max(_bound, fabs(ry));
      _bound = max(_bound, fabs(sx));
      _bound = max(_bound, fabs(sy));

      // recompute epsilons: "just" call it over Static_filter_error.
      // That's the tricky part that might not work for everything.
      (void) cmp_signed_dist_to_lineC2_SAF(
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Static_filter_error(_bound,0,1),
		Filter_epsilon_cmp_signed_dist_to_lineC2_8_0);

      // We should verify that all epsilons have really been updated.

      // Try again with the updated (_bound, epsilon)
      goto letstry;
    }
    // This scheme definitely fails => exact computation (filtered_exact<> ?).
    return cmp_signed_dist_to_lineC2(
		px.exact(),
		py.exact(),
		qx.exact(),
		qy.exact(),
		rx.exact(),
		ry.exact(),
		sx.exact(),
		sy.exact());
  }
}

CGAL_END_NAMESPACE

#endif // CGAL_STATIC_ADAPTATIF_FILTER_PREDICATES_ON_FTC2_H
