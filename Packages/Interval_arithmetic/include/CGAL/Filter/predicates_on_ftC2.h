// ======================================================================
//
// Copyright (c) 1998 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
//
// release       :
// release_date  :
//
// file          : include/CGAL/Filter/predicates_on_ftC2.h
// package       : Interval_arithmetic
// source        : include/CGAL/predicates_on_ftC2.h
// revision      : $Revision$
// revision_date :
// author(s)     : Sylvain.Pion@sophia.inria.fr
//
// coordinator   : INRIA Sophia-Antipolis (Herve.Bronnimann@sophia.inria.fr)
//
// ======================================================================


#ifndef CGAL_FILTER_PREDICATES_ON_FTC2_H
#define CGAL_FILTER_PREDICATES_ON_FTC2_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

#ifndef CGAL_DETERMINANT_H
#include <CGAL/determinant.h>
#endif // CGAL_DETERMINANT_H

#ifndef CGAL_BASIC_CONSTRUCTIONS_FTC2_H
#include <CGAL/basic_constructions_ftC2.h>
#endif

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                 const CGAL_Filtering<CT,ET> &l1a,
	const CGAL_Filtering<CT,ET> &l1b,
	const CGAL_Filtering<CT,ET> &l1c,
	                 const CGAL_Filtering<CT,ET> &l2a,
	const CGAL_Filtering<CT,ET> &l2b,
	const CGAL_Filtering<CT,ET> &l2c)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(l1a.value),
		CGAL_to_Interval_nt_advanced(l1b.value),
		CGAL_to_Interval_nt_advanced(l1c.value),
		CGAL_to_Interval_nt_advanced(l2a.value),
		CGAL_to_Interval_nt_advanced(l2b.value),
		CGAL_to_Interval_nt_advanced(l2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(l1a.value),
		CGAL_to_exact_type<ET>(l1b.value),
		CGAL_to_exact_type<ET>(l1c.value),
		CGAL_to_exact_type<ET>(l2a.value),
		CGAL_to_exact_type<ET>(l2b.value),
		CGAL_to_exact_type<ET>(l2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtering<CT,ET> &l1a,
	const CGAL_Filtering<CT,ET> &l1b,
	const CGAL_Filtering<CT,ET> &l1c,
	                 const CGAL_Filtering<CT,ET> &l2a,
	const CGAL_Filtering<CT,ET> &l2b,
	const CGAL_Filtering<CT,ET> &l2c,
	                 const CGAL_Filtering<CT,ET> &h1a,
	const CGAL_Filtering<CT,ET> &h1b,
	const CGAL_Filtering<CT,ET> &h1c,
	                 const CGAL_Filtering<CT,ET> &h2a,
	const CGAL_Filtering<CT,ET> &h2b,
	const CGAL_Filtering<CT,ET> &h2c)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		CGAL_to_Interval_nt_advanced(l1a.value),
		CGAL_to_Interval_nt_advanced(l1b.value),
		CGAL_to_Interval_nt_advanced(l1c.value),
		CGAL_to_Interval_nt_advanced(l2a.value),
		CGAL_to_Interval_nt_advanced(l2b.value),
		CGAL_to_Interval_nt_advanced(l2c.value),
		CGAL_to_Interval_nt_advanced(h1a.value),
		CGAL_to_Interval_nt_advanced(h1b.value),
		CGAL_to_Interval_nt_advanced(h1c.value),
		CGAL_to_Interval_nt_advanced(h2a.value),
		CGAL_to_Interval_nt_advanced(h2b.value),
		CGAL_to_Interval_nt_advanced(h2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		CGAL_to_exact_type<ET>(l1a.value),
		CGAL_to_exact_type<ET>(l1b.value),
		CGAL_to_exact_type<ET>(l1c.value),
		CGAL_to_exact_type<ET>(l2a.value),
		CGAL_to_exact_type<ET>(l2b.value),
		CGAL_to_exact_type<ET>(l2c.value),
		CGAL_to_exact_type<ET>(h1a.value),
		CGAL_to_exact_type<ET>(h1b.value),
		CGAL_to_exact_type<ET>(h1c.value),
		CGAL_to_exact_type<ET>(h2a.value),
		CGAL_to_exact_type<ET>(h2b.value),
		CGAL_to_exact_type<ET>(h2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                      const CGAL_Filtering<CT,ET> &la,
	const CGAL_Filtering<CT,ET> &lb,
	const CGAL_Filtering<CT,ET> &lc)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(la.value),
		CGAL_to_Interval_nt_advanced(lb.value),
		CGAL_to_Interval_nt_advanced(lc.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(la.value),
		CGAL_to_exact_type<ET>(lb.value),
		CGAL_to_exact_type<ET>(lc.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtering<CT,ET> &px,
	                      const CGAL_Filtering<CT,ET> &l1a,
	const CGAL_Filtering<CT,ET> &l1b,
	const CGAL_Filtering<CT,ET> &l1c,
	                      const CGAL_Filtering<CT,ET> &l2a,
	const CGAL_Filtering<CT,ET> &l2b,
	const CGAL_Filtering<CT,ET> &l2c)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(l1a.value),
		CGAL_to_Interval_nt_advanced(l1b.value),
		CGAL_to_Interval_nt_advanced(l1c.value),
		CGAL_to_Interval_nt_advanced(l2a.value),
		CGAL_to_Interval_nt_advanced(l2b.value),
		CGAL_to_Interval_nt_advanced(l2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(l1a.value),
		CGAL_to_exact_type<ET>(l1b.value),
		CGAL_to_exact_type<ET>(l1c.value),
		CGAL_to_exact_type<ET>(l2a.value),
		CGAL_to_exact_type<ET>(l2b.value),
		CGAL_to_exact_type<ET>(l2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtering<CT,ET> &l1a,
	const CGAL_Filtering<CT,ET> &l1b,
	const CGAL_Filtering<CT,ET> &l1c,
	                      const CGAL_Filtering<CT,ET> &l2a,
	const CGAL_Filtering<CT,ET> &l2b,
	const CGAL_Filtering<CT,ET> &l2c,
	                      const CGAL_Filtering<CT,ET> &ha,
	const CGAL_Filtering<CT,ET> &hb,
	const CGAL_Filtering<CT,ET> &hc)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_to_Interval_nt_advanced(l1a.value),
		CGAL_to_Interval_nt_advanced(l1b.value),
		CGAL_to_Interval_nt_advanced(l1c.value),
		CGAL_to_Interval_nt_advanced(l2a.value),
		CGAL_to_Interval_nt_advanced(l2b.value),
		CGAL_to_Interval_nt_advanced(l2c.value),
		CGAL_to_Interval_nt_advanced(ha.value),
		CGAL_to_Interval_nt_advanced(hb.value),
		CGAL_to_Interval_nt_advanced(hc.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_to_exact_type<ET>(l1a.value),
		CGAL_to_exact_type<ET>(l1b.value),
		CGAL_to_exact_type<ET>(l1c.value),
		CGAL_to_exact_type<ET>(l2a.value),
		CGAL_to_exact_type<ET>(l2b.value),
		CGAL_to_exact_type<ET>(l2c.value),
		CGAL_to_exact_type<ET>(ha.value),
		CGAL_to_exact_type<ET>(hb.value),
		CGAL_to_exact_type<ET>(hc.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtering<CT,ET> &l1a,
	const CGAL_Filtering<CT,ET> &l1b,
	const CGAL_Filtering<CT,ET> &l1c,
	                      const CGAL_Filtering<CT,ET> &l2a,
	const CGAL_Filtering<CT,ET> &l2b,
	const CGAL_Filtering<CT,ET> &l2c,
	                      const CGAL_Filtering<CT,ET> &h1a,
	const CGAL_Filtering<CT,ET> &h1b,
	const CGAL_Filtering<CT,ET> &h1c,
	                      const CGAL_Filtering<CT,ET> &h2a,
	const CGAL_Filtering<CT,ET> &h2b,
	const CGAL_Filtering<CT,ET> &h2c)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_to_Interval_nt_advanced(l1a.value),
		CGAL_to_Interval_nt_advanced(l1b.value),
		CGAL_to_Interval_nt_advanced(l1c.value),
		CGAL_to_Interval_nt_advanced(l2a.value),
		CGAL_to_Interval_nt_advanced(l2b.value),
		CGAL_to_Interval_nt_advanced(l2c.value),
		CGAL_to_Interval_nt_advanced(h1a.value),
		CGAL_to_Interval_nt_advanced(h1b.value),
		CGAL_to_Interval_nt_advanced(h1c.value),
		CGAL_to_Interval_nt_advanced(h2a.value),
		CGAL_to_Interval_nt_advanced(h2b.value),
		CGAL_to_Interval_nt_advanced(h2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_to_exact_type<ET>(l1a.value),
		CGAL_to_exact_type<ET>(l1b.value),
		CGAL_to_exact_type<ET>(l1c.value),
		CGAL_to_exact_type<ET>(l2a.value),
		CGAL_to_exact_type<ET>(l2b.value),
		CGAL_to_exact_type<ET>(l2c.value),
		CGAL_to_exact_type<ET>(h1a.value),
		CGAL_to_exact_type<ET>(h1b.value),
		CGAL_to_exact_type<ET>(h1c.value),
		CGAL_to_exact_type<ET>(h2a.value),
		CGAL_to_exact_type<ET>(h2b.value),
		CGAL_to_exact_type<ET>(h2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Comparison_result
inline
CGAL_compare_lexicographically_xyC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                    const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_lexicographically_xyC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_lexicographically_xyC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Orientation
CGAL_orientationC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                   const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                   const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_collinear_are_ordered_along_lineC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                        const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                        const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_ordered_along_lineC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_ordered_along_lineC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_collinear_are_strictly_ordered_along_lineC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                                 const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                                 const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_strictly_ordered_along_lineC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_strictly_ordered_along_lineC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Oriented_side
CGAL_side_of_oriented_circleC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                               const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                               const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	                               const CGAL_Filtering<CT,ET> &tx,
	const CGAL_Filtering<CT,ET> &ty)
{ // This is the default filter (specialization).

  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_circleC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(tx.value),
		CGAL_to_Interval_nt_advanced(ty.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_circleC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(tx.value),
		CGAL_to_exact_type<ET>(ty.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Bounded_side
CGAL_side_of_bounded_circleC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                              const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                              const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	                              const CGAL_Filtering<CT,ET> &tx,
	const CGAL_Filtering<CT,ET> &ty)
{ // This is the default filter (specialization).

  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_circleC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(tx.value),
		CGAL_to_Interval_nt_advanced(ty.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_circleC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(tx.value),
		CGAL_to_exact_type<ET>(ty.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_dist_to_pointC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                         const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                         const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_dist_to_pointC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_dist_to_pointC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_dist_to_pointC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_dist_to_pointC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_dist_to_pointC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_dist_to_pointC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                 const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                 const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_dist_to_pointC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_dist_to_pointC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &la,
	const CGAL_Filtering<CT,ET> &lb,
	const CGAL_Filtering<CT,ET> &lc,
	                               const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                               const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(la.value),
		CGAL_to_Interval_nt_advanced(lb.value),
		CGAL_to_Interval_nt_advanced(lc.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(la.value),
		CGAL_to_exact_type<ET>(lb.value),
		CGAL_to_exact_type<ET>(lc.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &la,
	const CGAL_Filtering<CT,ET> &lb,
	const CGAL_Filtering<CT,ET> &lc,
	                                      const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                      const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(la.value),
		CGAL_to_Interval_nt_advanced(lb.value),
		CGAL_to_Interval_nt_advanced(lc.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(la.value),
		CGAL_to_exact_type<ET>(lb.value),
		CGAL_to_exact_type<ET>(lc.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &la,
	const CGAL_Filtering<CT,ET> &lb,
	const CGAL_Filtering<CT,ET> &lc,
	                                       const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                       const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(la.value),
		CGAL_to_Interval_nt_advanced(lb.value),
		CGAL_to_Interval_nt_advanced(lc.value),
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(la.value),
		CGAL_to_exact_type<ET>(lb.value),
		CGAL_to_exact_type<ET>(lc.value),
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value));
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                               const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                               const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	                               const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy)
{ // This is the default filter (specialization).

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                      const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                      const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	                                      const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_lineC2(const CGAL_Filtering<CT,ET> &px,
	const CGAL_Filtering<CT,ET> &py,
	                                       const CGAL_Filtering<CT,ET> &qx,
	const CGAL_Filtering<CT,ET> &qy,
	                                       const CGAL_Filtering<CT,ET> &rx,
	const CGAL_Filtering<CT,ET> &ry,
	                                       const CGAL_Filtering<CT,ET> &sx,
	const CGAL_Filtering<CT,ET> &sy)
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_to_Interval_nt_advanced(px.value),
		CGAL_to_Interval_nt_advanced(py.value),
		CGAL_to_Interval_nt_advanced(qx.value),
		CGAL_to_Interval_nt_advanced(qy.value),
		CGAL_to_Interval_nt_advanced(rx.value),
		CGAL_to_Interval_nt_advanced(ry.value),
		CGAL_to_Interval_nt_advanced(sx.value),
		CGAL_to_Interval_nt_advanced(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_to_exact_type<ET>(px.value),
		CGAL_to_exact_type<ET>(py.value),
		CGAL_to_exact_type<ET>(qx.value),
		CGAL_to_exact_type<ET>(qy.value),
		CGAL_to_exact_type<ET>(rx.value),
		CGAL_to_exact_type<ET>(ry.value),
		CGAL_to_exact_type<ET>(sx.value),
		CGAL_to_exact_type<ET>(sy.value));
  }
  return result;
}

#ifdef CGAL_FILTER_H
#include <CGAL/Filter/predicates_on_ftC2.h>
#endif


#endif  // CGAL_FILTER_PREDICATES_ON_FTC2_H
