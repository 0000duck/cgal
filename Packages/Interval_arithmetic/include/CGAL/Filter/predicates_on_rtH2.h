// ======================================================================
//
// Copyright (c) 1998 The CGAL Consortium
//
// This software and related documentation is part of an INTERNAL release
// of the Computational Geometry Algorithms Library (CGAL). It is not
// intended for general use.
//
// ----------------------------------------------------------------------
// 
// release       :
// release_date  :
// 
// source        : 
// file          : include/CGAL/Filter/predicates_on_rtH2.h
// package       : Interval_arithmetic
// revision      : 1.2.3
// revision_date :
// author(s)     : Sylvain.Pion@sophia.inria.fr
//
// coordinator   : MPI, Saarbruecken
// ======================================================================


#ifndef CGAL_FILTER_PREDICATES_ON_RTH2_H
#define CGAL_FILTER_PREDICATES_ON_RTH2_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Orientation
CGAL_orientationH2( const CGAL_Filtering<CT,ET>& phx,
	const CGAL_Filtering<CT,ET>& phy,
	const CGAL_Filtering<CT,ET>& phw,
	                    const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                    const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw )
{ // This is the default filter (specialization).

  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationH2(
		CGAL_to_Interval_nt_advanced(phx.value),
		CGAL_to_Interval_nt_advanced(phy.value),
		CGAL_to_Interval_nt_advanced(phw.value),
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationH2(
		CGAL_to_exact_type<ET>(phx.value),
		CGAL_to_exact_type<ET>(phy.value),
		CGAL_to_exact_type<ET>(phw.value),
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_leftturnH2( const CGAL_Filtering<CT,ET>& phx,
	const CGAL_Filtering<CT,ET>& phy,
	const CGAL_Filtering<CT,ET>& phw,
	                 const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                 const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw )
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_leftturnH2(
		CGAL_to_Interval_nt_advanced(phx.value),
		CGAL_to_Interval_nt_advanced(phy.value),
		CGAL_to_Interval_nt_advanced(phw.value),
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_leftturnH2(
		CGAL_to_exact_type<ET>(phx.value),
		CGAL_to_exact_type<ET>(phy.value),
		CGAL_to_exact_type<ET>(phw.value),
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_rightturnH2(const CGAL_Filtering<CT,ET>& phx,
	const CGAL_Filtering<CT,ET>& phy,
	const CGAL_Filtering<CT,ET>& phw,
	                 const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                 const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw )
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_rightturnH2(
		CGAL_to_Interval_nt_advanced(phx.value),
		CGAL_to_Interval_nt_advanced(phy.value),
		CGAL_to_Interval_nt_advanced(phw.value),
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_rightturnH2(
		CGAL_to_exact_type<ET>(phx.value),
		CGAL_to_exact_type<ET>(phy.value),
		CGAL_to_exact_type<ET>(phw.value),
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
bool
CGAL_collinearH2(const CGAL_Filtering<CT,ET>& phx,
	const CGAL_Filtering<CT,ET>& phy,
	const CGAL_Filtering<CT,ET>& phw,
	                 const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                 const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw )
{ // This is the default filter (specialization).

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinearH2(
		CGAL_to_Interval_nt_advanced(phx.value),
		CGAL_to_Interval_nt_advanced(phy.value),
		CGAL_to_Interval_nt_advanced(phw.value),
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinearH2(
		CGAL_to_exact_type<ET>(phx.value),
		CGAL_to_exact_type<ET>(phy.value),
		CGAL_to_exact_type<ET>(phw.value),
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value));
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Bounded_side
CGAL_side_of_bounded_circleH2( const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                               const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw,
	                               const CGAL_Filtering<CT,ET>& shx,
	const CGAL_Filtering<CT,ET>& shy,
	const CGAL_Filtering<CT,ET>& shw,
	                               const CGAL_Filtering<CT,ET>& thx,
	const CGAL_Filtering<CT,ET>& thy,
	const CGAL_Filtering<CT,ET>& thw )
{ // This is the default filter (specialization).

  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_circleH2(
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value),
		CGAL_to_Interval_nt_advanced(shx.value),
		CGAL_to_Interval_nt_advanced(shy.value),
		CGAL_to_Interval_nt_advanced(shw.value),
		CGAL_to_Interval_nt_advanced(thx.value),
		CGAL_to_Interval_nt_advanced(thy.value),
		CGAL_to_Interval_nt_advanced(thw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_circleH2(
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value),
		CGAL_to_exact_type<ET>(shx.value),
		CGAL_to_exact_type<ET>(shy.value),
		CGAL_to_exact_type<ET>(shw.value),
		CGAL_to_exact_type<ET>(thx.value),
		CGAL_to_exact_type<ET>(thy.value),
		CGAL_to_exact_type<ET>(thw.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Oriented_side
CGAL_side_of_oriented_circleH2(const CGAL_Filtering<CT,ET>& qhx,
	const CGAL_Filtering<CT,ET>& qhy,
	const CGAL_Filtering<CT,ET>& qhw,
	                               const CGAL_Filtering<CT,ET>& rhx,
	const CGAL_Filtering<CT,ET>& rhy,
	const CGAL_Filtering<CT,ET>& rhw,
	                               const CGAL_Filtering<CT,ET>& shx,
	const CGAL_Filtering<CT,ET>& shy,
	const CGAL_Filtering<CT,ET>& shw,
	                               const CGAL_Filtering<CT,ET>& thx,
	const CGAL_Filtering<CT,ET>& thy,
	const CGAL_Filtering<CT,ET>& thw )
{ // This is the default filter (specialization).

  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_circleH2(
		CGAL_to_Interval_nt_advanced(qhx.value),
		CGAL_to_Interval_nt_advanced(qhy.value),
		CGAL_to_Interval_nt_advanced(qhw.value),
		CGAL_to_Interval_nt_advanced(rhx.value),
		CGAL_to_Interval_nt_advanced(rhy.value),
		CGAL_to_Interval_nt_advanced(rhw.value),
		CGAL_to_Interval_nt_advanced(shx.value),
		CGAL_to_Interval_nt_advanced(shy.value),
		CGAL_to_Interval_nt_advanced(shw.value),
		CGAL_to_Interval_nt_advanced(thx.value),
		CGAL_to_Interval_nt_advanced(thy.value),
		CGAL_to_Interval_nt_advanced(thw.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (CGAL_Interval_nt_advanced::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_circleH2(
		CGAL_to_exact_type<ET>(qhx.value),
		CGAL_to_exact_type<ET>(qhy.value),
		CGAL_to_exact_type<ET>(qhw.value),
		CGAL_to_exact_type<ET>(rhx.value),
		CGAL_to_exact_type<ET>(rhy.value),
		CGAL_to_exact_type<ET>(rhw.value),
		CGAL_to_exact_type<ET>(shx.value),
		CGAL_to_exact_type<ET>(shy.value),
		CGAL_to_exact_type<ET>(shw.value),
		CGAL_to_exact_type<ET>(thx.value),
		CGAL_to_exact_type<ET>(thy.value),
		CGAL_to_exact_type<ET>(thw.value));
  }
  return result;
}


#endif // CGAL_FILTER_PREDICATES_ON_RTH2_H
