#!/bin/sh

#the next variables will be overwritten by the parameters
CVSDIR="/cygdrive/d/CGALCVS"
MODULES_DIRECTORY="Modules"
RELEASE_VERSION="CGAL-3.1-I-XX"
RELEASE_NUMBER="100060003"
UPDATING="y"
INSTALLATION_DIR="/cygdrive/d/CGALCVS/Modules"

#check the parameters
while [ ${#} -gt 0 ]; do
  case ${*} in
    -h*|-help*|--help*)
      printf "usage: create_modules (-h|-help|--help)\n\t-d dir\tSets the CVSDIR directory. The default is /cygdrive/d/CGALCVS.\n\t-m mod\tSets the name of the Modules directory from the Installation package. The default name is Modules.\n\t-r ver\tSets the release version of CGAL which was used to build the modules (eg. CGAL-3.1-I-79).\n\t-n nr\tSets the release number of CGAL (eg. 1003004200).\n\t-u y|n\tSets the updating state. The default is y. If n is specified, the script will no longer update the packages involved.\n\t-i DIR\tSets the installation directory for the modules.\n"
      exit
    ;;
    -d*)
      CVSDIR="$2"
      shift
    ;;
    -m*)
      MODULES_DIRECTORY="$2"
      shift
    ;;
    -r*)
      RELEASE_VERSION="$2"
      shift
    ;;
    -n*)
      RELEASE_NUMBER="$2"
      shift    
    ;;
    -u*)
      UPDATING="$2"
      shift
    ;;
    -i*)
      INSTALLATION_DIR="$2"
      shift
  esac
  shift
done

printf "Setting CVSDIR=${CVSDIR} ...\n"
printf "Setting MODULES_DIRECTORY=${MODULES_DIRECTORY} ...\n"
printf "Setting INSTALLATION_DIR=${INSTALLATION_DIR} ...\n"
printf "Setting RELEASE_VERSION=${RELEASE_VERSION} ...\n"
printf "Setting RELEASE_NUMBER=${RELEASE_NUMBER} ...\n"

if [ ! -r ${CVSDIR} ]; then
  printf "Directory ${CVSDIR} does not exist ... EXITING\n"
  exit
fi

#if [ ! -r create_internal_module ]; then
#  printf "create_internal_module file could not be found ... EXITING\n"
#  exit
#fi


cd ${CVSDIR} || return
if [ "${UPDATING}" = "y" ]; then
  if [ -r "Installation" ]; then
    printf "Updating package Installation to get the modules list ...\n"
    cvs -q update -P Installation
  else
    printf "Checking out package Installation to get the modules list ...\n"
    cvs co -P Installation
  fi
  if [ -r "Scripts" ]; then
    printf "Updating package Scripts to get the right scripts ...\n"
    cvs -q update -P Scripts
  else
    printf "Checking out package Scripts to get the right scripts ...\n"
    cvs co -P Scripts
  fi
fi

if [ ! -r "${INSTALLATION_DIR}" ]; then
  mkdir "${INSTALLATION_DIR}"
fi

for i in `ls Installation/${MODULES_DIRECTORY}/*`
do
  if [ -f "${i}" ]; then
    MAIN_NAME="`basename ${i}`"
    printf "\n\nCreating module ${MAIN_NAME}\n"
    if [ -r "${MAIN_NAME}" ]; then
      printf "  Directory ${MAIN_NAME} exists, removing ...\n"
      rm -rf ${MAIN_NAME}
    fi
    if [ "${UPDATING}" = "y" ]; then
      for j in `cat ${i}`
      do
        if [ -r "${j}" ]; then
          printf "  Updating package ${j} ...\n" 
          cvs -q update ${j}
        else
          printf "  Check out package ${j} ...\n" 
          cvs co -P ${j}
        fi
      done
    fi
    ${CVSDIR}/Scripts/developer_scripts/create_internal_module -m ${MAIN_NAME} -r ${RELEASE_VERSION} -n ${RELEASE_NUMBER} -a ${CVSDIR} -p ${i} -s "${CVSDIR}/Scripts/scripts"
    tar -cf "${MAIN_NAME}.tar" ${MAIN_NAME}
    gzip "${MAIN_NAME}.tar"
    mv "${MAIN_NAME}.tar.gz" ${INSTALLATION_DIR}
    rm -rf ${MAIN_NAME}
  fi

done