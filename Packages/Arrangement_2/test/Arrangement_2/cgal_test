#! /bin/bash

# This is a script for the CGAL test suite. Such a script must obey
# the following rules:
#
# - the name of the script is cgal_test
# - for every target two one line messages are written to the file 'error.txt'
#     the first one indicates if the compilation was successful
#     the second one indicates if the execution was successful
#   if one of the two was not successful, the line should start with 'ERROR:'
# - running the script should not require any user interaction
# - the script should clean up object files and executables

ERRORFILE=error.txt

#---------------------------------------------------------------------#
#                    compile_and_run <target>
#---------------------------------------------------------------------#

CARTESIAN_KERNEL=0
SIMPLE_CARTESIAN_KERNEL=1

SEGMENT_TRAITS=0
NON_CACHING_SEGMENT_TRAITS=1
POLYLINE_TRAITS=2
NON_CACHING_POLYLINE_TRAITS=3
CORE_CONIC_TRAITS=4

DOUBLE_NT=0
MP_FLOAT_NT=1
GMPZ_NT=2
LEDA_RAT_NT=3
QUOTIENT_MP_FLOAT_NT=4
QUOTIENT_CGAL_GMPZ_NT=5
CGAL_GMPQ_NT=6
LAZY_LEDA_RAT_NT=7
LAZY_CGAL_GMPQ_NT=8
LAZY_QUOTIENT_MP_FLOAT_NT=9
LEDA_REAL_NT=10
CORE_EXPR_NT=11
LAZY_GMPZ_NT=12

compile_test()
{
  local name=$1;
  local nt=$2;
  local kernel=$3;
  local traits=$4;

  TESTSUITE_CXXFLAGS="$TESTSUITE_CXXFLAGS -DTEST_NT=$nt -DTEST_KERNEL=$kernel -DTEST_TRAITS=$traits";
  echo $TESTSUITE_CXXFLAGS;
  
  echo "Compiling $name ... "
  if eval 'make CGAL_MAKEFILE=$CGAL_MAKEFILE \
           TESTSUITE_CXXFLAGS="$TESTSUITE_CXXFLAGS" \
           TESTSUITE_LDFLAGS="$TESTSUITE_LDFLAGS" $name'; then
    echo "   succesful compilation of $name" >> $ERRORFILE;
    res=1;
  else
    echo "   ERROR:    compilation of $name" >> $ERRORFILE;
    res=0;
  fi
}

run_test()
{
  local name=$1;
  local datafile=$2;

  basedata=`basename "$datafile"`
  OUTPUTFILE=ProgramOutput.$basedata.$name.$PLATFORM
#  dirdata=`dirname "$datafile"`
  rm -f $OUTPUTFILE
  COMMAND="./$name"
  if [ -f $name.cmd ] ; then
    COMMAND="$COMMAND `cat $name.cmd`"
  fi
  if [ -f $name.cin ] ; then
    COMMAND="cat $name.cin | $COMMAND"
  fi
  echo "Executing $name $datafile ... "
  echo
  ulimit -t 1200
  if eval $COMMAND $datafile > $OUTPUTFILE 2>&1 ; then
    echo "   succesful execution   of $name" >> $ERRORFILE
  else
    echo "   ERROR:    execution   of $name" >> $ERRORFILE
  fi
}

clean_tests()
{
  eval "make CGAL_MAKEFILE=$CGAL_MAKEFILE clean > /dev/null 2>&1 "
}

compile_and_run()
{
  local name=$1;

  echo "Compiling $name ... "
  SUCCES="y"
  if eval 'make CGAL_MAKEFILE=$CGAL_MAKEFILE \
           TESTSUITE_CXXFLAGS="$TESTSUITE_CXXFLAGS" \
           TESTSUITE_LDFLAGS="$TESTSUITE_LDFLAGS" $name' ; then
    echo "   succesful compilation of $name" >> $ERRORFILE
  else
    echo "   ERROR:    compilation of $name" >> $ERRORFILE
    SUCCES=""
  fi

  if [ -n "${SUCCES}" ] ; then
     OUTPUTFILE=ProgramOutput.$name.$PLATFORM
    rm -f $OUTPUTFILE
    COMMAND="./$name"
    if [ -f $name.cmd ] ; then
      COMMAND="$COMMAND `cat $name.cmd`"
    fi
    if [ -f $name.cin ] ; then
      COMMAND="cat $name.cin | $COMMAND"
    fi
    echo "Executing $name ... "
    echo
    ulimit -t 1200
    if eval $COMMAND > $OUTPUTFILE 2>&1 ; then
      echo "   succesful execution   of $name" >> $ERRORFILE
    else
      echo "   ERROR:    execution   of $name" >> $ERRORFILE
    fi
  else
    echo   "   ERROR:    not executed   $name" >> $ERRORFILE
  fi
}

#---------------------------------------------------------------------#
#                    remove the previous error file
#---------------------------------------------------------------------#

rm -f $ERRORFILE
touch $ERRORFILE

#---------------------------------------------------------------------#
#                    compile and run the tests
#---------------------------------------------------------------------#

if [ $# -ne 0 ] ; then
  for file in $* ; do
    compile_and_run $file
  done
else
# function     executable  number type   kernel            traits
  compile_test test_traits $CGAL_GMPQ_NT $CARTESIAN_KERNEL $SEGMENT_TRAITS
  if [ ${res} -eq 0 ] ; then
    echo   "   ERROR:    not executed   test_traits" >> $ERRORFILE
  else
    run_test test_traits data/compare
    run_test test_traits data/vertex
    run_test test_traits data/vertical
    run_test test_traits data/x_monotone
  fi

#  compile_and_run point_location
#  clean_tests
fi
