%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: insert_at_vertices.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 150 639 258 716
%%HiResBoundingBox: 150.301239 639.637227 257.558731 715.394725

%%DocumentFonts: rtxmi Times-Italic txsy Times-Roman
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P cmz insert_at_vertices.dvi -o
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2005.12.14:1905
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: txsy
%!PS-AdobeFont-1.0: txsy 3.0
%%CreationDate: 12/14/2000 at 12:00 PM
%%VMusage: 1024 24296
20 dict begin
/FontInfo 16 dict dup begin
/version (3.0) readonly def
/FullName (txsy) readonly def
/FamilyName (txsy) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Notice (Version 3.0, GPL) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /txsy def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/UniqueID 4595112 def
/FontBBox{-22 -944 1227 866}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
02843723FD4914EA94CF5C86363F39B548A806C44FEA1B6940CE940D9715AC10
A3E7AB0FA0A6414E9568953B7FC56D7431153CDCC1DA51CB651758F01C2BE266
586E297B3119AEE2A2D643C4C75FFC401D0B85884FDF6B65F382C4274641C911
1BFA560173294C16E51F7607EDD8C402A8ACE5B8A757F2ABA6F4ED61F15798F0
710DA8F3DEA618CF1E90303ADD6DF296225CAAA74E80F135E221CC1E0CACD211
99537E50D75DC58C3DFBB212E785396B0A36C81DB4AEEB785DEB75ADF0F0818F
C0FB1D416B07244E77B355ADE61403965BF62486A2F6897C1B44E77EC37A5188
0FE0639ECE50EC308B192067C33CF1FC03C00F8630FD348DE9C17F718B341DFE
884BBB3257BB82CC9D3C52651490F47275A7DF2497B77BFA57DE4264E2D20C09
5D2C4A821CEBE92376A69C2DFA38B618BB72913813B481A979C3E5F3CD8A5CEA
C2C5726EB95C76E024C833799ACACB28A6201C90A53CDB394D570DC876A0ECE3
8ED2A82F7A1A617781BBE5E7ECA9F99198A39BE62AF74FDE0B44B1A0745D88ED
AB8F6003C4E5E9DC24349F29614784C3339DBF666B175FDD64D631625F0E0B56
B04333BA9D637A85D3C074F14F586FF842605965ABBFCF9DA50EA1C77647591A
4DF2C53F6A8C6F0A941885A6D44EA50995C99115CDDB34A9CFFC1DD103346B2E
9D9EEFB629FC5597200654C80A484EF901415C95166361399F252C95A40C1DD9
6CA7E744C97CF9AFFB5FBC0F2D46445D0CFA11FC37272BCFC8EE865A63AA01FE
1612A5570EBDF9E76B5CC60ACE32EF896CB57CA0F2AF1F66678FED2F66E0DA47
6FA01BB34F6242F07B30746505F3A63B029CFF1B4CB11A840BF64036AF3C2AB4
1D500C397EBB9B7391C47FF7336C7AFE0727A6D5380392581F7987367C0C3A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (insert_at_vertices.dvi)
@start /Fa 205[21 21 49[{ TeXBase1Encoding ReEncodeFont }2
41.511 /Times-Roman rf /Fb 138[29 12[29 104[{
 TeXBase1Encoding ReEncodeFont }2 58.1154 /Times-Italic
rf /Fd 207[17 48[{}1 49.8132 /txsy rf /Fe 153[18 102[{
 TeXBase1Encoding ReEncodeFont }1 66.4176 /Times-Italic
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop Black Black 639 1099 a @beginspecial
0 @llx 0 @lly 111 @urx 80 @ury 1110 @rwi @setspecial
%%BeginDocument: insert_at_vertices.pstex
%!PS-Adobe-2.0 EPSF-2.0
%%Title: insert_at_vertices.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5-alpha5
%%CreationDate: Thu Nov 17 13:41:06 2005
%%For: efif@lap-eye (Efraim Fogel,,,)
%%BoundingBox: 150 639 258 716
%%HiResBoundingBox: 150.301239 639.637227 257.558731 715.394725

%Magnification: 0.3500
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 80 moveto 0 0 lineto 111 0 lineto 111 80 lineto closepath clip newpath
-29.8 121.4 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.02100 0.02100 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 55
% Ellipse
7.500 slw
n 1500 2100 75 75 0 360 DrawEllipse gs col7 s gr

% Ellipse
n 6600 5700 75 75 0 360 DrawEllipse gs col7 s gr

% here ends figure;
% 
% here starts figure with depth 50
% Polyline
0 slj
0 slc
7.500 slw
n 1500 2100 m 6600 2100 l 6600 5700 l 1500 5700 l
 cp gs col0 s gr 
% Polyline
2 slj
30.000 slw
n 2100 3900 m 2100 3899 l 2101 3897 l 2102 3892 l 2103 3885 l 2105 3875 l
 2108 3861 l 2112 3844 l 2117 3823 l 2122 3799 l 2129 3770 l
 2136 3738 l 2145 3703 l 2154 3664 l 2165 3623 l 2176 3580 l
 2189 3534 l 2202 3487 l 2216 3438 l 2231 3389 l 2247 3339 l
 2264 3289 l 2282 3238 l 2301 3187 l 2322 3137 l 2343 3087 l
 2366 3037 l 2390 2988 l 2416 2939 l 2444 2891 l 2474 2844 l
 2505 2797 l 2539 2751 l 2576 2707 l 2615 2663 l 2657 2621 l
 2702 2580 l 2749 2542 l 2798 2507 l 2850 2475 l 2906 2446 l
 2963 2421 l 3019 2401 l 3076 2385 l 3131 2374 l 3185 2366 l
 3239 2361 l 3291 2360 l 3342 2362 l 3392 2366 l 3441 2373 l
 3489 2382 l 3537 2393 l 3584 2406 l 3630 2420 l 3675 2436 l
 3720 2453 l 3763 2471 l 3806 2489 l 3848 2508 l 3888 2527 l
 3927 2547 l 3964 2566 l 3999 2584 l 4032 2602 l 4062 2619 l
 4089 2634 l 4113 2648 l 4135 2660 l 4152 2671 l 4167 2680 l
 4178 2687 l 4187 2692 l 4193 2696 l 4197 2698 l 4199 2699 l

 4200 2700 l gs col16 s gr 
% Polyline
n 3900 5100 m 3897 5101 l 3892 5104 l 3881 5109 l 3866 5116 l 3845 5125 l
 3821 5136 l 3792 5148 l 3761 5161 l 3729 5174 l 3697 5187 l
 3666 5200 l 3636 5211 l 3607 5221 l 3580 5230 l 3554 5238 l
 3529 5244 l 3505 5250 l 3482 5254 l 3459 5258 l 3436 5261 l
 3413 5263 l 3394 5264 l 3375 5264 l 3356 5264 l 3336 5264 l
 3315 5262 l 3294 5260 l 3273 5258 l 3251 5254 l 3228 5250 l
 3204 5245 l 3181 5238 l 3157 5231 l 3132 5223 l 3107 5214 l
 3082 5203 l 3057 5192 l 3033 5179 l 3008 5166 l 2983 5151 l
 2959 5136 l 2935 5119 l 2911 5102 l 2888 5083 l 2865 5064 l
 2842 5043 l 2819 5022 l 2797 4999 l 2775 4975 l 2758 4955 l
 2741 4935 l 2723 4913 l 2706 4891 l 2688 4867 l 2670 4841 l
 2651 4814 l 2632 4785 l 2612 4754 l 2591 4721 l 2570 4686 l
 2547 4649 l 2524 4609 l 2500 4567 l 2475 4523 l 2449 4477 l
 2422 4429 l 2394 4379 l 2366 4328 l 2338 4276 l 2310 4223 l
 2282 4172 l 2255 4121 l 2230 4073 l 2206 4027 l 2184 3986 l
 2164 3948 l 2147 3916 l 2133 3889 l 2122 3867 l 2113 3850 l
 2107 3838 l 2103 3831 l 2101 3827 l
 2100 3825 l gs col16 s gr 
% Polyline
n 6300 3900 m 6299 3901 l 6298 3903 l 6296 3906 l 6292 3912 l 6286 3920 l
 6279 3931 l 6269 3945 l 6258 3962 l 6244 3981 l 6228 4004 l
 6210 4030 l 6190 4058 l 6168 4089 l 6143 4123 l 6118 4158 l
 6090 4195 l 6061 4233 l 6031 4272 l 6000 4313 l 5968 4353 l
 5934 4395 l 5900 4436 l 5864 4478 l 5828 4519 l 5790 4561 l
 5752 4602 l 5712 4643 l 5670 4684 l 5628 4725 l 5583 4766 l
 5537 4806 l 5489 4846 l 5439 4885 l 5387 4924 l 5333 4962 l
 5277 4999 l 5219 5035 l 5160 5069 l 5100 5100 l 5034 5131 l
 4968 5159 l 4904 5183 l 4843 5202 l 4784 5219 l 4727 5232 l
 4674 5241 l 4622 5248 l 4572 5253 l 4525 5255 l 4479 5255 l
 4435 5253 l 4393 5249 l 4352 5244 l 4312 5238 l 4273 5230 l
 4236 5222 l 4200 5212 l 4165 5203 l 4132 5192 l 4100 5182 l
 4071 5171 l 4043 5161 l 4017 5151 l 3994 5142 l 3974 5133 l
 3956 5126 l 3941 5119 l 3928 5113 l 3918 5109 l 3911 5105 l
 3906 5103 l 3903 5101 l 3901 5100 l
 3900 5100 l gs col16 s gr 
% Polyline
 [60] 0 sd
n 4200 2700 m 4200 2701 l 4200 2704 l 4199 2708 l 4199 2716 l 4198 2727 l
 4197 2740 l 4196 2758 l 4195 2779 l 4194 2803 l 4193 2831 l
 4193 2862 l 4193 2895 l 4193 2931 l 4195 2968 l 4197 3007 l
 4200 3047 l 4205 3088 l 4210 3129 l 4218 3171 l 4227 3213 l
 4239 3255 l 4253 3297 l 4269 3340 l 4288 3382 l 4311 3424 l
 4337 3466 l 4368 3509 l 4402 3551 l 4442 3593 l 4486 3634 l
 4536 3674 l 4590 3713 l 4650 3750 l 4704 3779 l 4760 3805 l
 4817 3829 l 4875 3850 l 4933 3869 l 4992 3886 l 5050 3900 l
 5108 3912 l 5165 3922 l 5223 3931 l 5279 3937 l 5336 3943 l
 5392 3947 l 5448 3950 l 5504 3951 l 5559 3952 l 5614 3952 l
 5668 3951 l 5722 3949 l 5775 3947 l 5827 3944 l 5878 3941 l
 5927 3937 l 5974 3934 l 6019 3930 l 6061 3926 l 6100 3922 l
 6136 3919 l 6169 3915 l 6198 3912 l 6223 3909 l 6244 3907 l
 6261 3905 l 6275 3903 l 6285 3902 l 6292 3901 l 6297 3900 l
 6299 3900 l
 6300 3900 l gs col16 s gr  [] 0 sd
% Polyline
n 3000 4200 m 3003 4199 l 3008 4196 l 3018 4191 l 3033 4184 l 3053 4174 l
 3078 4162 l 3105 4149 l 3135 4135 l 3166 4121 l 3196 4106 l
 3226 4092 l 3254 4079 l 3281 4067 l 3306 4056 l 3330 4046 l
 3352 4037 l 3373 4028 l 3393 4020 l 3412 4013 l 3431 4006 l
 3450 4000 l 3471 3993 l 3492 3987 l 3513 3981 l 3535 3975 l
 3559 3969 l 3584 3963 l 3611 3956 l 3640 3950 l 3671 3944 l
 3704 3937 l 3738 3930 l 3771 3924 l 3803 3918 l 3833 3912 l
 3857 3908 l 3876 3904 l 3889 3902 l 3897 3901 l
 3900 3900 l gs col16 s gr 
% Polyline
n 3000 4200 m 3002 4203 l 3007 4209 l 3016 4220 l 3029 4236 l 3045 4255 l
 3063 4277 l 3083 4299 l 3102 4322 l 3122 4344 l 3140 4363 l
 3158 4381 l 3174 4397 l 3190 4410 l 3205 4422 l 3220 4433 l
 3235 4442 l 3250 4450 l 3266 4457 l 3282 4464 l 3299 4469 l
 3318 4474 l 3338 4479 l 3360 4482 l 3385 4486 l 3412 4489 l
 3441 4491 l 3471 4494 l 3501 4496 l 3529 4497 l 3554 4498 l
 3574 4499 l 3588 4500 l 3596 4500 l 3599 4500 l
 3600 4500 l gs col16 s gr 
% Polyline
n 3600 4500 m 3603 4498 l 3609 4493 l 3620 4484 l 3636 4472 l 3655 4456 l
 3677 4438 l 3699 4419 l 3722 4400 l 3744 4381 l 3763 4363 l
 3781 4347 l 3797 4331 l 3810 4316 l 3822 4302 l 3833 4289 l
 3842 4276 l 3850 4263 l 3858 4247 l 3865 4231 l 3871 4215 l
 3876 4197 l 3881 4176 l 3885 4154 l 3888 4130 l 3891 4104 l
 3894 4076 l 3896 4049 l 3898 4024 l 3899 4003 l 3899 3988 l
 3900 3979 l 3900 3976 l
 3900 3975 l gs col16 s gr 
% Polyline
n 4800 3000 m 4801 3000 l 4804 3002 l 4813 3006 l 4829 3013 l 4850 3023 l
 4875 3034 l 4903 3047 l 4931 3059 l 4958 3070 l 4983 3080 l
 5006 3089 l 5027 3096 l 5047 3102 l 5065 3106 l 5083 3110 l
 5100 3113 l 5117 3114 l 5135 3115 l 5153 3115 l 5173 3114 l
 5194 3112 l 5217 3109 l 5242 3106 l 5269 3101 l 5297 3096 l
 5325 3091 l 5350 3086 l 5371 3081 l 5387 3078 l 5396 3076 l
 5399 3075 l
 5400 3075 l gs col16 s gr 
% Polyline
n 5400 3075 m 5402 3073 l 5407 3068 l 5415 3059 l 5427 3046 l 5442 3030 l
 5459 3011 l 5476 2991 l 5494 2970 l 5511 2950 l 5526 2931 l
 5540 2913 l 5553 2895 l 5564 2878 l 5574 2862 l 5584 2846 l
 5592 2829 l 5600 2813 l 5607 2797 l 5613 2780 l 5619 2763 l
 5625 2744 l 5631 2723 l 5637 2701 l 5644 2676 l 5650 2650 l
 5656 2621 l 5663 2590 l 5670 2558 l 5676 2525 l 5682 2494 l
 5688 2466 l 5692 2442 l 5696 2423 l 5698 2411 l 5699 2403 l

 5700 2400 l gs col16 s gr 
% Polyline
n 4800 3000 m 4803 2999 l 4808 2996 l 4819 2990 l 4835 2982 l 4856 2971 l
 4882 2958 l 4912 2942 l 4946 2925 l 4981 2907 l 5017 2888 l
 5053 2869 l 5087 2851 l 5120 2834 l 5151 2817 l 5180 2801 l
 5207 2786 l 5231 2773 l 5254 2759 l 5276 2747 l 5296 2735 l
 5314 2723 l 5333 2711 l 5350 2700 l 5370 2686 l 5390 2672 l
 5410 2658 l 5429 2643 l 5449 2627 l 5469 2611 l 5491 2593 l
 5513 2573 l 5536 2553 l 5561 2531 l 5585 2508 l 5609 2486 l
 5632 2464 l 5653 2445 l 5670 2429 l 5684 2416 l 5693 2407 l
 5698 2402 l
 5700 2400 l gs col16 s gr 
% Polyline
7.500 slw
 [60] 0 sd
gs  clippath
4017 2529 m 4198 2597 l 4229 2513 l 4049 2445 l 4049 2445 l 4174 2540 l 4017 2529 l cp
eoclip
n 4200 2550 m 4165 2537 l 4144 2529 l 4118 2519 l 4087 2508 l 4053 2496 l
 4017 2483 l 3981 2469 l 3945 2456 l 3910 2444 l 3877 2432 l
 3845 2420 l 3816 2410 l 3788 2400 l 3763 2391 l 3739 2383 l
 3717 2376 l 3696 2369 l 3676 2362 l 3656 2356 l 3638 2350 l
 3615 2343 l 3593 2337 l 3572 2331 l 3550 2325 l 3527 2319 l
 3505 2314 l 3483 2309 l 3460 2304 l 3437 2300 l 3414 2296 l
 3392 2293 l 3369 2290 l 3347 2288 l 3325 2286 l 3303 2285 l
 3282 2285 l 3261 2285 l 3241 2285 l 3221 2286 l 3200 2288 l
 3181 2289 l 3162 2292 l 3142 2294 l 3121 2298 l 3100 2301 l
 3078 2306 l 3056 2311 l 3033 2317 l 3009 2324 l 2985 2331 l
 2961 2339 l 2936 2347 l 2912 2357 l 2888 2366 l 2865 2377 l
 2841 2388 l 2819 2399 l 2796 2411 l 2775 2423 l 2754 2436 l
 2733 2449 l 2713 2463 l 2694 2476 l 2675 2490 l 2657 2504 l
 2638 2520 l 2619 2536 l 2599 2554 l 2580 2572 l 2560 2592 l
 2541 2612 l 2521 2633 l 2501 2655 l 2482 2678 l 2463 2701 l
 2444 2725 l 2426 2750 l 2408 2774 l 2391 2799 l 2374 2824 l
 2358 2849 l 2343 2874 l 2328 2899 l 2314 2924 l 2301 2949 l
 2288 2975 l 2277 2997 l 2266 3020 l 2255 3044 l 2245 3068 l
 2234 3093 l 2224 3120 l 2213 3148 l 2202 3178 l 2191 3210 l
 2180 3244 l 2168 3280 l 2155 3318 l 2143 3358 l 2130 3399 l
 2116 3442 l 2103 3485 l 2090 3527 l 2078 3568 l 2067 3607 l
 2056 3642 l 2047 3673 l 2040 3698 l 2034 3718 l 2030 3733 l
 2027 3743 l 2026 3748 l
 2025 3750 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
n 4017 2529 m 4174 2540 l 4049 2445 l 4017 2529 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
 [60] 0 sd
gs  clippath
2200 3644 m 2127 3821 l 2210 3856 l 2283 3678 l 2283 3678 l 2185 3800 l 2200 3644 l cp
eoclip
n 2175 3825 m 2187 3796 l 2195 3777 l 2206 3752 l 2219 3721 l 2234 3685 l
 2251 3645 l 2270 3601 l 2290 3554 l 2312 3505 l 2334 3455 l
 2356 3405 l 2378 3356 l 2399 3308 l 2420 3262 l 2441 3218 l
 2461 3176 l 2480 3136 l 2499 3099 l 2517 3064 l 2534 3031 l
 2551 3000 l 2567 2971 l 2583 2944 l 2599 2918 l 2615 2893 l
 2631 2869 l 2646 2847 l 2663 2825 l 2681 2801 l 2700 2777 l
 2719 2755 l 2739 2733 l 2760 2711 l 2781 2690 l 2802 2670 l
 2825 2650 l 2848 2631 l 2871 2612 l 2895 2595 l 2920 2578 l
 2944 2562 l 2969 2547 l 2995 2533 l 3020 2520 l 3046 2509 l
 3071 2498 l 3096 2488 l 3121 2480 l 3146 2473 l 3170 2466 l
 3195 2461 l 3219 2457 l 3242 2454 l 3266 2452 l 3289 2450 l
 3313 2450 l 3338 2451 l 3363 2452 l 3389 2455 l 3416 2459 l
 3443 2464 l 3472 2471 l 3503 2479 l 3535 2488 l 3569 2500 l
 3605 2512 l 3644 2526 l 3684 2542 l 3725 2558 l 3768 2576 l
 3811 2594 l 3853 2612 l 3894 2629 l 3931 2646 l 3964 2661 l
 3992 2673 l 4015 2684 l 4031 2691 l 4042 2696 l 4047 2699 l

 4050 2700 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
n 2200 3644 m 2185 3800 l 2283 3678 l 2200 3644 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
gs  clippath
5979 3891 m 6170 3867 l 6159 3778 l 5968 3801 l 5968 3801 l 6123 3828 l 5979 3891 l cp
eoclip
n 6150 3825 m 6134 3827 l 6123 3828 l 6109 3829 l 6091 3831 l 6070 3832 l
 6044 3834 l 6015 3837 l 5983 3839 l 5947 3841 l 5909 3844 l
 5868 3846 l 5825 3848 l 5781 3850 l 5735 3851 l 5688 3852 l
 5640 3852 l 5592 3851 l 5542 3850 l 5493 3847 l 5442 3844 l
 5392 3840 l 5340 3834 l 5288 3827 l 5236 3818 l 5183 3808 l
 5129 3796 l 5074 3781 l 5019 3765 l 4963 3746 l 4908 3725 l
 4853 3701 l 4800 3675 l 4743 3643 l 4690 3610 l 4642 3575 l
 4598 3540 l 4559 3505 l 4523 3469 l 4492 3434 l 4464 3398 l
 4439 3363 l 4417 3328 l 4398 3292 l 4381 3257 l 4365 3222 l
 4352 3188 l 4340 3153 l 4329 3120 l 4320 3086 l 4311 3054 l
 4304 3024 l 4298 2995 l 4293 2968 l 4288 2943 l 4285 2922 l
 4282 2903 l 4280 2887 l 4278 2874 l 4277 2865 l 4276 2858 l
 4275 2853 l 4275 2851 l
 4275 2850 l gs col0 s gr gr

% arrowhead
0 slj
n 5979 3891 m 6123 3828 l 5968 3801 l 5979 3891 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
gs  clippath
4156 3029 m 4170 2838 l 4081 2831 l 4066 3023 l 4066 3023 l 4123 2877 l 4156 3029 l cp
eoclip
n 4125 2850 m 4122 2890 l 4121 2913 l 4119 2942 l 4118 2975 l 4116 3011 l
 4116 3048 l 4116 3085 l 4117 3122 l 4119 3157 l 4121 3190 l
 4125 3221 l 4130 3251 l 4136 3280 l 4144 3307 l 4152 3334 l
 4162 3360 l 4174 3386 l 4188 3413 l 4198 3432 l 4210 3452 l
 4222 3472 l 4236 3493 l 4251 3514 l 4266 3535 l 4283 3557 l
 4301 3579 l 4320 3601 l 4341 3623 l 4362 3646 l 4384 3668 l
 4408 3690 l 4432 3713 l 4458 3734 l 4484 3756 l 4511 3777 l
 4539 3797 l 4567 3817 l 4596 3836 l 4625 3854 l 4655 3871 l
 4684 3888 l 4714 3903 l 4745 3917 l 4775 3931 l 4806 3943 l
 4837 3955 l 4868 3965 l 4900 3975 l 4929 3983 l 4958 3990 l
 4988 3996 l 5018 4002 l 5050 4006 l 5084 4011 l 5118 4014 l
 5155 4017 l 5193 4019 l 5234 4020 l 5276 4021 l 5321 4022 l
 5368 4021 l 5418 4020 l 5470 4019 l 5523 4017 l 5579 4015 l
 5636 4012 l 5693 4009 l 5750 4005 l 5807 4001 l 5861 3998 l
 5913 3994 l 5961 3990 l 6005 3987 l 6042 3984 l 6074 3981 l
 6100 3979 l 6120 3978 l 6134 3976 l 6143 3976 l 6148 3975 l

 6150 3975 l gs col0 s gr gr

% arrowhead
0 slj
n 4156 3029 m 4123 2877 l 4066 3023 l 4156 3029 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
 [60] 0 sd
gs  clippath
5994 4214 m 6119 4067 l 6050 4009 l 5925 4156 l 5925 4156 l 6057 4071 l 5994 4214 l cp
eoclip
n 6075 4050 m 6053 4076 l 6039 4092 l 6021 4114 l 5999 4140 l 5974 4170 l
 5945 4204 l 5914 4240 l 5882 4278 l 5848 4317 l 5814 4356 l
 5781 4394 l 5748 4432 l 5716 4468 l 5685 4503 l 5656 4535 l
 5628 4566 l 5601 4594 l 5576 4621 l 5551 4647 l 5528 4670 l
 5505 4692 l 5484 4713 l 5462 4733 l 5441 4752 l 5421 4770 l
 5400 4788 l 5376 4807 l 5352 4826 l 5328 4844 l 5303 4862 l
 5278 4880 l 5253 4897 l 5227 4914 l 5200 4930 l 5174 4946 l
 5147 4962 l 5119 4976 l 5092 4991 l 5064 5004 l 5037 5017 l
 5009 5029 l 4982 5041 l 4956 5051 l 4929 5061 l 4904 5070 l
 4878 5078 l 4854 5085 l 4830 5092 l 4806 5098 l 4783 5104 l
 4760 5108 l 4738 5113 l 4713 5117 l 4689 5120 l 4664 5123 l
 4639 5125 l 4613 5126 l 4586 5127 l 4557 5128 l 4527 5128 l
 4495 5127 l 4461 5126 l 4426 5124 l 4389 5122 l 4351 5119 l
 4313 5117 l 4276 5114 l 4241 5111 l 4209 5108 l 4182 5106 l
 4160 5104 l 4144 5102 l 4134 5101 l 4128 5100 l
 4125 5100 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
n 5994 4214 m 6057 4071 l 5925 4156 l 5994 4214 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
 [60] 0 sd
gs  clippath
4158 5247 m 3970 5202 l 3949 5290 l 4137 5334 l 4137 5334 l 4002 5256 l 4158 5247 l cp
eoclip
n 3975 5250 m 4004 5257 l 4023 5262 l 4047 5268 l 4076 5275 l 4109 5283 l
 4146 5291 l 4185 5300 l 4226 5308 l 4267 5317 l 4308 5324 l
 4349 5332 l 4388 5338 l 4426 5343 l 4462 5348 l 4496 5352 l
 4530 5354 l 4561 5356 l 4592 5356 l 4621 5356 l 4650 5354 l
 4678 5351 l 4706 5348 l 4734 5343 l 4763 5338 l 4789 5331 l
 4816 5324 l 4843 5317 l 4871 5308 l 4899 5298 l 4928 5287 l
 4958 5276 l 4988 5263 l 5018 5250 l 5049 5235 l 5081 5220 l
 5113 5204 l 5145 5187 l 5177 5169 l 5209 5151 l 5241 5132 l
 5273 5112 l 5305 5092 l 5336 5072 l 5367 5051 l 5397 5030 l
 5426 5009 l 5455 4988 l 5483 4966 l 5511 4945 l 5537 4924 l
 5563 4902 l 5588 4881 l 5613 4859 l 5638 4838 l 5660 4817 l
 5682 4796 l 5704 4775 l 5726 4753 l 5748 4731 l 5770 4707 l
 5793 4683 l 5816 4658 l 5839 4631 l 5864 4603 l 5889 4573 l
 5915 4542 l 5942 4509 l 5970 4475 l 5998 4440 l 6028 4403 l
 6057 4366 l 6087 4328 l 6117 4290 l 6145 4253 l 6172 4218 l
 6198 4185 l 6221 4154 l 6241 4127 l 6259 4105 l 6273 4086 l
 6284 4072 l 6291 4062 l 6296 4055 l 6299 4052 l
 6300 4050 l gs col0 s gr gr
 [] 0 sd
% arrowhead
0 slj
n 4158 5247 m 4002 5256 l 4137 5334 l 4158 5247 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
30.000 slw
n 3300 3600 m 3297 3603 l 3290 3610 l 3279 3622 l 3264 3638 l 3246 3658 l
 3226 3680 l 3206 3702 l 3187 3724 l 3170 3745 l 3155 3764 l
 3141 3782 l 3129 3800 l 3119 3816 l 3109 3833 l 3100 3850 l
 3093 3866 l 3085 3882 l 3079 3899 l 3072 3918 l 3065 3938 l
 3059 3960 l 3052 3985 l 3044 4012 l 3037 4041 l 3030 4071 l
 3022 4101 l 3016 4129 l 3010 4154 l 3006 4174 l 3003 4188 l
 3001 4196 l 3000 4199 l
 3000 4200 l gs col16 s gr 
% Polyline
n 3300 3600 m 3303 3600 l 3310 3600 l 3323 3601 l 3342 3601 l 3365 3602 l
 3393 3603 l 3424 3605 l 3456 3607 l 3488 3609 l 3518 3611 l
 3546 3614 l 3572 3617 l 3596 3620 l 3618 3624 l 3637 3628 l
 3655 3632 l 3671 3638 l 3686 3643 l 3700 3650 l 3717 3659 l
 3732 3670 l 3748 3682 l 3763 3696 l 3778 3713 l 3793 3732 l
 3809 3754 l 3826 3778 l 3843 3803 l 3859 3829 l 3873 3853 l
 3885 3873 l 3893 3887 l 3898 3896 l 3900 3899 l
 3900 3900 l gs col16 s gr 
% Polyline
n 5400 3075 m 5403 3077 l 5410 3082 l 5422 3089 l 5438 3099 l 5458 3111 l
 5480 3125 l 5502 3138 l 5524 3151 l 5545 3163 l 5564 3173 l
 5582 3183 l 5600 3191 l 5616 3199 l 5633 3206 l 5650 3213 l
 5666 3218 l 5682 3224 l 5699 3229 l 5718 3234 l 5738 3240 l
 5760 3246 l 5785 3252 l 5812 3258 l 5841 3265 l 5871 3272 l
 5901 3279 l 5929 3285 l 5954 3290 l 5974 3295 l 5988 3298 l
 5996 3299 l 5999 3300 l
 6000 3300 l gs col16 s gr 
% here ends figure;
% 
% here starts figure with depth 40
% Ellipse
7.500 slw
n 2100 3900 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 4200 2700 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6300 3900 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3925 5100 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3000 4200 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3900 3900 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3600 4500 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 5700 2400 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 5400 3075 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3300 3600 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6000 3300 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 4800 3000 50 50 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% here ends figure;
$F2psEnd
rs
showpage
%%Trailer
%EOF

%%EndDocument
 @endspecial 0 0 0 TeXcolorrgb 900 651 a Fe(f)928 627
y Fd(0)p Black 0 0 0 TeXcolorrgb 716 560 a Fe(f)p Black
0 0 0 TeXcolorrgb 969 809 a Fb(h)998 818 y Fa(1)p Black
0 0 0 TeXcolorrgb 1323 599 a Fb(h)1352 608 y Fa(2)p Black
0 0 0 TeXcolorrgb 1152 546 a Fb(u)1181 555 y Fa(1)p Black
0 0 0 TeXcolorrgb 1467 743 a Fb(u)1496 752 y Fa(2)p Black
Black Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
