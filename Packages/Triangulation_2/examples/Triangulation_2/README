To compule and run all these examples type :
./cgal_test
To compute and run only some of them type
./cgal_test name-of_wanted_example

triangulation_prog1:
The following program creates a triangulation of 2D points using 
a default kernel of CGAL  as geometric traits and the
default instanciation of the triangulation data structure template
parameter.
 The input points are read from a file and inserted in the
triangulation.  Finally points on the convex hull are written to {\tt
cout}.

colored_face
Illustrates how the user can have some additionnal property
like e.g. a color stored in the faces or vertices
of the triangulation.

adding_handles
Illustrate how  user can derive and plug in his own vertex_base 
or face_base when he would like to have  additionnal
handles to other faces and vertices stored in the faces or vertices.


voronoi:
Builds a Delaunay triangulation from input points in a file
and takes the dual Voronoi diagram

terrain
Build a terrain using a Delaunay triangulation with the traits class for 
terrains.

regular
Build a regular triangulation

constrained
input constraining edges from a file and build the Delaunay
constrained triangulation that conforms to these constraining edges.

constrained_plus
Intersecting constraints are entered in a triangulation.
The number of resulting subconstraints is output;

points:
Illustrates how to input user defined points and a user provided traits
class in a Triangulation 

