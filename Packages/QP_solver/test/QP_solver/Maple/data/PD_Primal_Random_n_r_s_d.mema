### Section: Meta data
## Polytope distance primal. Two randomly chosen sets of points with cardinality 

## r and s, r+s=n, in d-dimensional space. 

with(LinearAlgebra):

desc:="Polytope distance primal. Two randomly chosen sets of points with cardinality r and s, r+s=n, in d-dimensional space.":

my_name:="PD_Primal_Random_n_r_s_d":

### Section: Data 

d:=15:

r:=11:

s:=200:

n:=r+s:

A:=Matrix(2, n):

for i from 1 to r do
A[1..2, [i]]:=Matrix([[1], [0]]):
end do:

for i from r+1 to n do
A[1..2, [i]]:=Matrix([[0],[1]]):
end do:

relop:=Matrix(2, 1, 0):

b:=Matrix(2, 1, 1):

c:=Matrix(1, n, 0):

C:=Matrix(d, n):

for i from 1 to r do
C[1..d, i]:=RandomVector(d, generator=rand(10..19)):
end do:

for i from r+1 to n do
C[1..d, i]:=-RandomVector(d, generator=rand(0..9)):
end do:

Q:=Transpose(C).C:

### Section: Generation of test data file(s)

src_path:="./":

src:=cat(src_path, "encodeProblem"):

dest_path:="../data/":

dest:=cat(dest_path, my_name):

gen_desc:=StringTools['Join'](["Generated by ", my_name, ".mw"], ""):

read src:

encodeQpRatProblem(A, relop, b, c, Q, desc, gen_desc, dest):

encodeQpIntProblem(A, relop, b, c, Q, desc, gen_desc, dest):

encodeQpFloatProblem(A, relop, b, c, Q, desc, gen_desc, dest):
