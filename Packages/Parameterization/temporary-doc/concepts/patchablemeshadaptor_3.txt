// Copyright (c) 2005  INRIA (France).
// All rights reserved.
//
// This file is part of CGAL (www.cgal.org); you may redistribute it under
// the terms of the Q Public License version 1.0.
// See the file LICENSE.QPL distributed with CGAL.
//
// Licensees holding a valid commercial license may use this file in
// accordance with the commercial license agreement provided with the software.
//
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
//
// $Source$
// $Revision$
// $Name$
//
// Author(s)     : Laurent Saboret, Pierre Alliez


// PatchableMeshAdaptor_3 inherits from concept MeshAdaptor_3, thus is a concept
// for a 3D surface mesh.
// PatchableMeshAdaptor_3 adds the ability to support patches and virtual seams.
// Patches are a subset of a 3D mesh.
// Virtual seams are the ability to behave exactly as if the surface was "cut"
// following a certain path.
//
// Its main purpose is to allow
// the parameterization package to parameterize any 3D surface by decomposing it
// in a list of topological disks.
//
// Models:
// Adaptators for Polyhedron_3 and TDS_2 with 3D points are provided.
//
// Design pattern:
// PatchableMeshAdaptor_3 is an Adaptor (see [GOF95]): it changes the
// interface of a 3D mesh to match the interface expected by the parameterization methods.

class PatchableMeshAdaptor_3 : public MeshAdaptor_3
{
// Public types
public:

    // Same sub-types as MeshAdaptor_3


// Public operations
public:

    // VERTEX INTERFACE

    // Get/set vertex seaming flag. Default value is undefined.
    int  get_vertex_seaming(Vertex_const_handle vertex) const;
    void set_vertex_seaming(Vertex_handle vertex, int seaming);


    // EDGE INTERFACE

    // Get/set oriented edge's seaming flag, ie position of the oriented edge
    // wrt to the UNIQUE main boundary
    int  get_halfedge_seaming(Vertex_const_handle source, Vertex_const_handle target) const;
    void set_halfedge_seaming(Vertex_handle source, Vertex_handle target, int seaming);


    // CORNER INTERFACE

    // Get/set the 2D position (= (u,v) pair) of corners at the "right"
    // of the prev_vertex -> vertex -> next_vertex line.
    // Default value is undefined.
    Point_2 get_corners_uv(Vertex_const_handle vertex,
                           Vertex_const_handle prev_vertex,
                           Vertex_const_handle next_vertex) const;
    void  set_corners_uv(Vertex_handle vertex,
                        Vertex_const_handle prev_vertex,
                        Vertex_const_handle next_vertex,
                        const Point_2& uv);

    // Get/set "is parameterized" field of corners at the "right"
    // of the prev_vertex -> vertex -> next_vertex line.
    // Default value is undefined.
    bool are_corners_parameterized(Vertex_const_handle vertex,
                                   Vertex_const_handle prev_vertex,
                                   Vertex_const_handle next_vertex) const;
    void set_corners_parameterized(Vertex_handle vertex,
                                   Vertex_const_handle prev_vertex,
                                   Vertex_const_handle next_vertex,
                                   bool parameterized);

    // Get/set index of corners at the "right"
    // of the prev_vertex -> vertex -> next_vertex line.
    // Default value is undefined.
    int get_corners_index(Vertex_const_handle vertex,
                          Vertex_const_handle prev_vertex,
                          Vertex_const_handle next_vertex) const;
    void set_corners_index(Vertex_handle vertex,
                           Vertex_const_handle prev_vertex,
                           Vertex_const_handle next_vertex,
                           int index);

    // Get/set all purpose tag of corners at the "right"
    // of the prev_vertex -> vertex -> next_vertex line.
    // Default value is undefined.
    int get_corners_tag(Vertex_const_handle vertex,
                        Vertex_const_handle prev_vertex,
                        Vertex_const_handle next_vertex) const;
    void set_corners_tag(Vertex_handle vertex,
                         Vertex_const_handle prev_vertex,
                         Vertex_const_handle next_vertex,
                         int tag);

}; // PatchableMeshAdaptor_3

