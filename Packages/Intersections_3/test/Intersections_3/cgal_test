#!/bin/sh
OUTPUTFILE=error.txt
DIFFOUTPUT=ErrorDiff

use_purify=0

one_run()
{
    goodresult=RESULT/${base}/`basename ${datafile}`
    if "./${base}" < ${datafile} >output
    then
        cat output >> ProgramOutput.${base}.$PLATFORM
	if [ -r ${goodresult} ]
	then
	    if diff output ${goodresult} > /dev/null
	    then
		succes=ja
	    else
		succes=nee
		explanation="Wrong output. (see file $DIFFOUTPUT)"
		echo diff result of ${datafile} >> $DIFFOUTPUT
		diff output ${goodresult} >> $DIFFOUTPUT
		echo ""  >> $DIFFOUTPUT
	    fi
	else
	    succes=ja
	fi
    else
	succes=nee
	explanation="non zero return code"
    fi
    if [ ${succes} = ja ]
    then
	echo  "${base} < ${datafile} succesful">> $OUTPUTFILE
    else
	echo "ERROR: ${base} < ${datafile} did not run well" >> $OUTPUTFILE
	echo "    " "$explanation" >> $OUTPUTFILE
    fi
}

make_and_execute()
{
    if [ -r ii_files/${base}.ii.$1 ]
    then
	mv ii_files/${base}.ii.$1 ii_files/${base}.ii
    fi
    EXTRA_FLAGS="-DTESTR=$1"
    export EXTRA_FLAGS
    if make ${base} # 2>/dev/null
    then
	echo "compilation of ${file} with TESTR=$1 succeeded" >> $OUTPUTFILE
	if [ -r ii_files/${base}.ii ]
	then
	    mv ii_files/${base}.ii ii_files/${base}.ii.$1
	fi
	if [ ${use_purify} -eq 1 ]
	then
	    purify -log-file="%v.$1.%p.plog" ${base}
	    mv ${base}.pure ${base}
	fi
	for datafile in ${datafiles}
	do
	    if [ -r ${datafile} ]
	    then
		one_run
	    fi
	done
    else
	echo "ERROR: compilation of ${file}  with TESTR=$1 failed" >> $OUTPUTFILE
    fi
    make ${base}.clean
}

echo ${CGAL_LIB_DIR}

rm -f $OUTPUTFILE
touch $OUTPUTFILE
rm -f $DIFFOUTPUT
touch $DIFFOUTPUT

if [ $# -ne 0 ]
then
    sourcefiles="$*"
else
    sourcefiles="*.C"
fi


for file in ${sourcefiles}
do
    base=`basename ${file} .C`
    rm -f ProgramOutput.${base}.$PLATFORM
    touch -f ProgramOutput.${base}.$PLATFORM
    xdatafiles="DATA/${base}.x.*"
#    idatafiles="DATA/${base}.i.*"
#    ixdatafiles="DATA/${base}.ix.*"
#    datafiles="${idatafiles} ${ixdatafiles}"
#    datafiles="${ixdatafiles}"
    if [ -d  "DATA/${base}" ]
    then
	datafiles="DATA/${base}/ix.*"
    else
	datafiles=""
    fi
    if [  "${datafiles}" ]
    then
        echo "TESTR=1" >> ProgramOutput.${base}.$PLATFORM
	make_and_execute 1;
    fi
#    datafiles="${xdatafiles} ${ixdatafiles}"
    if [  "${datafiles}" ]
    then
        echo "TESTR=5" >> ProgramOutput.${base}.$PLATFORM
	make_and_execute 5;
    fi
done



