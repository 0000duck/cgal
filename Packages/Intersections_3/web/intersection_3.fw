@! $RCSfile$
@! $Revision$
@! $Date$

@! Author: Geert-Jan Giezeman (geert@cs.ruu.nl)

@i cgal_util.fwi


@A@<Three dimensional intersection routines@>

Because there are a lot of intersection routines (quadratic in the number of
object types), those routines are split in several classes.

@B@<Class 1 intersection routines@>

@C@<Line Plane intersection@>

@$@<3D Line Plane intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Line_3<R>&line);

template <class R>
inline
CGAL_Object
CGAL_intersection(const CGAL_Line_3<R>&line, const CGAL_Plane_3<R> &plane)
{
    return CGAL_intersection(plane,line);
}
@}

@$@<3D Line Plane intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Line_3<R>&line)
{
    typedef typename R::RT RT;
    const CGAL_Point_3<R> &line_pt = line.point();
    const CGAL_Direction_3<R> &line_dir = line.direction();
    RT num,  den;
    num = plane.a()*line_pt.hx() + plane.b()*line_pt.hy()
        + plane.c()*line_pt.hz() + plane.d()*line_pt.hw();
    den = plane.a()*line_dir.dx() + plane.b()*line_dir.dy()
        + plane.c()*line_dir.dz();
    if (den == RT(0)) {
        if (num == RT(0)) {
            // all line
            return CGAL_make_object(line);
        } else {
            // no intersection
            return CGAL_Object();
        }
    }
    return CGAL_make_object(CGAL_Point_3<R>(
        den*line_pt.hx()-num*line_dir.dx(),
        den*line_pt.hy()-num*line_dir.dy(),
        den*line_pt.hz()-num*line_dir.dz(),
        line_pt.hw()*den));
}
@}

@C@<Segment Plane intersection@>

@$@<3D Segment Plane intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Segment_3<R>&seg);

template <class R>
inline
CGAL_Object
CGAL_intersection(const CGAL_Segment_3<R>&seg, const CGAL_Plane_3<R> &plane)
{
    return CGAL_intersection(plane,seg);
}
@}

@$@<3D Segment Plane intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Segment_3<R>&seg)
{
    const CGAL_Point_3<R> &source = seg.source();
    const CGAL_Point_3<R> &target = seg.target();
    CGAL_Oriented_side source_side,target_side;
    source_side = plane.oriented_side(source);
    target_side = plane.oriented_side(target);
    switch (source_side) {
    case CGAL_ON_ORIENTED_BOUNDARY:
        if (target_side == CGAL_ON_ORIENTED_BOUNDARY)
            return CGAL_make_object(seg);
        else
            return CGAL_make_object(source);
    case CGAL_ON_POSITIVE_SIDE:
        switch (target_side) {
        case CGAL_ON_ORIENTED_BOUNDARY:
            return CGAL_make_object(target);
        case CGAL_ON_POSITIVE_SIDE:
            return CGAL_Object();
        case CGAL_ON_NEGATIVE_SIDE:
            return CGAL_intersection(plane, seg.supporting_line());
        }
    case CGAL_ON_NEGATIVE_SIDE:
        switch (target_side) {
        case CGAL_ON_ORIENTED_BOUNDARY:
            return CGAL_make_object(target);
        case CGAL_ON_POSITIVE_SIDE:
            return CGAL_intersection(plane, seg.supporting_line());
        case CGAL_ON_NEGATIVE_SIDE:
            return CGAL_Object();
        }
    }
    CGAL_kernel_assertion_msg(false, "Supposedly unreachable code.");
    return CGAL_Object();
}
@}

@C@<Ray Plane intersection@>

@$@<3D Ray Plane intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Ray_3<R>&ray);

template <class R>
inline
CGAL_Object
CGAL_intersection(const CGAL_Ray_3<R>&ray, const CGAL_Plane_3<R> &plane)
{
    return CGAL_intersection(plane,ray);
}
@}

First we compute the intersection of the supporting line of the ray with
the plane. If

@$@<3D Ray Plane intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane, const CGAL_Ray_3<R>&ray)
{
    const CGAL_Object line_intersection =
            CGAL_intersection(plane, ray.supporting_line());
    CGAL_Point_3<R> isp;
    if (CGAL_assign(isp, line_intersection)) {
        if (ray.collinear_has_on(isp))
            return line_intersection;
        else
            return CGAL_Object();
    }
    if (line_intersection.ptr()->base() == 0)
        return line_intersection;
    return CGAL_make_object(ray);
}
@}

@C@<Plane Plane intersection@>

@$@<3D Plane Plane intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane1, const CGAL_Plane_3<R>&plane2);

@}


@$@<3D Plane Plane intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Plane_3<R> &plane1, const CGAL_Plane_3<R>&plane2)
{
    typedef typename R::RT RT;
    const RT &a = plane1.a();
    const RT &b = plane1.b();
    const RT &c = plane1.c();
    const RT &d = plane1.d();
    const RT &p = plane2.a();
    const RT &q = plane2.b();
    const RT &r = plane2.c();
    const RT &s = plane2.d();
    const RT zero = RT(0);
    RT det;
    CGAL_Point_3<R> is_pt;
    CGAL_Direction_3<R> is_dir;

    det = a*q-p*b;
    if (det != zero) {
        is_pt = CGAL_Point_3<R>(b*s-d*q, p*d-a*s, zero, det);
        is_dir = CGAL_Direction_3<R>(b*r-c*q, p*c-a*r, det);
        return CGAL_make_object(CGAL_Line_3<R>(is_pt, is_dir));
    }
    det = a*r-p*c;
    if (det != zero) {
        is_pt = CGAL_Point_3<R>(c*s-d*r, zero, p*d-a*s, det);
        is_dir = CGAL_Direction_3<R>(c*q-b*r, det, p*b-a*q);
        return CGAL_make_object(CGAL_Line_3<R>(is_pt, is_dir));
    }
    det = b*r-c*q;
    if (det != zero) {
        is_pt = CGAL_Point_3<R>(zero, c*s-d*r, d*q-b*s, det);
        is_dir = CGAL_Direction_3<R>(det, c*p-a*r, a*q-b*p);
        return CGAL_make_object(CGAL_Line_3<R>(is_pt, is_dir));
    }
// degenerate case
    if (a!=zero || p!=zero) {
        if (a*s == p*d)
            return CGAL_make_object(plane1);
        else
            return CGAL_Object();
    }
    if (b!=zero || q!=zero) {
        if (b*s == q*d)
            return CGAL_make_object(plane1);
        else
            return CGAL_Object();
    }
    if (c!=zero || r!=zero) {
        if (c*s == r*d)
            return CGAL_make_object(plane1);
        else
            return CGAL_Object();
    }
    return CGAL_make_object(plane1);
}
@}

@C@<Line Box intersection@>

@$@<3D Line Box intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Line_3<R> &line,
        const CGAL_Bbox_3 &box) ;

template <class R>
inline CGAL_Object
CGAL_intersection(const CGAL_Bbox_3 &box,
        const CGAL_Line_3<R> &line)
{
    return CGAL_intersection(line, box);
}
@}

@$@<3D CD Line Box intersection declarations@>==@{

extern CGAL_Object
CGAL_intersection_bl(const CGAL_Bbox_3 &box,
        double lx1, double ly1, double lz1,
        double lx2, double ly2, double lz2,
        bool min_infinite, bool max_infinite);

@}

@D@<Implementation@>
Lines with a representation other than Cartesian double are transformed to
Cartesian double representation by transforming the coordinates of a point
of the line and of the direction.

@$@<3D Line Box intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Line_3<R> &line,
        const CGAL_Bbox_3 &box)
{
    const CGAL_Point_3<R> &linepoint = line.point();
    const CGAL_Direction_3<R> &linedir = line.direction();
    return CGAL_intersection_bl(box,
        CGAL_to_double(linepoint.x()),
        CGAL_to_double(linepoint.y()),
        CGAL_to_double(linepoint.z()),
        CGAL_to_double(linedir.dx()),
        CGAL_to_double(linedir.dy()),
        CGAL_to_double(linedir.dz()),
        true, true
        );
}
@}



@$@<3D CD Line Box intersection implementation@>==@{
CGAL_Object
CGAL_intersection_bl(const CGAL_Bbox_3 &box,
        double lpx, double lpy, double lpz,
        double ldx, double ldy, double ldz,
        bool min_infinite, bool max_infinite)
{
    typedef CGAL_Cartesian<double> R_cd;
    CGAL_Point_3<R_cd> ref_point(lpx,lpy, lpz);
    CGAL_Vector_3<R_cd> dir(ldx, ldy, ldz);
    double seg_min = 0.0, seg_max = 1.0;
// first on x value
    if (dir.x() == 0.0) {
        if (ref_point.x() < box.xmin())
            return CGAL_Object();
        if (ref_point.x() > box.xmax())
            return CGAL_Object();
    } else {
        double newmin, newmax;
        if (dir.x() > 0.0) {
            newmin = (box.xmin()-ref_point.x())/dir.x();
            newmax = (box.xmax()-ref_point.x())/dir.x();
        } else {
            newmin = (box.xmax()-ref_point.x())/dir.x();
            newmax = (box.xmin()-ref_point.x())/dir.x();
        }
        if (min_infinite) {
            min_infinite = false;
            seg_min = newmin;
        } else {
            if (newmin > seg_min)
                seg_min = newmin;
        }
        if (max_infinite) {
            max_infinite = false;
            seg_max = newmax;
        } else {
            if (newmax < seg_max)
                seg_max = newmax;
        }
        if (seg_max < seg_min)
            return CGAL_Object();
    }
// now on y value
    if (dir.y() == 0.0) {
        if (ref_point.y() < box.ymin())
            return CGAL_Object();
        if (ref_point.y() > box.ymax())
            return CGAL_Object();
    } else {
        double newmin, newmax;
        if (dir.y() > 0.0) {
            newmin = (box.ymin()-ref_point.y())/dir.y();
            newmax = (box.ymax()-ref_point.y())/dir.y();
        } else {
            newmin = (box.ymax()-ref_point.y())/dir.y();
            newmax = (box.ymin()-ref_point.y())/dir.y();
        }
        if (min_infinite) {
            min_infinite = false;
            seg_min = newmin;
        } else {
            if (newmin > seg_min)
                seg_min = newmin;
        }
        if (max_infinite) {
            max_infinite = false;
            seg_max = newmax;
        } else {
            if (newmax < seg_max)
                seg_max = newmax;
        }
        if (seg_max < seg_min)
            return CGAL_Object();
    }
// now on z value
    if (dir.z() == 0.0) {
        if (ref_point.z() < box.zmin())
            return CGAL_Object();
        if (ref_point.z() > box.zmax())
            return CGAL_Object();
    } else {
        double newmin, newmax;
        if (dir.z() > 0.0) {
            newmin = (box.zmin()-ref_point.z())/dir.z();
            newmax = (box.zmax()-ref_point.z())/dir.z();
        } else {
            newmin = (box.zmax()-ref_point.z())/dir.z();
            newmax = (box.zmin()-ref_point.z())/dir.z();
        }
        if (min_infinite) {
            min_infinite = false;
            seg_min = newmin;
        } else {
            if (newmin > seg_min)
                seg_min = newmin;
        }
        if (max_infinite) {
            max_infinite = false;
            seg_max = newmax;
        } else {
            if (newmax < seg_max)
                seg_max = newmax;
        }
        if (seg_max < seg_min)
            return CGAL_Object();
    }
    if (min_infinite || max_infinite) {
        seg_max = 0.0;
        CGAL_kernel_assertion_msg(true,
            "Zero direction vector of line detected.");
    }
    if (seg_max == seg_min)
        return CGAL_make_object(ref_point + dir*seg_max);
    return CGAL_make_object(CGAL_Segment_3<R_cd>(
            ref_point + dir*seg_min, ref_point + dir*seg_max));
}
@}

@C@<Ray Box intersection@>

@$@<3D Ray Box intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Ray_3<R> &ray,
        const CGAL_Bbox_3 &box) ;

template <class R>
inline CGAL_Object
CGAL_intersection(const CGAL_Bbox_3 &box,
        const CGAL_Ray_3<R> &ray)
{
    return CGAL_intersection(ray, box);
}
@}


@D@<Implementation@>
Rays with a representation other than Cartesian double are transformed to
Cartesian double representation by transforming the coordinates of a point
of the ray and of the direction.

@$@<3D Ray Box intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Ray_3<R> &ray,
        const CGAL_Bbox_3 &box)
{
    const CGAL_Point_3<R> &linepoint = ray.source();
    const CGAL_Direction_3<R> &linedir = ray.direction();
    return CGAL_intersection_bl(box,
        CGAL_to_double(linepoint.x()),
        CGAL_to_double(linepoint.y()),
        CGAL_to_double(linepoint.z()),
        CGAL_to_double(linedir.dx()),
        CGAL_to_double(linedir.dy()),
        CGAL_to_double(linedir.dz()),
        false, true
        );
}
@}

@C@<Segment Box intersection@>

@$@<3D Segment Box intersection declarations@>==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Segment_3<R> &seg,
        const CGAL_Bbox_3 &box) ;

template <class R>
inline CGAL_Object
CGAL_intersection(const CGAL_Bbox_3 &box,
        const CGAL_Segment_3<R> &seg)
{
    return CGAL_intersection(seg, box);
}
@}


@D@<Implementation@>
Segments with a representation other than Cartesian double are transformed to
Cartesian double representation by transforming the coordinates of a point
of the segment and of the direction.

@$@<3D Segment Box intersection implementation@>==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Segment_3<R> &seg,
        const CGAL_Bbox_3 &box)
{
    const CGAL_Point_3<R> &linepoint = seg.source();
    const CGAL_Vector_3<R> &diffvec = seg.target()-linepoint;
    return CGAL_intersection_bl(box,
        CGAL_to_double(linepoint.x()),
        CGAL_to_double(linepoint.y()),
        CGAL_to_double(linepoint.z()),
        CGAL_to_double(diffvec.x()),
        CGAL_to_double(diffvec.y()),
        CGAL_to_double(diffvec.z()),
        false, false
        );
}
@}

@C@<Isobox Line intersection@>

@$@<3D Isobox Line intersection declarations@>@Z==@{

template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Line_3<R> &line,
        const CGAL_Iso_box_3 &box) ;

template <class R>
inline CGAL_Object
CGAL_intersection(const CGAL_Iso_box_3 &box,
        const CGAL_Line_3<R> &line)
{
    return CGAL_intersection(line, box);
}
@}


@D@<Implementation@>

@$@<3D Isobox Line intersection implementation@>@Z==@{
template <class R>
CGAL_Object
CGAL_intersection(const CGAL_Line_3<R> &line,
        const CGAL_Iso_box_3 &box)
{
    typedef CGAL_Line_2<R> line_t;
    typedef typename R::RT RT;
    typedef typename R::FT FT;
    bool all_values = true;
    CGAL_Point_3<R> const & _ref_point(line.point());
    CGAL_Vector_3<R> const & _dir(line.direction().vector());
    CGAL_Point_3<R> const & _iso_min(box.min());
    CGAL_Point_3<R> const & _iso_max(box.max());
    int i;
    for (i=0; i< _ref_point.dimension(); i++) {
        if (_dir.homogeneous(i) == RT(0)) {
            if (_ref_point.cartesian(i) < _isomin.cartesian(i)) {
                ncthis->_result = NO;
                return NO;
            }
            if (_ref_point.cartesian(i) > _isomax.cartesian(i)) {
                ncthis->_result = NO;
                return NO;
            }
        } else {
            FT newmin, newmax;
            if (_dir.homogeneous(i) > RT(0)) {
                newmin = (_isomin.cartesian(i) - _ref_point.cartesian(i)) /
                    _dir.cartesian(i);
                newmax = (_isomax.cartesian(i) - _ref_point.cartesian(i)) /
                    _dir.cartesian(i);
            } else {
                newmin = (_isomax.cartesian(i) - _ref_point.cartesian(i)) /
                    _dir.cartesian(i);
                newmax = (_isomin.cartesian(i) - _ref_point.cartesian(i)) /
                    _dir.cartesian(i);
            }
            if (all_values) {
                ncthis->_min = newmin;
                ncthis->_max = newmax;
            } else {
                if (newmin > _min)
                    ncthis->_min = newmin;
                if (newmax < _max)
                    ncthis->_max = newmax;
                if (_max < _min) {
                    ncthis->_result = NO;
                    return NO;
                }
            }
            all_values = false;
        }
    }
    CGAL_kernel_assertion(!all_values);
    if (_max == _min) {
        ncthis->_result = POINT;
        return POINT;
    }
    ncthis->_result = SEGMENT;
    return SEGMENT;
}
@}

@$@<declarations 1@>==@{
#ifndef CGAL_OBJECT_H
#include <CGAL/Object.h>
#endif // CGAL_OBJECT_H
#ifndef CGAL_BBOX_INTERSECTION_3_H
#include <CGAL/bbox_intersection_3.h>
#endif // CGAL_BBOX_INTERSECTION_3_H
@<3D Plane Plane intersection declarations@>
@<3D Line Plane intersection declarations@>
@<3D Ray Plane intersection declarations@>
@<3D Segment Plane intersection declarations@>
@<3D Line Box intersection declarations@>
@<3D Ray Box intersection declarations@>
@<3D Segment Box intersection declarations@>
@!@<3D Isobox Line intersection declarations@>
@}

@$@<outline definitions 1@>==@{
@<3D Plane Plane intersection implementation@>
@<3D Line Plane intersection implementation@>
@<3D Ray Plane intersection implementation@>
@<3D Segment Plane intersection implementation@>
@<3D Line Box intersection implementation@>
@<3D Ray Box intersection implementation@>
@<3D Segment Box intersection implementation@>
@!@<3D Isobox Line intersection implementation@>
@}


@O@<../include/CGAL/bbox_intersection_3.h@>==@{
@<CGAL_heading@>@(include/CGAL/bbox_intersection_3.h@,@-
web/intersection_3.fw@,@-
Geert-Jan Giezeman <geert@@cs.ruu.nl>@,@-
Saarbruecken@)

#ifndef CGAL_BBOX_INTERSECTION_3_H
#define CGAL_BBOX_INTERSECTION_3_H

#ifndef CGAL_BBOX_3_H
#include <CGAL/Bbox_3.h>
#endif // CGAL_BBOX_3_H
#ifndef CGAL_OBJECT_H
#include <CGAL/Object.h>
#endif // CGAL_OBJECT_H
@<3D CD Line Box intersection declarations@>
#endif // CGAL_BBOX_INTERSECTION_3_H
@}

@O@<../include/CGAL/intersection_3_1.h@>==@{@-
@<CGAL_heading@>@(include/CGAL/intersection_3_1.h@,@-
web/intersection_3.fw@,@-
Geert-Jan Giezeman <geert@@cs.ruu.nl>@,@-
Saarbruecken@)

#ifndef CGAL_INTERSECTION_3_1_H
#define CGAL_INTERSECTION_3_1_H


@<declarations 1@>


#ifdef CGAL_CFG_NO_AUTOMATIC_TEMPLATE_INCLUSION
#include <CGAL/intersection_3_1.C>
#endif

#endif // CGAL_INTERSECTION_3_1_H
@}

@O@<../include/CGAL/intersection_3_1.C@>==@{@-
@<CGAL_heading@>@(include/CGAL/intersection_3_1.C@,@-
web/intersection_3.fw@,@-
Geert-Jan Giezeman <geert@@cs.ruu.nl>@,@-
Saarbruecken@)

@<outline definitions 1@>
@}



@B@<All intersections@>

The following header file includes all other header files that define
intersections. This is a convenience for people who don't want to
remember which intersection header file to include and don't mind the extra
compilation time.


@O@<../include/CGAL/intersection_3.h@>==@{@-

@<CGAL_heading@>@(include/CGAL/intersection_3.h@,@-
web/intersection_3.fw@,@-
Geert-Jan Giezeman <geert@@cs.ruu.nl>@,@-
Saarbruecken@)

#ifndef CGAL_INTERSECTION_3_H
#define CGAL_INTERSECTION_3_H

#ifndef CGAL_INTERSECTION_3_1_H
#include <CGAL/intersection_3_1.h>
#endif // CGAL_INTERSECTION_3_1_H


#endif // CGAL_INTERSECTION_3_H
@}

@O@<../src/Bbox_3_intersections.C@>==@{@-
@<CGAL_heading@>@(src/Bbox_3_intersections.C@,@-
web/intersection_3.fw@,@-
Geert-Jan Giezeman <geert@@cs.ruu.nl>@,@-
Saarbruecken@)

#ifndef CGAL_CARTESIAN_H
#include <CGAL/Cartesian.h>
#endif // CGAL_CARTESIAN_H
#ifndef CGAL_POINT_3_H
#include <CGAL/Point_3.h>
#endif // CGAL_POINT_3_H
#ifndef CGAL_BBOX_INTERSECTION_3_H
#include <CGAL/bbox_intersection_3.h>
#endif // CGAL_BBOX_INTERSECTION_3_H
@<3D CD Line Box intersection implementation@>
@}
