% ======================================================================== 
%  CGAL reference manual indexing style file    
%
% ___________________________________________________________________________
% |#########################################################################|
% |                                                                         |
% | Latex Converter Style File: cc_manual_index.sty                         |
% | ------------------------------------------------------------------      |
% | Macros available with the cc_manual_dindex                      .       |
% |                                                                         |
% | 17.05.2000   Susan Hert   hert@mpi-sb.mpg.de                            |
% | Saarbruecken, Germany                                                   |
% | $Revision$                                                        |
% | $Date$                                            |
% |_________________________________________________________________________|

% ========================================================================
% Definitions of fonts for the different categories of non-C++ items 
% ========================================================================
\def\ccIndexAbbreviationFont{}
\def\ccIndexConceptFont{}
\def\ccIndexFunctionalityFont{}
\def\ccIndexDSFont{}
\def\ccIndexHintFont{}
\def\ccIndexLibraryFont{}
\def\ccIndexPackageFont{}
\def\ccIndexTermFont{}


\def\ccIndex{\ccTrue}%
\def\ccAutoIndex{\ccTrue}%
\def\ccIndexCrossRef{\ccTrue}%
\def\ccIndexModifierCrossRef{\ccTrue}%

% ========================================================================
% Text that is between a pair of ccIndexingOff and ccIndexingOn commands 
% will not produce any entries in the index, automatically or otherwise
% ========================================================================
\newcommand{\ccIndexingOff}{\def\ccIndex{\ccFalse}}%
\newcommand{\ccIndexingOn}{\def\ccIndex{\ccTrue}}%

% ========================================================================
% Text that is between a pair of ccAutoIndexingOff and ccAutoIndexingOn
% commands will not produce any entries in the index automatically. 
% You can do indexing manually, though, using any of the commands. 
% ========================================================================
\newcommand{\ccAutoIndexingOff}{\def\ccAutoIndex{\ccFalse}}%
\newcommand{\ccAutoIndexingOn}{\def\ccAutoIndex{\ccTrue}}%

% ========================================================================
% Text that is between a pair of ccModifierCrossRefOff and 
% ccModifierCrossRefOn commands will not produce cross referencing entries 
% automatically for main item text that contains a comma. 
% ========================================================================
\newcommand{\ccModifierCrossRefOff}{\def\ccIndexModifierCrossRef{\ccFalse}}%
\newcommand{\ccModifierCrossRefOn}{\def\ccIndexModifierCrossRef{\ccTrue}}%

% ========================================================================
% Text that is between a pair of ccNonmodifierCrossRefOff and
% ccNonmodifierCrossRefOn commands will produce cross referencing entries 
% automatically only for main item text that contains a comma. 
% ========================================================================
\newcommand{\ccNonmodifierCrossRefOff}{\def\ccIndexCrossRef{\ccFalse}}%
\newcommand{\ccNonmodifierCrossRefOn}{\def\ccIndexCrossRef{\ccTrue}}%

% ========================================================================
% Text that is between a pair of ccCrossRefOff and ccCrossRefOn commands
% will not produce ANY cross referencing entries automatically. 
% ========================================================================
\newcommand{\ccCrossRefOff}{\def\ccIndexModifierCrossRef{\ccFalse}%
                            \def\ccIndexCrossRef{\ccFalse}}%
\newcommand{\ccCrossRefOn}{\def\ccIndexModifierCrossRef{\ccTrue}%
                           \def\ccIndexCrossRef{\ccTrue}}%

% ------------------------------------------------------------------------
%  Commands needed for including indexing characters in the index
% ------------------------------------------------------------------------
\def\doubleVerticalBar{||}
\def\singleVerticalBar{|}
\def\verticalBarEqual{|=}
\def\doubleExclamation{!!}
\def\singleExclamation{!}
\def\doubleAmpersand{\&\&}
\def\singleAmpersand{\&}
\def\ampersandEqual{\&=}
\def\exclamationEqual{!=}
\def\singleAt{@}

% ========================================================================
%  Generic indexing macros
%
% The following 14 commands are generic commands for producing main items,
% subitems, and subsubitems in the index.  For each of these three types of 
% entries, there are four kinds of commands:
%
% 1. produce a single page number entry
% 2. begin an entry with a range of pages associated with it
% 3. end an entry with a range of pages associated with it
% 4. produce a definition entry (single page number in bold face type)
%
% There are also 2 commands, one for subitems and one for subsubitems,
%  for producing "see also <text>" entries 
%
% Each of these commands requires some number of arguments which supply
% the text to be used in indexing.  Main item commands require 1 argument; 
% subitem commands require 2 arguments (main item and subitem text); 
% subsubitem commands require 3 arguments (main item, subitem, and subsubitem
% text).  
%
% All 14 commands have an optional argument, which is the category of
% the main item being indexed.  The valid values for this category argument 
% are:
%      C -- for class or other C++ name 
%      c -- for concept 
%      d -- for data structure
%      f -- for functionality
%      h -- for hint
%      l -- for library
%      p -- for package
%      t -- for term
% The default value of this argument is empty, indicating an entry that
% does not fall into any of the established categories for the index.
% Depending on the category specified, the appropriate font will be used
% to format the main item text.  Fonts can also be supplied in the
% text arguments and these fonts override any font indicated by the
% category argument.
% ========================================================================


% ------------------------------------------------------------------------
%  Main item generic indexing macros
% ------------------------------------------------------------------------

%
% Usage:  \ccIndexMainItem[category]{item}
%
\newcommand{\ccIndexMainItem}[1]{%
}
\newcommand{\ccIndexMainItem@om}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText}%
%   \else%
%      \index{\mainText}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexMainItemBegin[category]{item with range}
%         ... <item description> ...
%         \ccIndexMainItemEnd[cateogry]{item with range}
%
\newcommand{\ccIndexMainItemBegin}[1]{%
}
\newcommand{\ccIndexMainItemBegin@om}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText|(}%
%   \else%
%      \index{\mainText|(}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}
\newcommand{\ccIndexMainItemEnd}[1]{%
}
\newcommand{\ccIndexMainItemEnd@om}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText|)}%
%   \else%
%      \index{\mainText|)}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexMainItemDef[category]{item}
%
\newcommand{\ccIndexMainItemDef}[1]{%
}
\newcommand{\ccIndexMainItemDef@om}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText|textbf}%
%   \else%
%      \index{\mainText|textbf}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

% ------------------------------------------------------------------------
%  Subitem generic indexing macros
% ------------------------------------------------------------------------

%
% Usage:  \ccIndexSubitem[category]{item}{subitem}
%
\newcommand{\ccIndexSubitem}[2]{%
}
\newcommand{\ccIndexSubitem@omm}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \subitemTextParse{#3}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText}%
%   \else%
%      \index{\mainText!\subitemText}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}


%
% Usage:  \ccIndexOperatorSubitem{item}{subitem}
%
\newcommand{\ccIndexOperatorSubitem}[2]{%
%   \ifnum\ccIndex=\ccTrue%
%   \subitemTextParse{#2}%
%   \ifnum\ccOperatorCat=\ccDoubleVerticalBar%
%      \index{#1@$\protect\doubleVerticalBar$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccSingleVerticalBar%
%      \index{#1@$\protect\singleVerticalBar$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccVerticalBarEqual%
%      \index{#1@$\protect\verticalBarEqual$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccDoubleExclamation%
%      \index{#1@$\protect\doubleExclamation$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccSingleExclamation%
%      \index{#1@$\protect\singleExclamation$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccSingleAmpersand%
%      \index{#1@$\protect\singleAmpersand$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccDoubleAmpersand%
%      \index{#1@$\protect\doubleAmpersand$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccAmpersandEqual%
%      \index{#1@$\protect\ampersandEqual$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccExclamationEqual%
%      \index{#1@$\protect\exclamationEqual$!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccSingleAt%
%      \index{#1@$\protect\singleAt$!\subitemText}%
%%
%%  the ~, % and ^ operators need a change in catcode in order to work properly
%%  so they are used with ccc.  ccc cannot be used for the other operands since
%%  the actual characters must not be put in the index (they have special
%%  meaning in the index) and ccc will expand its arguments.
%%
%   \else\ifnum\ccOperatorCat=\ccTildeOperator%  
%      \index{#1@\protect\ccc{#1}!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccModOperator%
%      \index{#1@\protect\ccc{#1}!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccModEqualOperator%
%      \index{#1@\protect\ccc{#1}!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccPowerOperator%
%      \index{#1@\protect\ccc{#1}!\subitemText}%
%   \else\ifnum\ccOperatorCat=\ccPowerEqualOperator%
%      \index{#1@\protect\ccc{#1}!\subitemText}%
%   \else
%      \index{#1@$#1$!\subitemText}%
%   \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
%   \fi%
}

%
% Usage:  \ccIndexSubitemBegin[category]{item}{subitem}
%         ... <subitem description> ...
%         \ccIndexSubitemEnd[category]{item}{subitem}
%
\newcommand{\ccIndexSubitemBegin}[2]{%
}
\newcommand{\ccIndexSubitemBegin@omm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText|(}%
%   \else%
%      \index{\mainText!\subitemText|(}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}
\newcommand{\ccIndexSubitemEnd}[2]{%
}
\newcommand{\ccIndexSubitemEnd@omm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText|)}%
%   \else%
%      \index{\mainText!\subitemText|)}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexSubitemDef[category]{item}{subitem}
%
\newcommand{\ccIndexSubitemDef}[2]{%
}
\newcommand{\ccIndexSubitemDef@omm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText|textbf}%
%   \else%
%      \index{\mainText!\subitemText|textbf}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexSubitemSeeAlso[category]{item}{subitem}
%
\newcommand{\ccIndexSubitemSeeAlso}[2]{%
}
\newcommand{\ccIndexSubitemSeeAlso@omm}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \subitemSeeAlsoTextParse{#3}%
%   \ifx\empty\mainSeeText%
%       \index{\mainText!\subitemSeeAlsoText|none}%
%   \else%
%       \index{\mainText!\subitemSeeAlsoText|none}%
%       \index{\mainSeeText}%
%   \fi%
%   \fi%
}

% ------------------------------------------------------------------------
%  Subsubitem generic indexing macros
% ------------------------------------------------------------------------


%
% Usage:  \ccIndexSubsubitem[category]{item}{subitem}{subsubitem}
%
\newcommand{\ccIndexSubsubitem}[3]{%
}
\newcommand{\ccIndexSubsubitem@ommm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%    \subsubitemTextParse{#4}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText!\subsubitemText}%
%   \else%
%      \index{\mainText!\subitemText!\subsubitemText}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexSubsubitemBegin[category]{item}{subitem}{subsubitem}
%          ... <subsubitem description> ...
%         \ccIndexSubsubitemEnd[category]{item}{subitem}{subsubitem}
%
\newcommand{\ccIndexSubsubitemBegin}[3]{%
}
\newcommand{\ccIndexSubsubitemBegin@ommm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%    \subsubitemTextParse{#4}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText!\subsubitemText|(}%
%   \else%
%      \index{\mainText!\subitemText!\subsubitemText|(}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}
\newcommand{\ccIndexSubsubitemEnd}[3]{%
}
\newcommand{\ccIndexSubsubitemEnd@ommm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%    \subsubitemTextParse{#4}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText!\subsubitemText|)}%
%   \else%
%      \index{\mainText!\subitemText!\subsubitemText|)}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexSubsubitemDef[category]{item}{subitem}{subsubitem}
%
\newcommand{\ccIndexSubsubitemDef}[3]{%
}
\newcommand{\ccIndexSubsubitemDef@ommm}{%
%   \ifnum\ccIndex=\ccTrue%
%    \mainTextParse{{#1}}{#2}%
%    \subitemTextParse{#3}%
%    \subsubitemTextParse{#4}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText!\subsubitemText|textbf}%
%   \else%
%      \index{\mainText!\subitemText!\subsubitemText|textbf}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

%
% Usage:  \ccIndexSubsubitemSeeAlso[category]{item}{subitem}{subsubitem}
%
\newcommand{\ccIndexSubsubitemSeeAlso}[3]{%
}
\newcommand{\ccIndexSubsubitemSeeAlso@ommm}{%
%   \ifnum\ccIndex=\ccTrue%
%   \mainTextParse{{#1}}{#2}%
%   \subitemTextParse{#3}%
%   \subsubitemSeeAlsoTextParse{#4}%
%   \ifx\empty\mainSeeText%
%      \index{\mainText!\subitemText!\subsubitemSeeAlsoText|none}%
%   \else%
%      \index{\mainText!\subitemText!\subsubitemSeeAlsoText|none}%
%      \index{\mainSeeText}%
%   \fi%
%   \fi%
}

% ========================================================================
%  Assertion flag macros
% ========================================================================

% 
%  Usage: \ccIndexAssertionFlagsUse
% 
\newcommand{\ccIndexAssertionFlagsUse}{%
%    \ifnum\ccIndex=\ccTrue%
%    \ccIndexMainItem{assertion flags}%
%    \fi%
}

%
% Usage: \ccIndexAssertionFlagName{flag_name}
%
\newcommand{\ccIndexAssertionFlagName}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%      \ccIndexMainItem[C]{#1}%
%    \fi%
}


% ========================================================================
%  Enums, enum tags, global structs, global variables, global constants
%  global functions, typedefs
% ========================================================================

% 
% Usage: \ccIndexEnum{enum}
% 
\newcommand{\ccIndexEnum}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}


%
% Usage: \ccIndexEnum{enum_tag}
%
\newcommand{\ccIndexEnumTag}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

%
% Usage: \ccIndexGlobalStruct{struct}
%
\newcommand{\ccIndexGlobalStruct}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

%
% Usage: \ccIndexGlobalVariable{variable}
%
\newcommand{\ccIndexGlobalVariable}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

%
% Usage: \ccIndexGlobalConstant{constant}
%
\newcommand{\ccIndexGlobalConstant}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

%
% Usage: \ccIndexMacro{macro_name}
%
\newcommand{\ccIndexMacro}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}


%
% Usage: \ccIndexGlobalFunction{function}
%
\newcommand{\ccIndexGlobalFunction}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

% Usage: \ccIndexGlobalFunctionBegin{function}
%        <function description>
%        \ccIndexGlobalFunctionEnd{function}
%
\newcommand{\ccIndexGlobalFunctionBegin}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItemBegin[C]{#1}%
%    \fi%
}

\newcommand{\ccIndexGlobalFunctionEnd}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItemEnd[C]{#1}%
%    \fi%
}

%
% Usage: \ccIndexGlobalOperator{operator}{class name}
%
% Note: operator must not contain one of the "special" index charcters.
%       In other words, it should have already passed through 
%       \escapeIndexOperatorSymbols
\newcommand{\ccIndexGlobalOperator}[2]{%
%    \ifnum\ccIndex=\ccTrue%
%       \ccIndexOperatorSubitem{#1}{\ccFont #2}%
%    \fi%
}

%
% Usage: \ccIndexTypedef{typedef}
%
\newcommand{\ccIndexTypedef}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexMainItem[C]{#1}%
%    \fi%
}

% ========================================================================
%  Member functions
% ========================================================================
%  
%  Usage: \ccIndexMemberFunction{function_name}
%  
\newcommand{\ccIndexMemberFunction}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexSubitem[C]{#1}{\ccFont \ccIndexClassName}%
%    \fi%
}

%
%  Usage: \ccIndexMemberFunctionBegin{function_name}
%         <member function description>
%         \ccIndexMemberFunctionEnd{function_name}
%  
\newcommand{\ccIndexMemberFunctionBegin}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexSubitemBegin[C]{#1}{\ccFont \ccIndexClassName}%
%    \fi%
}

\newcommand{\ccIndexMemberFunctionEnd}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexSubitemEnd[C]{#1}{\ccFont \ccIndexClassName}%
%    \fi%
}

% ========================================================================
%  Abbreviations
% ========================================================================
%
%  Usage: \ccIndexAbbreviation{abbr}{unabbreviated term}
%
\newcommand{\ccIndexAbbreviation}[2]{%
%    \ifnum\ccIndex=\ccTrue%
%       \mainTextParse{a}{#1}%
%       \index{\mainText|see{{#2}}} 
%       \ifnum\ccIndexCrossRef=\ccTrue%
%          \ccIndexMainItem{#2}%
%       \fi%
%    \fi
}

% ========================================================================
%  Hints as subitems and subsubitems
% ========================================================================

%
%  Usage: \ccIndexHintAsSubitem[category]{item}{hint}
%    where category is an optional argument with the following possible
%    values
%      C -- for class or other C++ name
%      c -- for concept
%      d -- for data structure
%      f -- for functionality
%      h -- for hint
%      l -- for library
%      p -- for package
%      t -- for term
% 
\newcommand{\ccIndexHintAsSubitem}[2]{%
}
\newcommand{\ccIndexHintAsSubitem@omm}{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexSubitem[#1]{#2}{\ccIndexHintFont #3}%
%    \fi%
}

% 
%  Usage: \ccIndexHintAsSubitem[category]{item}{subitem}{hint}
% 
\newcommand{\ccIndexHintAsSubsubitem}[3]{%
}
\newcommand{\ccIndexHintAsSubsubitem@ommm}{%
%    \ifnum\ccIndex=\ccTrue%
%     \ccIndexSubsubitem[#1]{#2}{#3}{\ccIndexHintFont #4}%
%    \fi%
}


% ========================================================================
%  Classes
% ========================================================================
\newcommand{\ccIndexClassName}{}%

% ------------------------------------------------------------------------
%  Environment to be used for indexing classes if the automatic indexing
%  doesn't do the right thing.
%
%
%  Usage: \begin{ccIndexClass}{class name}
%         ...<class description>...
%         \end{ccIndexClass}
%
% ------------------------------------------------------------------------
\newenvironment{ccIndexClass}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%    \isEmpty{#1}\ifnum\ccBool=\ccTrue%
%      \errmessage{The class name for indexing cannot be empty}
%    \else
%      \def\ccIndexClassName{#1}%
%      \ccIndexMainItemBegin[C]{\ccIndexClassName}%
%    \fi
%    \fi%
}
{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\isEmpty{\ccIndexClassName}\ifnum\ccBool=\ccFalse%
%        \ccIndexMainItemEnd[C]{\ccIndexClassName}%
%     \fi%
%    \fi%
}

% ========================================================================
%    These macros MUST be used inside either a ccClass, ccTemplateClass or
%    ccIndexClass environment since they employ the ccIndexClassName 
%    variable defined in these environments.
% ========================================================================
%
%  Usage: \ccIndexClassCreation
% 
\newcommand{\ccIndexClassCreation}{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue%
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%          \ccIndexSubitem[C]{\ccIndexClassName}{creation}%
%       \fi
%    \fi%
}

%
%  Usage: \ccIndexClassDefault
%
\newcommand{\ccIndexClassDefault}{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue%
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%          \ccIndexSubitem[C]{\ccIndexClassName}{default}%
%    \fi \fi%
}

%
%  Usage: \begin{ccIndexMemberFunctions}
%         ...<member function descriptions>
%         \end{IndexMemberFunctions}
%
\newenvironment{ccIndexMemberFunctions}{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue%
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%          \ccIndexSubitemBegin[C]{\ccIndexClassName}{member functions}%
%    \fi \fi%
}
{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccFalse
%        \ccIndexSubitemEnd[C]{\ccIndexClassName}{member functions}%
%    \fi \fi%
}

%
%  Usage: \ccIndexMemberFunctionGroup{group}
%
\newcommand{\ccIndexMemberFunctionGroup}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%          \ccIndexSubsubitem[C]{\ccIndexClassName}{member functions}{#1}%
%          \ifnum\ccIndexCrossRef=\ccTrue%
%             \ccIndexSubitem{#1}{\ccFont \ccIndexClassName}%
%          \fi%
%       \fi
%    \fi%
}

%
%  Usage: \ccIndexNestedClasses
%
\newcommand{\ccIndexNestedClasses}{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%           \ccIndexSubitem[C]{\ccIndexClassName}{nested classes}%
%       \fi
%    \fi%
}

%
%  Usage: \ccIndexClassTypes
%
\newcommand{\ccIndexClassTypes}{%
%    \ifnum\ccIndex=\ccTrue%
%       \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%       \ifnum\ccBool=\ccTrue
%          \errmessage{This command must be used inside a ccIndexClass, ccClass,
%                      or ccTemplateClass environment.  I'm going to ignore it}%
%       \else
%          \ccIndexSubitem[C]{\ccIndexClassName}{types}%
%       \fi
%    \fi%
}

% ========================================================================
%  Packages
% ========================================================================
\newcommand{\ccIndexPackageName}{}%

\newenvironment{ccPackage}[1]{%
%   \isEmpty{#1}\ifnum\ccBool=\ccTrue
%      \errmessage{Package name cannot be empty}
%   \else
%      \def\ccIndexPackageName{#1}%
%      \ccIndexMainItemBegin[p]{\ccIndexPackageName}%
%   \fi
}
{%
%    \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%    \ifnum\ccBool=\ccFalse
%       \ccIndexMainItemEnd[p]{\ccIndexPackageName}%
%       \def\ccIndexPackageName{}%
%    \fi
}%


% ========================================================================
%  Classes or Packages
%     These macros MUST be used inside either a ccClass, ccTemplateClass,
%     ccTraitsClass, ccTraitsClassTemplate, ccIndexClass, or ccPackage 
%     environment.  They check first for inclusion in a class environment 
%     and then for inclusion in a package environment and if you are in 
%     both, only the class entry will be generated.
% ========================================================================
%
%
%  Usage: \ccIndexAssertionFlag[package name]
%
\newcommand{\ccIndexAssertionFlag}{%
}
\newcommand{\ccIndexAssertionFlag@o}{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue %
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue 
%          \errmessage{You must be inside a package or a class  
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitem[p]{\ccIndexPackageName}{assertion flags}%
%           \ifnum\ccIndexCrossRef=\ccTrue
%              \ccIndexSubitem{assertion flags}{\ccIndexPackageName}%
%           \fi
%        \fi
%     \else
%        \isEmpty{#1}\ifnum\ccBool=\ccTrue
%           \errmessage{You must supply a package name for class \ccIndexClassName. I'm
%                       going to ignore this command}
%        \else
%           \ccIndexSubitem[C]{\ccIndexClassName}{assertion flags}%
%           \ifnum\ccIndexCrossRef=\ccTrue
%              \ccIndexSubitem{assertion flags}{#1}%
%           \fi
%        \fi
%     \fi%
%    \fi%
}

%
%  Usage: \ccIndexDesign
%
\newcommand{\ccIndexDesign}{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue%
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue 
%          \errmessage{You must be inside a package or class
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitem[p]{\ccIndexPackageName}{design}%
%        \fi
%     \else
%        \ccIndexSubitem[C]{\ccIndexClassName}{design}%
%     \fi%
%    \fi%
}

%
%  Usage: \begin{ccIndexGlobalFunctions}
%         ... <global function descriptions> ...
%         \end{ccIndexGlobalFunctions}
%
\newenvironment{ccIndexGlobalFunctions}{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue 
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue 
%          \errmessage{You must be inside a package or class  
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitemBegin[p]{\ccIndexPackageName}{global functions}%
%        \fi
%     \else
%        \ccIndexSubitemBegin[C]{\ccIndexClassName}{global functions}%
%     \fi%
%    \fi%
}
{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue 
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue 
%          \errmessage{You must be inside a package or class  
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitemEnd[p]{\ccIndexPackageName}{global functions}%
%        \fi
%     \else
%        \ccIndexSubitemEnd[C]{\ccIndexClassName}{global functions}%
%     \fi 
%    \fi%
}

%
%  Usage: \ccIndexGlobalFunctionGroup{group}
%
\newcommand{\ccIndexGlobalFunctionGroup}[1]{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue%
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue%
%          \errmessage{You must be inside a package or class 
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubsubitem[p]{\ccIndexPackageName}{global functions}{#1}%
%           \ifnum\ccIndexCrossRef=\ccTrue
%              \ccIndexSubitem{#1}{\ccIndexPackageFont \ccIndexPackageName}%
%           \fi
%        \fi
%     \else
%        \ccIndexSubsubitem[C]{\ccIndexClassName}{global functions}{#1}%
%        \ifnum\ccIndexCrossRef=\ccTrue
%           \ccIndexSubitem{#1}{\ccFont \ccIndexClassName}%
%        \fi 
%     \fi 
%    \fi%
}

%
%  Usage: \ccIndexImplementation
%
\newcommand{\ccIndexImplementation}{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%     \ifnum\ccBool=\ccTrue%
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue% 
%          \errmessage{You must be inside a package or class  
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitem[p]{\ccIndexPackageName}{implementaion}%
%        \fi
%     \else
%        \ccIndexSubitem[C]{\ccIndexClassName}{implementaion}%
%     \fi%
%    \fi%
}

%
%  Usage: \ccIndexRequirements
%
\newcommand{\ccIndexRequirements}{%
%    \ifnum\ccIndex=\ccTrue%
%     \expandafter\expandafter\isEmpty{\ccIndexClassName}%
%      \ifnum\ccBool=\ccTrue%
%        \expandafter\expandafter\isEmpty{\ccIndexPackageName}%
%        \ifnum\ccBool=\ccTrue% 
%          \errmessage{You must be inside a package or class  
%                      environment to use this command.  Go
%                      on and I'll ignore this command}
%        \else
%           \ccIndexSubitem[p]{\ccIndexPackageName}{requirements}%
%        \fi
%     \else
%        \ccIndexSubitem[C]{\ccIndexClassName}{requirements}%
%     \fi 
%    \fi%
}

% ------------------------------------------------------------------------
%  Traits classes associated with a class or package
% ------------------------------------------------------------------------

% #1 name of traits class
% #2 semicolon-separated list of associated classes
% #3 semicolon-separated list of associated packages
\newcommand\ccIndexTraitsClassBegin[3]{
%    \ifnum\ccIndex=\ccTrue%
%       \def\ccIndexClassName{#1}%
%       \ccIndexMainItemBegin[C]{\ccIndexClassName}%
%       \ifnum\ccIndexCrossRef=\ccTrue
%          \isEmpty{#2}\ifnum\ccBool=\ccFalse
%             \ccIndexTraitsClassForClasses{#2}
%          \fi
%          \isEmpty{#3}\ifnum\ccBool=\ccFalse
%              \ccIndexTraitsClassForPackages{#3}
%          \fi
%       \fi
%     \fi%
}
\newcommand\ccIndexTraitsClassEnd{
%    \ifnum\ccIndex=\ccTrue%
%       \ccIndexMainItemEnd[C]{\ccIndexClassName}%
%    \fi
%    \def\ccIndexClassName{}
}

\newcommand\ccIndexTraitsClassForClasses[1]{
%    \ccIndexTraitsClassForClassesX#1;/ccEnd%
}
%\def\ccIndexTraitsClassForClassesX#1;#2/ccEnd{
%    \ccIndexSubsubitemSeeAlso[C]{#1}{traits class}{\ccFont \ccIndexClassName}%
%    \isEmpty{#2}\ifnum\ccBool=\ccFalse
%      \ccIndexTraitsClassForClassesX #2/ccEnd%
%    \fi
%}

\newcommand\ccIndexTraitsClassForPackages[1]{
%    \ccIndexTraitsClassForPackagesX#1;/ccEnd%
}
%\def\ccIndexTraitsClassForPackagesX#1;#2/ccEnd{
%    \ccIndexSubsubitemSeeAlso[p]{#1}{traits class}{\ccFont \ccIndexClassName}%
%    \isEmpty{#2}\ifnum\ccBool=\ccFalse
%      \ccIndexTraitsClassForPackagesX #2/ccEnd%
%    \fi
%}

%
%  Usage: 
%  \ccIndexTraitsClassDefault[p_or_C]{associated package or class}
%
\newcommand{\ccIndexTraitsClassDefault}[1]{%
% here use C as the default value for the optional argument
}
\newcommand{\ccIndexTraitsClassDefault@om}{%
%    \ifnum\ccIndex=\ccTrue%
%        \isEmpty{#2}\ifnum\ccBool=\ccTrue
%           \errmessage{Associated package or class name empty.  
%                       I'm going to ignore this command}
%        \else
%           \ccIndexSubsubitem[#1]{#2}{traits class}{default}%
%    \fi \fi
}

%
%  Usage: 
%  \ccIndexTraitsClassRequirements[p_or_C]{associated package or class}
%
\newcommand{\ccIndexTraitsClassRequirements}[1]{%
% here use C as the default value for the optional argument
}
\newcommand{\ccIndexTraitsClassRequirements@om}{%
%    \ifnum\ccIndex=\ccTrue%
%        \isEmpty{#2}\ifnum\ccBool=\ccTrue
%           \errmessage{Associated package or class name empty.  
%                       I'm going to ignore this command}
%        \else
%           \ccIndexSubsubitem[#1]{#2}{traits class}{requirements}%
%    \fi \fi
}

% ___________________________________________________________________________
% ###########################################################################
% | EOF
% ###########################################################################

