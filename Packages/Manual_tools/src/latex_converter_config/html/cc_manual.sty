% ___________________________________________________________________________
% |#########################################################################|
% |                                                                         |
% | Latex Converter Style File: cc_manual.sty                               |
% | ------------------------------------------------------------------      |
% | Macros available with the cc_manual Style for formatting manuals.       |
% |                                                                         |
% | 24.07.1998   Lutz Kettner   kettner@acm.org                             |
% | Zurich, Switzerland                                                     |
% | $Revision$                                                       |
% | $Date$                                            |
% |_________________________________________________________________________|
% |#########################################################################|
% |                                                                         |
% | Table of Contents:                                                      |
% |                                                                         |
% |   o   Page Layout and Page Dimensions                                   |
% |   o   Advanced Customization of the Layout                              |
% |   o   Common Abbreviations                                              |
% |   o   Structuring Macros                                                |
% |   o   C++ Declarations                                                  |
% |   o   Reference Page Declarations                                       |
% |   o   Class and Class Member Declarations                               |
% |   o   Global C++ Declarations                                           |
% |   o   HTML Language Support in the Style File                           |
% |                                                                         |
% |#########################################################################|


\newcommand{\ccFalse}{\lcFalse}
\newcommand{\ccTrue}{\lcTrue}
\newcommand{\ccAuto}{\lcAuto}



% ###########################################################################
% |
% |   o   Link User <--> Reference
% |
% ###########################################################################


\newcommand{\lciIfRef}{\ccFalse}


\newcommand{\ccUserChapter}[2]{
 \gdef{\lciIfRef}{\ccTrue} 
 \chapter{#1} \lcRawHtml{ <TD ALIGN=RIGHT VALIGN=TOP>}
 \lcHtml{\ref{#2}} \lcRawHtml{ Reference Manual</TD> </TR> </TABLE> }
 \gdef{\lciIfRef}{\ccFalse}
}

\newcommand{\ccRefChapter}[2]{ 
 \gdef{\lciIfRef}{\ccTrue} 
 \chapter{#1} \lcRawHtml{ <TD ALIGN=RIGHT VALIGN=TOP > } 
 \lcHtml{\ref{#2}} \lcRawHtml{  User Manual</TD> </TR> </TABLE> }
 \gdef{\lciIfRef}{\ccFalse}
}




% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Page Layout and Page Dimensions
% |
% ###########################################################################

\newcommand{\ccwIndent}{}
\newcommand{\ccwRightMargin}{}
\newcommand{\ccwFirst}{}
\newcommand{\ccwFirstLong}{}
\newcommand{\ccwSecond}{}
\newcommand{\ccwSecondLong}{}
\newcommand{\ccwComment}{}
\newcommand{\ccwBetween}{}
\newcommand{\ccwParam}{}
\newcommand{\ccwParamIndent}{}
\newcommand{\ccwAdditionalReturnSkip}{}
\newcommand{\ccwAdditionalMiddleSkip}{}

\newcommand{\ccwFunctionFirst}{}
\newcommand{\ccwFunctionSecond}{}
\newcommand{\ccwConstructorFirst}{}
\newcommand{\ccwConstructorSecond}{}
\newcommand{\ccSaveThreeColumns}{}
\newcommand{\ccRestoreThreeColumns}{}
\newcommand{\ccSaveTwoColumns}{}
\newcommand{\ccRestoreTwoColumns}{}

\newcommand{\ccOriginalParDims}{}
\newcommand{\ccParDims}{}

\newcommand{\ccInitWidths}{}
\newcommand{\ccInitFunctionWidths}{}
\newcommand{\ccInitConstructorWidths}{}

\newcommand{\ccTopSkip}{\smallskip}
\newcommand{\ccBottomSkip}{\par\smallskip}
\newcommand{\ccBottomBigSkip}{\par\bigskip}

\newcommand{\ccReverseTopSkip}{}
\newcommand{\ccReturnSkip}{\par}
\newcommand{\ccMiddleSkip}{\par}
\newcommand{\ccReverseBottomSkip}{}
\newcommand{\ccReverseBottomBigSkip}{}

\newcommand{\ccGlueDeclarations}{\lcRawHtml{<!GLUE>}}
\newcommand{\ccGlueBegin}{\newcommand{\lciIfGlueEnvironment}{\lcTrue}%
    \newcommand{\lciGlueEnvironmentElement}{}}
\newcommand{\ccGlueEnd}{\newcommand{\lciIfGlueEnvironment}{\lcFalse}}

\newcommand{\lciIfGlueEnvironment}{\lcFalse}
\newcommand{\lciGlueEnvironmentElement}{}

\newcommand{\lciGluePostProcessing}{\lciIfGlueEnvironment
  {\lciGlueEnvironmentElement\newcommand{\lciGlueEnvironmentElement}{\ccGlue}}
  {}}

% abbreviations
\newcommand{\ccGlue}{\ccGlueDeclarations}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Advanced Customization of the Layout
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | Customization tags for the style: here are the defaults defined.
% +--------------------------------------------------------------------------

\newcommand{\ccTagDefaults}{%
    \def\ccTagChapterAuthor{\ccFalse}%
    \def\ccTagChapterRelease{\ccFalse}%
    \def\ccTagReplacePrefix{\ccFalse}%
    \def\ccTagReplaceInclude{\ccFalse}%
    \def\ccLongParamLayout{\ccFalse}%
    % Declaration Layout tags
    \def\ccTagRmTrailingConst{\ccTrue}%
    \def\ccTagRmEigenClassName{\ccTrue}%
    \def\ccTagRmConstRefPair{\ccTrue}%
    \def\ccTagOperatorLayout{\ccTrue}%
    \def\ccTagRmTemplate{\ccFalse}%
    \def\ccTagTemplateInline{\ccFalse}%
    % portability namings
    \def\ccAlternateThreeColumn{\ccTrue}%
}

\newcommand{\ccTagFullDeclarations}{%
    \def\ccTagRmTrailingConst{\ccFalse}%
    \def\ccTagRmEigenClassName{\ccFalse}%
    \def\ccTagRmConstRefPair{\ccFalse}%
    \def\ccTagOperatorLayout{\ccFalse}%
    \def\ccTagRmTemplate{\ccFalse}%
}
\ccTagDefaults

% +--------------------------------------------------------------------------
% | Customization of the three columns or two columns layout
% +--------------------------------------------------------------------------
\newcommand{\ccSetTwoOfThreeColumns}[2]{}

\newcommand{\ccSetThreeColumns}[3]{}
\newcommand{\ccSetOneOfTwoColumns}[1]{}
\newcommand{\ccSetTwoColumns}[2]{}
\newcommand{\ccPropagateThreeToTwoColumns}{}

% abbreviations
\newcommand{\ccThree}{\ccSetThreeColumns}
\newcommand{\ccTwo}[2]{}
\newcommand{\ccThreeToTwo}{\ccPropagateThreeToTwoColumns}

% +--------------------------------------------------------------------------
% | \ccMakeAllVisible:
% | The invisible declarational parts in the manual that are written
% | with \ccDeclaration and \lciidden are made visible with this macro.
% +--------------------------------------------------------------------------
% If these non visible parts of the code should be made visible once,
% the following macro switches it on.
\newcommand{\ccMakeAllVisible}{%
    \renewcommand{\ccDeclaration}{\ccStyle}%
    \renewcommand{\lciidden}{}%
}

% +--------------------------------------------------------------------------
% | Formatting styles:
% |
% | The style of the C++ formatting can be customized by redefining the 
% | following macros. But not in the latex converter, sorry.
% +--------------------------------------------------------------------------
\newcommand{\ccFont}{\it}   % font or style changing command in which all C++
                        % tokens will be typeset, including the variable names.
\newcommand{\ccEndFont}{\/} % will be used after a C++ text. For slanted fonts,
                        % here should stay \/ macro. The C++ code will be
                        % grouped, so this macros has not to restore the old
                        % font.

% The special characters in typical C++ declarations:
\newcommand{\ccOpenAngle }{\ccEndFont {\tt <}}
\newcommand{\ccCloseAngle}{\ccEndFont {\tt >}}
\newcommand{\ccAmpersand }{\ccEndFont {\tt \&}}
\newcommand{\ccUnderscore}{\_}
\newcommand{\ccHat       }{\lcAsciiToHtml{^}}
\newcommand{\ccTilde     }{\lcRawHtml{~}}
\newcommand{\ccHash      }{{\rm \#}}
\newcommand{\ccDollar    }{\$}

% +--------------------------------------------------------------------------
% | Replacement of Prefixes, not supported in HTML
% | 
% | \ccSrcPrefix     contains the old prefix
% | \ccTargetPrefix  contains the new prefix
% | 
% | \ccReplacePrefix #1#2  replaces all prefixes in #1 and applies #2 to
% |                        the partial results that have to be terminated
% |                        by \ccEnd.
% +--------------------------------------------------------------------------
\gdef\ccSrcPrefix{CGAL}
\gdef\ccTargetPrefix{CGAL}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Common Abbreviations
% |
% ###########################################################################

% +--------------------------------------------------------------------------
% | A handy macro to include files in verbatim mode.
% +--------------------------------------------------------------------------
\newcommand{\ccIncludeVerbatim}[1]{\lciParseFile{\lciLocalVerbatim}{#1}}

% +--------------------------------------------------------------------------
% | C++ Program Examples
% +--------------------------------------------------------------------------
% Environment to format contents as C++ code
\newenvironment{ccExampleCode}{%
    \lciParseUntilEndToken{\lciLocalVerbatim}{ccExampleCode}}{}

% Format exernal file:  #1  the file name.
\newcommand{\ccIncludeExampleCode}[1]{\ccIncludeVerbatim{#1}}

% +--------------------------------------------------------------------------
% | A handy macro to define macros for RCS entries in a TeX file
% +--------------------------------------------------------------------------
% --> see latex_to_html.sty

% +--------------------------------------------------------------------------
% | Original LEDA Manual macros (shortcuts):
% | Several new shortcuts for CGAL
% |
% | \CC, \gcc, \nat, \real, \boxit
% | \leda, \cgal, \protocgal, \plageo
% +--------------------------------------------------------------------------
% selfmade
\newcommand{\CC}{C++}
\newcommand{\gcc}{g++}
\newcommand{\nat}{{\mathbb N}}
\newcommand{\real}{{\mathbb R}}
\newcommand{\R}{{\mathbb R}}  %% zusammen mit usepackage{amssymb}
\newcommand{\N}{{\mathbb N}}  %% zusammen mit usepackage{amssymb}
\newcommand{\Z}{{\mathbb Z}}  %% zusammen mit usepackage{amssymb}
\newcommand{\Q}{{\mathbb Q}}  %% zusammen mit usepackage{amssymb}
\newcommand{\E}{{\mathbb E}}  %% zusammen mit usepackage{amssymb}

%\newcommand{\stl}{STL}
%\newcommand{\leda}{LEDA}
%\newcommand{\cgal}{CGAL}
%\newcommand{\protocgal}{C++GAL}
%\newcommand{\plageo}{PLAGEO}

\newcommand{\stl}{{\sc STL}}
\newcommand{\leda}{{\sc Leda}}
\newcommand{\cgal}{{\sc Cgal}}
\newcommand{\galia}{{\sc Galia}}
\newcommand{\protocgal}{{\sc C++gal}}
\newcommand{\plageo}{{\sc Plageo}}

% +--------------------------------------------------------------------------
% | Macros that write the special characters \{} literally to the
% | output stream. 
% |
% | \ccOpenBrace, \ccCloseBrace, \ccBackslash
% +--------------------------------------------------------------------------
\newcommand{\ccBackslash}{\lciBackslash}%
\newcommand{\ccOpenBrace}{\lciOpenBrace}%
\newcommand{\ccCloseBrace}{\lciCloseBrace}%

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Structuring Macros
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | Structuring macros (similar to LEDA Manual):
% |
% | \ccSection, \definition, \constants, \types, \creation, \operations, 
% | \implementation, \example, \precond, \postcond, 
% | \ccChapterAuthor, \ccChapterRelease, \ccChapterSubTitle
% +--------------------------------------------------------------------------

\newcommand{\ccMultiplePartsToc}{\gdef{\lciIfMultipleParts}{\lcTrue}}

\newcommand{\ccChapterSubTitle}[1]{\lcRawHtml{<EM>}#1\lcRawHtml{</EM>}}
\newcommand{\ccChapterAuthor}[1]{\lciIf{\ccTagChapterAuthor}
    {\ccChapterSubTitle{#1}}{}}
\newcommand{\ccChapterRelease}[1]{\lciIf{\ccTagChapterRelease}
    {\ccChapterSubTitle{#1}}{}}


\newcommand{\ccSection}[1]{\lcRawHtml{
<H2>}#1 (\ccClassName)\lcRawHtml{</H2>
}}

\newcommand{\ccSubsection}[1]{\lcRawHtml{
<H3>}#1 (\ccClassName)\lcRawHtml{</H3>
}}


\newcommand{\ccHeading}[1]{\lcRawHtml{<H3>}#1\lcRawHtml{</H3>}}
\newcommand{\ccCommentHeading}[1]{\lcRawHtml{<BR><EM>}#1: \lcRawHtml{</EM>}}

\newcommand{\ccDefinition     }{\ccHeading{Definition}}
\newcommand{\ccIsModel        }{\ccHeading{Is Model for the Concept}}
\newcommand{\ccInheritsFrom   }{\ccHeading{Inherits From}}
\newcommand{\ccRequirements   }{\ccHeading{Requirements}}
\newcommand{\ccParameters     }{\ccHeading{Parameters}}
\newcommand{\ccConstants      }{\ccHeading{Constants}}
\newcommand{\ccTypes          }{\ccHeading{Types}}
\newcommand{\ccCreation       }{\ccHeading{Creation}}
\newcommand{\ccOperations     }{\ccHeading{Operations}}
\newcommand{\ccQueryFunctions }{\ccHeading{Query Functions}}
\newcommand{\ccAccessFunctions}{\ccHeading{Access Functions}}
\newcommand{\ccPredicates     }{\ccHeading{Predicates}}
\newcommand{\ccModifiers      }{\ccHeading{Modifiers}}
\newcommand{\ccHasModels      }{\ccHeading{Has Models}}
\newcommand{\ccGeneralizes    }{\ccHeading{Generalizes}}
\newcommand{\ccRefines        }{\ccHeading{Refines}}
\newcommand{\ccSeeAlso        }{\ccHeading{See Also}}
\newcommand{\ccImplementation }{\ccHeading{Implementation}}
\newcommand{\ccExample        }{\ccHeading{Example}}

\newcommand{\ccInclude}[1]{\lcRawHtml{<I>##include &lt;}%
    \lciIfDefined{\lciHeaderPath}%
    {\lcRawHtml{<A HREF="}\newcommand{\lciDefLocalHtmlName}[1]{%
        \newcommand{\lciLocalHtmlName}{\lcAsciiToHtml{##X1}}}%
      \lciDefLocalHtmlName\lciHeaderPath\lciLocalHtmlName%
      \lcAsciiToHtml{#C1}\lcRawHtml{">}\lcAsciiToHtml{#C1}\lcRawHtml{</A>}}%
    {\ccHtmlNoLinks\lcAsciiToHtml{#C1}\gdef{\lciIfHtmlLinks}{\lcTrue}}%
    \lcRawHtml{&gt;</I>}%

}

\newcommand{\ccPrecond  }{\ccCommentHeading{Precondition}}
\newcommand{\ccPostcond }{\ccCommentHeading{Postcondition}}
\newcommand{\ccRequire }{\ccCommentHeading{Requirement}}


% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   C++ Declarations
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | \ccStyle
% +--------------------------------------------------------------------------
\newcommand{\ccc}{\lciParseCC{\lciCCStyle 1}}  %% the 1 is a dummy to keep it
                                               %% from parsing spaces
\newcommand{\ccStyle}{\ccc}

% +--------------------------------------------------------------------------
% | \ccDeclaration, \ccHidden, \ccUnchecked
% +--------------------------------------------------------------------------
% A \declaration accepts one parameter. The style will ignore it, while
% the checker tests if it exists one to one in the C++ code.
% It is intended for declarations that are somehow implied by the
% surrounded text, but should not be explicitly visible.
\newcommand{\ccDeclaration}[1]{}

% A \hidden macro can be prepended to each macro with two parameters.
% It will remove the macro and its parameters from the manual.
% Again, the checker tests the macro as usual.
\newcommand{\ccHidden}[3]{}

% An \ccUnchecked macro expands to nothing. It is used by the checker tool
% where it denotes that the following declarations is not subject of any
% check.
\newcommand{\ccUnchecked}{}

% +--------------------------------------------------------------------------
% | \lciIfGlobal for global declarations
% +--------------------------------------------------------------------------
\newcommand{\lciIfGlobal}{\lcFalse}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Reference Page Declarations
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | \begin{ccRefDeclaration} ...ccRefConcept, ...ccRefFunctionObjectConcept
% | ...ccRefClass, ...ccRefFunctionObjectClass, ...ccRefEnum
% | ...ccRefFunction, ...ccRefVariable, ...ccRefMacro,
% | \ccRefName
% +--------------------------------------------------------------------------

% have a counter for reference pages per chapter, used for 
% forward and backward linking between reference pages.
\newcounter{referencepage}[chapter]
\gdef{\thereferencepage}{%
    \lciCounterpart\_\lciCounterchapter\_\lciCounterreferencepage}


% open and close a new file for reference pages and classes
% Is between section and subsection
% Args: <filename>, <text referring to new file>
\newenvironment{ccReferenceFile}{%
    \lciEndSubsection
    \lciPushFootnotes
    \lciParseCC{\ccReferenceFileCont}%
}{%
    \lciEndSubsection
    \lciPrintFootnotes
    \lciPopFootnotes
    % navigation footer
    \addtocounter{referencepage}{1}%
    \lcRawHtml{<!Next_reference_link_}\thereferencepage\lcRawHtml{!>
}
    \addtocounter{referencepage}{-1}%
    \lciHtmlNavigationBottom
    \lciHtmlFileFooter
    \lciCloseReferenceFile
}
% Args: <text referring to new file>: cc_text contains filename
\newcommand{\ccReferenceFileCont}[1]{%
    \lciStoreFileName
    \refstepcounter{referencepage}%
    % Make a hyperlink in the chapter to the class file.
    \lcRawHtml{<UL><LI>
<!Toc_reference_link_}\thereferencepage\lcRawHtml{!></UL>

}
    \lciOpenReferenceFile
    % cross linking rules
    \lciPushOutput{anchor}%
    \lcRawHtml{"<!Next_reference_link_}\thereferencepage
    \lcRawHtml{!>"    }\{%
    \lcRawHtml{ fputs( "<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"}%
    \lcRawHtmlExpanded{\lciReplaceWithCurrentPathToken}%
    \lcRawHtmlExpanded{\lciOutputBasename}%
    \lcRawHtml{\">}#1\lcRawHtml{</a> \n", stdout);}\}\lcRawHtml{
}%
    \lcRawHtml{"<!Toc_reference_link_}\thereferencepage%
    \lcRawHtml{!>"    }\{\lcRawHtml{ fputs( "<a href=\"}%
    \lcRawHtmlExpanded{\lciReplaceWithCurrentPathToken}%
    \lcRawHtmlExpanded{\lciOutputBasename}%
    \lcRawHtml{\">}#1\lcRawHtml{</a>", stdout);}\}\lcRawHtml{
}%
    \lciPopOutput
    % file header
    \lciHtmlFileHeader{\ccReferenceFileContX #X1}%
    \lciHtmlNavigationTop
    %\lciHtmlReferenceToc{\thereferencepage}{#1}%
    %\lciHtmlReferenceHeader{#1}%   
}
% skips a leading \ccc command, useful for formatted title from reference pages
\newcommand{\ccReferenceFileContX}[1]{%
  \lciIfEqual{#1}{\lciParseCC}{\ccReferenceFileContXX}{#1}}
\newcommand{\ccReferenceFileContXX}[1]{\lcAsciiToHtml}

% make the new manual style parameterized.
\newcommand{\ccNewRefManualStyle}{}   % false -> old style, true -> new style
\gdef\ccNewRefManualStyle{\ccFalse}

\newcommand{\ccIsFunctionObjectClass}{}
\gdef\ccIsFunctionObjectClass{\ccFalse}
\newcommand{\ccIsFunctionObjectConcept}{}
\gdef\ccIsFunctionObjectConcept{\ccFalse}
\gdef\ccIsRefFunction{\ccFalse}

\newcommand{\ccRefPageBegin}{}
\newcommand{\ccRefPageEnd}{}

% predeclare variable names
\newcommand{\ccGlobalScope}{}
\newcommand{\ccPureGlobalScope}{}
\newcommand{\ccRefScope}{}
\newcommand{\ccPureRefScope}{}
\newcommand{\ccRefCategory}{}
\newcommand{\ccRefName}{}
\newcommand{\ccPureRefName}{}
% needed for compliance with ccClass, e.g. used for removal of eigen-name.
\newcommand{\ccClassTemplateName}{}
\newcommand{\ccPureClassTemplateName}{}

% #1 == global scope used in ref-page section title 
\newcommand{\ccDefGlobalScope}[1]{%
                   \gdef\ccPureGlobalScope{#1}%
                   \gdef\ccGlobalScope{\ccc{#1}}%
}

% #1 == token describing the category (Concept, Class ...)
\newenvironment{ccRefDeclaration}[1]{%
                   \def\ccRefCategory{#C1}%
                   \def\ccPureRefScope{}%
                   \def\ccRefScope{}%
                   \lciParseCC{\lciRefDeclCont}%
               }{
                   \ccRefPageEnd
                   \end{ccReferenceFile}%
                   \gdef{\lciIfHtmlClassNotInline}{\lcTrue}%
                   \def\ccRefCategory{}%
                   \def\ccPureRefScope{}%
                   \def\ccRefScope{}%
                   \def\ccPureRefName{}%
                   \gdef{\ccIndexClassName}{}%
                   \renewcommand{\ccRefName}{}%
                   % needed for compliance with ccClass
                   \def\ccPureClassTemplateName{}%
                   \renewcommand{\ccClassTemplateName}{}%
                   \def\ccPureVar{}%
                   \renewcommand{\ccVar}{}%
                   \lciCacheClassName % empties cached class_name 
                   \gdef{\lciIfHtmlClassToc}{\lcTrue}%
                   \gdef{\lciIfHtmlClassLinks}{\lcTrue}%
                   \gdef{\lciIfHtmlClassIndex}{\lcTrue}%
                   \gdef{\lciIfHtmlRefLinks}{\lcTrue}%
                   \gdef{\lciIfHtmlRefIndex}{\lcTrue}%
               }

\newcommand{\begin@ccRefDeclaration@mo}{%
                   \def\ccRefCategory{#C1}%
                   \def\ccPureRefScope{#C2}%
                   \def\ccRefScope{\ccc{#C2}}%
                   \lciParseCC{\lciRefDeclCont}%
               }

\newcommand{\lciRefDeclCont}{\lciRefDeclContX\ccPureRefScope\lciCCParameter}
\newcommand{\lciRefDeclContX}[2]{%
                   \def\ccPureRefName{#XC1#XC2}%
                   \renewcommand{\ccRefName}{\ccc{#XC1#XC2}}%
                   % needed for compliance with ccClass
                   \def\ccPureClassTemplateName{#XC1#XC2}%
                   \renewcommand{\ccClassTemplateName}{\ccc{#XC1#XC2}}%
                   \lciParseUntilDelimiter{\lciRefDeclDefFilename}<#XC2<@%
                   \ccRefPageBegin
                   \ccRefSection{\ccRefCategory}{\ccPureRefName}%
                   \lciCacheClassName
               }

% #1 = classname (functioname etc.) without template parameters
\newcommand{\lciRefDeclDefFilename}[1]{%
    \lciRefDeclDefFilenameX{\ccPureRefScope}{#1}{\ccRefCategory}%
      {\ccRefPureGlobalScope}}

% #1 = local scope (may be empty)
% #2 = classname (functioname etc.) without template parameters
% #3 = Ref category
% #4 = global scope (may be empty)
\newcommand{\lciRefDeclDefFilenameX}[4]{%
    \newcommand{\ccPureClassName}{#XC1#C2}%
    \newcommand{\ccClassName}{\ccc{#XC1#C2}}%
    \gdef{\ccIndexClassName}{\ccClassName}%
    \newcommand{\ccRefFilename}{#XC1#C2}%
    \gdef{\lciIfHtmlClassNotInline}{\lcFalse}%
    \gdef{\lciIfHtmlClassToc}{\lcFalse}%
    \lciRefDeclOpenFilenameX{#GXC3_#GXC1#GC2}{\lciHtmlSuffix}{\ccRefName}%
    \lciIfHtmlClassLinks{\ccHtmlCrossLink{#GXC4#GXC1#GC2}}{}% 
    \ccIndexRefName{#1}{\ccc{#2}}{#3}%
    \gdef{\lciIfHtmlClassLinks}{\lcFalse}%
    \gdef{\lciIfHtmlClassIndex}{\lcFalse}%
    \gdef{\lciIfHtmlRefLinks}{\lcFalse}%
    \gdef{\lciIfHtmlRefIndex}{\lcFalse}%
    \lciParseUntilDelimiter{\lciSkipOneParameter}@}% skip remaining part
\newcommand{\lciRefDeclOpenFilenameX}[3]{\begin{ccReferenceFile}{#1#GXC2}{#3}}

%% Args: ccCategory, ccRefName
\newcommand{\ccRefSection}[2]{%
    \lciIf{\ccNewRefManualStyle}{\lcDrawRefTabs{#1}{#2}}{}
    \ccRefSectionX{\ccRefPureGlobalScope}{#C2}
}

%% Args: ccRefPureGlobalScope, ccRefName (which should include any local scope)
\newcommand{\ccRefSectionX}[2]{%
    %%\section*{\lcAsciiToHtml{#XC1#XC2#XC3}}
    \label{ccRef_#XC1#XC2}\lciHtmlReferenceHeader{%
      \lciIf{\ccNewRefManualStyle}{}{%
      \lciIf{\ccIsFunctionObjectClass}{Function Object Class }{%
      \lciIf{\ccIsFunctionObjectConcept}{Function Object Concept }{%
      \ccRefCategory~}}}%
      \ccc{#XC1#XC2}}}

%% #1 == ccCategory
%% #2 == ccRefName
\newcommand{\lcDrawRefTabs}[2]{%
    \lcRawHtml{<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_#XC1.gif">}%
    \lcRawHtml{</TD></TR></TABLE>
}
}

\newenvironment{ccRefConcept}{%
                   \gdef\ccRefPureGlobalScope{}%
                   \begin{ccRefDeclaration}{Concept}}{\end{ccRefDeclaration}}

\newenvironment{ccRefClass}{%
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \begin{ccRefDeclaration}{Class}}{\end{ccRefDeclaration}}

\newenvironment{ccRefEnum}{%
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \begin{ccRefDeclaration}{Enum}}{\end{ccRefDeclaration}}

\newenvironment{ccRefFunction}{%
                   \gdef\ccIsRefFunction{\lcTrue}% 
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \begin{ccRefDeclaration}{Function}}%
                   {\gdef\ccIsRefFunction{\lcFalse}% 
                   \end{ccRefDeclaration}}

\newenvironment{ccRefFunctionObjectConcept}{%
                   \gdef\ccRefPureGlobalScope{}%
                   \gdef\ccIsFunctionObjectConcept{\ccTrue}%
                   \begin{ccRefDeclaration}{FunctionObjectConcept}}%
               {\gdef\ccIsFunctionObjectConcept{\ccFalse}\end{ccRefDeclaration}}

\newenvironment{ccRefFunctionObjectClass}{%
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \gdef\ccIsFunctionObjectClass{\ccTrue}%
                   \begin{ccRefDeclaration}{FunctionObjectClass}}%
               {\gdef\ccIsFunctionObjectClass{\ccFalse}\end{ccRefDeclaration}}

\newenvironment{ccRefVariable}{%
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \begin{ccRefDeclaration}{Variable}}{\end{ccRefDeclaration}}

\newenvironment{ccRefConstant}{%
                   \gdef\ccRefPureGlobalScope{\ccPureGlobalScope}%
                   \begin{ccRefDeclaration}{Constant}}{\end{ccRefDeclaration}}

\newenvironment{ccRefMacro}{%
                   \gdef\ccRefPureGlobalScope{}%
                   \begin{ccRefDeclaration}{Macro}}{\end{ccRefDeclaration}}

\newcommand{\ccRefPage}{\lciParseCC{\lciRefDummyX}}
\newcommand{\lciRefDummyX}{}

\newcommand{\ccRefLabel}{\lciParseCC{\lciRefLabelX}}
\newcommand{\lciRefLabelX}{\lciRefLabelXX\lciCCParameter}
\newcommand{\lciRefLabelXX}[1]{\label{ccRef_#XC1}}

\newcommand{\ccRefPageNumAtMargin}{}
\newcommand{\ccRefPageFill}{}
\newcommand{\ccRefIdfierPage}{\ccc}
\newcommand{\ccRefConceptPage}{\ccc}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Class and Class Member Declarations
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | \ccClassName, \ccClassTemplateName, \ccVar, \ccPur...
% | \begin{ccClass}, \begin{ccClassTemplate}, \begin{ccTraitsClass}, \end...
% +--------------------------------------------------------------------------

% class environments
\newenvironment{ccClass}{%
    \lciParseCC{\lciClassCont} 
}{%
    \end{lciClassEnvironment}
}

% traits class environments
\newenvironment{ccTraitsClass}{\lciParseCC{\lciClassContforTraits}}{\end{lciClassEnvironment}}

\newcommand{\lciClassContforTraits}{\lciClassContforTraitsX\lciCCParameter}
\newcommand{\lciClassContforTraitsX}[3]{
    \newcommand{\ccPureClassName}{#XC1}%
    \newcommand{\ccClassName}{\ccc{#XC1}}% 
    \ccIndexTraitsClassBegin{#XC1}{#XC2}{#XC3}% 
    \ccIndexTraitsClassEnd%
    \begin{lciClassEnvironment}{#1}%
}


\newcommand{\lciClassCont}{\lciClassContX\lciCCParameter}
\newcommand{\lciClassContX}[1]{
    \newcommand{\ccPureClassName}{#XC1}%
    \newcommand{\ccClassName}{\ccc{#XC1}}% 
    \begin{lciClassEnvironment}{#1}%
}

% class environments
\newenvironment{ccClassTemplate}{\lciParseCC{\lciClassTemplateCont}}%
    {\end{lciClassEnvironment}}

% traits class environments
\newenvironment{ccTraitsClassTemplate}{\lciParseCC{\lciClassTemplateCont}}%
    {\end{lciClassEnvironment}}

\newcommand{\lciClassTemplateCont}{\lciClassTemplateContX\lciCCParameter}
\newcommand{\lciClassTemplateContX}[1]{
    \lciParseUntilDelimiter{\lciLocalDefClassName}<#XC1<@%
    \begin{lciClassEnvironment}{#1}%
}

\newcommand{\lciLocalDefClassName}[1]{%
    \newcommand{\ccPureClassName}{#C1}%
    \newcommand{\ccClassName}{\ccc{#C1}}%
    \lciParseUntilDelimiter{\lciSkipOneParameter}@}% skip remaining part

\newenvironment{lciClassEnvironment}[1]{%
    \newcommand{\ccPureVar}{*this}%
    \newcommand{\ccVar}{\ccc{*this}}%
    \newcommand{\ccPureClassTemplateName}{#XC1}%
    \newcommand{\ccClassTemplateName}{\ccc{#XC1}}%
    \gdef{\ccIndexClassName}{\ccClassName}%
    \lciIfEmpty{#XC1}{%
     \lciError{The class environments need a non-empty classname parameter}}{}%
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \lciPushFootnotes
    }{}}{}%
    \lciIf{\lciIfHtmlClassIndex}{}{\ccIndexMainItem{\ccClassName}}%
    \lciCacheClassName
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \lciClassEnvOpenFile{#XC1}{\lciHtmlSuffix}{\ccClassTemplateName}}{}}{}%
    \lciIfHtmlClassIndex{\lciIfHtmlIndex{\ccIndex{\ccAutoIndex{%
        \lciHtmlIndexCExpanded{\ccPureClassName}}{}}{}}{}}{}%
    \lciIfHtmlClassLinks{\lciIfHtmlLinks{%
        \lciExpandedCrossLinkTemplateX{\ccPureGlobalScope}{\ccPureClassName}}{}}{}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
}{%
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \lciPrintFootnotes
        \lciPopFootnotes
    }{}}{}%
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \end{ccReferenceFile}}{}}{}%
    \gdef{\lciIfHtmlClassToc}{\lcTrue}%
    \gdef{\lciIfHtmlClassFile}{\lcTrue}%
    \lciIfHtmlRefLinks{\gdef{\lciIfHtmlClassLinks}{\lcTrue}}{}%
    \lciIfHtmlRefIndex{\gdef{\lciIfHtmlClassIndex}{\lcTrue}}{}%
    \lciUndef{\ccPureVar}%
    \lciUndef{\ccPureClassName}%
    \lciUndef{\ccPureClassTemplateName}%
    \lciUndef{\ccVar}%
    \lciUndef{\ccClassName}%
    \gdef\ccIndexClassName{}%
    \lciUndef{\ccClassTemplateName}%
    \lciCacheClassName % empties cached class_name 
}
\newcommand{\lciClassEnvOpenFile}[3]{\begin{ccReferenceFile}{#1#GXC2}{#3}}


% +--------------------------------------------------------------------------
% | \ccCreationVariable, \ccConstructor
% +--------------------------------------------------------------------------

\newcommand{\ccCreationVariable}[1]{%
    \newcommand{\ccPureVar}{#C1}%
    \newcommand{\ccVar}{\ccc{#C1}}%
}
% +--------------------------------------------------------------------------
% | \ccMemberFunction, \ccMethod, \ccFunction, \ccFunctionTemplate
% | \ccTypedef, \ccNestedType, \ccVariable, \ccEnum, \ccStruct
% +--------------------------------------------------------------------------

\newcommand{\lciMainIndexItem}{}
\newcommand{\lciSubIndexItem}{}
\newcommand{\lciSubSubIndexItem}{}


%% The single char encodes the category for the continuation
\newcommand{\ccClassDeclaration}{\lciParseCC{\lciTwoColumnContinuation A}}
\newcommand{\ccStruct}{\lciParseCC{\lciTwoColumnContinuation B}}
\newcommand{\ccNestedType}{\lciParseCC{\lciTwoColumnContinuation C}}
\newcommand{\ccEnum}{\lciParseCC{\lciTwoColumnContinuation D}}
\newcommand{\ccConstructor}{\lciParseCC{\lciTwoColumnContinuation E}}

%% The comment parameter remains (third column), if its not a global decl.
\newcommand{\lciTwoColumnContinuation}[1]{\lciIfGlobal
    {\newcommand{\lciIfGlobal}{\lcFalse}\lciTwoColumnX{#1}{}}
    {\lciTwoColumnX{#1}}}
\newcommand{\lciTwoColumnX}[2]{\lciGluePostProcessing
    \lciTwoColumnLayout{#1}\lciIfEmpty{#C2}
    {\lciTwoColsEndEmpty}{\lciTwoColsSecond #C2\lciTwoColsEnd}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
}

%% Tricky definition, since we must have % signs in it.
\newcommand{\lciTwoColsSecond}{\lcRawHtml{<TR><TD WIDTH=30}\%\lcRawHtml{ NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70}\%\lcRawHtml{>
    }}
\newcommand{\lciTwoColsEnd}{\lcRawHtml{
        <P></TD></TR>
        </TABLE><!2>
}}
\newcommand{\lciTwoColsEndEmpty}{\lcRawHtml{
        <P></TABLE><!2>
}}

\gdef\ccIsFunctionTemplate{\ccFalse}

%% Simply omit the first argument and hope that ParameterMode
%% can parse it (i.e. no % symbol in it).
\newcommand{\ccFunctionTemplate}[1]{%
    \gdef\ccIsFunctionTemplate{\ccTrue}
    \ccFunction}

\newcommand{\ccMemberFunction}{\ccMethod}

%% The single char encodes the category for the continuation
\newcommand{\ccMethod}{\lciParseCC{\lciThreeColumnContinuation L}}
\newcommand{\ccFunction}{\lciParseCC{\lciThreeColumnContinuation M}}
\newcommand{\ccVariable}{\lciParseCC{\lciThreeColumnContinuation N}}
\newcommand{\ccTypedef}{\lciParseCC{\lciThreeColumnContinuation O}}

%% The comment parameter remains (third column), if its not a global decl.
\newcommand{\lciThreeColumnContinuation}[1]{\lciIfGlobal
    {\newcommand{\lciIfGlobal}{\lcFalse}\lciThreeColumnX{#1}{}}
    {\lciThreeColumnX{#1}}}
\newcommand{\lciThreeColumnX}[2]{\lciGluePostProcessing\lciIfEmpty{#C2}
    {\lciThreeColumnLayout{#1}{1}\lciThreeColsEndEmpty}
    {\lciThreeColumnLayout{#1}{0}#C2\lciThreeColsEnd}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
    \gdef\ccIsFunctionTemplate{\ccFalse}%
}

\newcommand{\lciThreeColsEnd}{\lcRawHtml{
        </TD></TR>
        </TABLE><!3>
}}
\newcommand{\lciThreeColsEndEmpty}{\lcRawHtml{
        </TR>
        </TABLE><!3>
}}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Global C++ Declarations
% |
% ###########################################################################

\newcommand{\ccGlobalFunction}{\newcommand{\lciIfGlobal}{\lcTrue}\ccFunction}
\newcommand{\ccGlobalFunctionTemplate}{%
    \newcommand{\lciIfGlobal}{\lcTrue}\ccFunctionTemplate}
\newcommand{\ccGlobalVariable}{\newcommand{\lciIfGlobal}{\lcTrue}\ccVariable}
\newcommand{\ccGlobalTypedef}{\newcommand{\lciIfGlobal}{\lcTrue}\ccTypedef}
\newcommand{\ccGlobalEnum}{\newcommand{\lciIfGlobal}{\lcTrue}\ccEnum}
\newcommand{\ccGlobalStruct}{\newcommand{\lciIfGlobal}{\lcTrue}\ccStruct}


% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   HTML Related Support
% |
% ###########################################################################
% --> see also latex_to_html.sty

% old names for compatibility
\newcommand{\ccTexHtml}[1]{\lcRawHtml}
\newenvironment{ccTexOnly}{%
    \lciParseUntilEndToken{\lciSkipOneParameter}{ccTexOnly}}{}

\newcommand{\lciLocalHtmlOnly}[1]{\lciRawOutputN{#L1}#1}
\newenvironment{ccHtmlOnly}{%
    \lciParseUntilEndToken{\lciLocalHtmlOnly}{ccHtmlOnly}}{}

% old names for compatibility
\newcommand{\ccAnchor}{\lcAnchor}

\newcommand{\ccHtmlLinksOff}{\lcRawHtml{
<!-- REMOVE_LINKS_BEGIN -->
}}
\newcommand{\ccHtmlLinksOn}{\lcRawHtml{
<!-- REMOVE_LINKS_END -->
}}
\newcommand{\ccHtmlNoLinksFrom}[1]{\ccHtmlLinksOff#1\ccHtmlLinksOn}

% enable later when it's clear that the old definitions where not used
%\newcommand{\ccHtmlIndex}[1]{\lciHtmlIndex{#1}}
%\newcommand{\ccHtmlIndexC}{\lciParseCC{\lciHtmlIndexCParsed}}
\newcommand{\lciHtmlIndexCParsed}{\lciHtmlIndexC 1} % dummy 1, uses cc_string

\newcommand{\lciHtmlIndexExpanded}[1]{\lciHtmlIndex{#XC1}}
\newcommand{\lciHtmlIndexCExpanded}[1]{\lciParseCC{\lciHtmlIndexCParsed}{#XC1}}

\newcommand{\lciLocalIndexCategory}{class}

\newcommand{\ccHtmlCrossLink}{\lciParseCC{\lciHtmlCrossLink 1}}
\newcommand{\ccHtmlCrossLinkTemplate}{\lciParseCC{\lciHtmlCrossLinkTemplate 1}}

\newcommand{\lciExpandedCrossLinkTemplate}[1]{%
    \ccHtmlCrossLinkTemplate{#X1}}
\newcommand{\lciExpandedCrossLinkTemplateX}[2]{%
    \ccHtmlCrossLinkTemplate{#X1#GX2}}

\newenvironment{ccHtmlClassFile}{%
    %\lciPushFootnotes
    \gdef{\lciIfHtmlClassNotInline}{\lcFalse}%
    \begin{ccReferenceFile}%
}{%
    \end{ccReferenceFile}%
    \gdef{\lciIfHtmlClassNotInline}{\lcTrue}%
}


% ___________________________________________________________________________
% ###########################################################################
% | EOF
% ###########################################################################
