% ___________________________________________________________________________
% |#########################################################################|
% |                                                                         |
% | Latex Converter Style File: cc_manual.sty                               |
% | ------------------------------------------------------------------      |
% | Macros available with the cc_manual Style for formatting manuals.       |
% |                                                                         |
% | 24.07.1998   Lutz Kettner   kettner@acm.org                             |
% | Zurich, Switzerland                                                     |
% | $Revision$                                                       |
% | $Date$                                            |
% |_________________________________________________________________________|
% |#########################################################################|
% |                                                                         |
% | Table of Contents:                                                      |
% |                                                                         |
% |   o   (La)TeX Macros                                                    |
% |   o   (La)TeX Environments                                              |
% |                                                                         |
% |#########################################################################|


\newcommand{\ccFalse}{\lcFalse}
\newcommand{\ccTrue}{\lcTrue}
\newcommand{\ccAuto}{\lcAuto}



% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Verbatim File Macro
% |
% ###########################################################################

\newcommand{\ccIncludeVerbatim}[1]{\lciParseFile{\lciLocalVerbatim}{#1}}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Page Layout and Page Dimensions
% |
% ###########################################################################

\newcommand{\ccOriginalParDims}{}
\newcommand{\ccParDims}{}

\newcommand{\ccInitWidths}{}
\newcommand{\ccInitFunctionWidths}{}
\newcommand{\ccInitConstructorWidths}{}

\newcommand{\ccTopSkip}{\smallskip}
\newcommand{\ccBottomSkip}{\par\smallskip}
\newcommand{\ccBottomBigSkip}{\par\bigskip}

\newcommand{\ccReverseTopSkip}{}
\newcommand{\ccReturnSkip}{\par}
\newcommand{\ccMiddleSkip}{\par}
\newcommand{\ccReverseBottomSkip}{}
\newcommand{\ccReverseBottomBigSkip}{}

\newcommand{\ccGlueDeclarations}{\lcRawHtml{<!GLUE>}}
\newcommand{\ccGlueBegin}{\newcommand{\lciIfGlueEnvironment}{\lcTrue}%
    \newcommand{\lciGlueEnvironmentElement}{}}
\newcommand{\ccGlueEnd}{\newcommand{\lciIfGlueEnvironment}{\lcFalse}}

\newcommand{\lciIfGlueEnvironment}{\lcFalse}
\newcommand{\lciGlueEnvironmentElement}{}

\newcommand{\lciGluePostProcessing}{\lciIfGlueEnvironment
  {\lciGlueEnvironmentElement\newcommand{\lciGlueEnvironmentElement}{\ccGlue}}
  {}}

% abbreviations
\newcommand{\ccGlue}{\ccGlueDeclarations}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Advanced Customization of the Layout
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | Customization tags for the style: here are the defaults defined.
% +--------------------------------------------------------------------------

\newcommand{\ccTagDefaults}{%
    \def\ccTagChapterAuthor{\ccFalse}%
    \def\ccTagChapterRelease{\ccFalse}%
    \def\ccTagReplacePrefix{\ccFalse}%
    \def\ccTagReplaceInclude{\ccFalse}%
    \def\ccLongParamLayout{\ccFalse}%
    % Declaration Layout tags
    \def\ccTagRmTrailingConst{\ccTrue}%
    \def\ccTagRmEigenClassName{\ccTrue}%
    \def\ccTagRmConstRefPair{\ccTrue}%
    \def\ccTagOperatorLayout{\ccTrue}%
    \def\ccTagRmTemplate{\ccFalse}%
    \def\ccTagTemplateInline{\ccFalse}%
    % portability namings
    \def\ccAlternateThreeColumn{\ccTrue}%
}

\newcommand{\ccTagFullDeclarations}{%
    \def\ccTagRmTrailingConst{\ccFalse}%
    \def\ccTagRmEigenClassName{\ccFalse}%
    \def\ccTagRmConstRefPair{\ccFalse}%
    \def\ccTagOperatorLayout{\ccFalse}%
    \def\ccTagRmTemplate{\ccFalse}%
}
\ccTagDefaults

% +--------------------------------------------------------------------------
% | Customization of the three columns or two columns layout
% +--------------------------------------------------------------------------
\newcommand{\ccSetTwoOfThreeColumns}[2]{}

\newcommand{\ccSetThreeColumns}[3]{}
\newcommand{\ccSetOneOfTwoColumns}[1]{}
\newcommand{\ccSetTwoColumns}[2]{}
\newcommand{\ccPropagateThreeToTwoColumns}{}

% abbreviations
\newcommand{\ccThree}{\ccSetThreeColumns}
\newcommand{\ccTwo}[2]{}
\newcommand{\ccThreeToTwo}{\ccPropagateThreeToTwoColumns}

% +--------------------------------------------------------------------------
% | \ccMakeAllVisible:
% | The invisible declarational parts in the manual that are written
% | with \ccDeclaration and \lciidden are made visible with this macro.
% +--------------------------------------------------------------------------
% If these non visible parts of the code should be made visible once,
% the following macro switches it on.
\newcommand{\ccMakeAllVisible}{%
    \renewcommand{\ccDeclaration}{\ccStyle}%
    \renewcommand{\lciidden}{}%
}

% +--------------------------------------------------------------------------
% | Formatting styles:
% |
% | The style of the C++ formatting can be customized by redefining the 
% | following macros. But not in the latex converter, sorry.
% +--------------------------------------------------------------------------
\newcommand{\ccFont}{\it}   % font or style changing command in which all C++
                        % tokens will be typeset, including the variable names.
\newcommand{\ccEndFont}{\/} % will be used after a C++ text. For slanted fonts,
                        % here should stay \/ macro. The C++ code will be
                        % grouped, so this macros has not to restore the old
                        % font.

% The special characters in typical C++ declarations:
\newcommand{\ccOpenAngle }{\ccEndFont {\tt <}}
\newcommand{\ccCloseAngle}{\ccEndFont {\tt >}}
\newcommand{\ccAmpersand }{\ccEndFont {\tt \&}}
\newcommand{\ccUnderscore}{\_}
\newcommand{\ccHat       }{\lcAsciiToHtml{^}}
\newcommand{\ccTilde     }{\lcRawHtml{~}}
\newcommand{\ccHash      }{{\rm \#}}
\newcommand{\ccDollar    }{\$}

\newcommand{\ccc}{\lciParseCC{\lciStyle 1}}  %% the 1 is a dummy to keep it
                                             %% from parsing spaces
\newcommand{\ccStyle}{\ccc}

% +--------------------------------------------------------------------------
% | Replacement of Prefixes, not supported in HTML
% | 
% | \ccSrcPrefix     contains the old prefix
% | \ccTargetPrefix  contains the new prefix
% | 
% | \ccReplacePrefix #1#2  replaces all prefixes in #1 and applies #2 to
% |                        the partial results that have to be terminated
% |                        by \ccEnd.
% +--------------------------------------------------------------------------
\gdef\ccSrcPrefix{CGAL}
\gdef\ccTargetPrefix{CGAL}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Common Abbreviations
% |
% ###########################################################################

% +--------------------------------------------------------------------------
% | Original LEDA Manual macros (shortcuts):
% | Several new shortcuts for CGAL
% |
% | \CC, \gcc, \nat, \real, \boxit
% | \leda, \cgal, \protocgal, \plageo
% +--------------------------------------------------------------------------
% selfmade
\newcommand{\CC}{C++}
\newcommand{\gcc}{g++}
\newcommand{\nat}{{\mathbb N}}
\newcommand{\real}{{\mathbb R}}
\newcommand{\R}{{\mathbb R}}  %% zusammen mit usepackage{amssymb}
\newcommand{\N}{{\mathbb N}}  %% zusammen mit usepackage{amssymb}
\newcommand{\Z}{{\mathbb Z}}  %% zusammen mit usepackage{amssymb}
\newcommand{\Q}{{\mathbb Q}}  %% zusammen mit usepackage{amssymb}
\newcommand{\E}{{\mathbb E}}  %% zusammen mit usepackage{amssymb}

\newcommand{\stl}{STL}
\newcommand{\leda}{LEDA}
\newcommand{\cgal}{CGAL}
\newcommand{\protocgal}{C++GAL}
\newcommand{\plageo}{PLAGEO}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   Structuring Macros
% |
% ###########################################################################
% +--------------------------------------------------------------------------
% | Structuring macros (similar to LEDA Manual):
% |
% | \ccSection, \definition, \constants, \types, \creation, \operations, 
% | \implementation, \example, \precond, \postcond, 
% | \ccChapterAuthor, \ccChapterRelease, \ccChapterSubTitle
% +--------------------------------------------------------------------------

\newcommand{\ccSection}[1]{\lcRawHtml{
<H1>}#1 (\ccClassName)\lcRawHtml{</H1>
}}

\newcommand{\ccSubsection}[1]{\lcRawHtml{
<H2>}#1 (\ccClassName)\lcRawHtml{</H2>
}}

\newcommand{\ccChapterSubTitle}[1]{\lcRawHtml{<EM>}#1\lcRawHtml{</EM>}}
\newcommand{\ccChapterAuthor}[1]{\lciIf{\ccTagChapterAuthor}
    {\ccChapterSubTitle{#1}}{}}
\newcommand{\ccChapterRelease}[1]{\lciIf{\ccTagChapterRelease}
    {\ccChapterSubTitle{#1}}{}}


\newcommand{\ccHeading}[1]{\lcRawHtml{<H3>}#1\lcRawHtml{</H3>}}
\newcommand{\ccCommentHeading}[1]{\lcRawHtml{<BR><EM>}#1: \lcRawHtml{</EM>}}

\newcommand{\ccDefinition     }{\ccHeading{Definition}}
\newcommand{\ccInheritsFrom   }{\ccHeading{Inherits From}}
\newcommand{\ccParameters     }{\ccHeading{Parameters}}
\newcommand{\ccConstants      }{\ccHeading{Constants}}
\newcommand{\ccTypes          }{\ccHeading{Types}}
\newcommand{\ccCreation       }{\ccHeading{Creation}}
\newcommand{\ccOperations     }{\ccHeading{Operations}}
\newcommand{\ccAccessFunctions}{\ccHeading{Access Functions}}
\newcommand{\ccPredicates     }{\ccHeading{Predicates}}
\newcommand{\ccModifiers      }{\ccHeading{Modifiers}}
\newcommand{\ccSeeAlso        }{\ccHeading{See Also}}
\newcommand{\ccImplementation }{\ccHeading{Implementation}}
\newcommand{\ccExample        }{\ccHeading{Example}}

\newcommand{\ccPrecond  }{\ccCommentHeading{Precondition}}
\newcommand{\ccPostcond }{\ccCommentHeading{Postcondition}}

\newenvironment{ccAdvanced}{%
    \lcRawHtml{<BR><IMG BORDER=0 SRC="cc_advanced_begin.gif" ALT="begin of advanced section"><BR>}
}{
    \lcRawHtml{<BR><IMG BORDER=0 SRC="cc_advanced_end.gif" ALT="end of advanced section"><BR>}
}


% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   C++ Declarations
% |
% ###########################################################################

% +--------------------------------------------------------------------------
% | \ccDeclaration, \lciidden, \ccUnchecked
% +--------------------------------------------------------------------------
% A \declaration accepts one parameter. The style will ignore it, while
% the checker tests if it exists one to one in the C++ code.
% It is intended for declarations that are somehow implied by the
% surrounded text, but should not be explicitly visible.
\newcommand{\ccDeclaration}[1]{}

% A \hidden macro can be prepended to each macro with two parameters.
% It will remove the macro and its parameters from the manual.
% Again, the checker tests the macro as usual.
\newcommand{\ccHidden}[3]{}

% An \ccUnchecked macro expands to nothing. It is used by the checker tool
% where it denotes that the following declarations is not subject of any
% check.
\newcommand{\ccUnchecked}{}

% class environments
\newenvironment{ccClass}{\lciParseCC{\lciClassCont}}{\end{lciClassEnvironment}}

\newcommand{\lciClassCont}{\lciClassContX\lciCCParameter}
\newcommand{\lciClassContX}[1]{
    \newcommand{\ccPureClassName}{#XC1}%
    \newcommand{\ccClassName}{\ccc{#XC1}}%
    \begin{lciClassEnvironment}{#1}%
}

% class environments
\newenvironment{ccClassTemplate}{\lciParseCC{\lciClassTemplateCont}}%
    {\end{lciClassEnvironment}}

\newcommand{\lciClassTemplateCont}{\lciClassTemplateContX\lciCCParameter}
\newcommand{\lciClassTemplateContX}[1]{
    \lciParseUntilDelimiter{\lciLocalDefClassName}<#XC1<@%
    \begin{lciClassEnvironment}{#1}%
}

\newcommand{\lciLocalDefClassName}[1]{%
    \newcommand{\ccPureClassName}{#C1}%
    \newcommand{\ccClassName}{\ccc{#C1}}%
    \lciParseUntilDelimiter{\lciSkipOneParameter}@}% skip remaining part

\newenvironment{lciClassEnvironment}[1]{%
    \newcommand{\ccPureVar}{*this}%
    \newcommand{\ccVar}{\ccc{*this}}%
    \newcommand{\ccPureClassTemplateName}{#XC1}%
    \newcommand{\ccClassTemplateName}{\ccc{#XC1}}%
    \lciIfEmpty{#XC1}{\lciError{
The class environments need a non-empty classname parameter}}{}%
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \lciPushFootnotes
    }{}}{}%
    \begin{lciClass}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
}{%
    \lciIfHtmlClassNotInline{\lciIfHtmlClassFile{%
        \lciPrintFootnotes
        \lciPopFootnotes
    }{}}{}%
    \end{lciClass}%
    \gdef{\lciIfHtmlClassToc}{\lcTrue}%
    \gdef{\lciIfHtmlClassFile}{\lcTrue}%
    \gdef{\lciIfHtmlClassLinks}{\lcTrue}%
    \gdef{\lciIfHtmlClassIndex}{\lcTrue}%
    \lciUndef{\ccPureVar}%
    \lciUndef{\ccPureClassName}%
    \lciUndef{\ccPureClassTemplateName}%
    \lciUndef{\ccVar}%
    \lciUndef{\ccClassName}%
    \lciUndef{\ccClassTemplateName}%
}

\newcommand{\ccCreationVariable}[1]{%
    \newcommand{\ccPureVar}{#C1}%
    \newcommand{\ccVar}{\ccc{#C1}}%
}


\newcommand{\lciIfGlobal}{\lcFalse}


\newcommand{\ccGlobalFunction}{\newcommand{\lciIfGlobal}{\lcTrue}\ccFunction}
\newcommand{\ccGlobalFunctionTemplate}{%
    \newcommand{\lciIfGlobal}{\lcTrue}\ccFunctionTemplate}
\newcommand{\ccGlobalVariable}{\newcommand{\lciIfGlobal}{\lcTrue}\ccVariable}
\newcommand{\ccGlobalTypedef}{\newcommand{\lciIfGlobal}{\lcTrue}\ccTypedef}
\newcommand{\ccGlobalEnum}{\newcommand{\lciIfGlobal}{\lcTrue}\ccEnum}
\newcommand{\ccGlobalStruct}{\newcommand{\lciIfGlobal}{\lcTrue}\ccStruct}



%% The single char encodes the category for the continuation
\newcommand{\ccClassDeclaration}{\lciParseCC{\lciTwoColumnContinuation A}}
\newcommand{\ccStruct}{\lciParseCC{\lciTwoColumnContinuation B}}
\newcommand{\ccNestedType}{\lciParseCC{\lciTwoColumnContinuation C}}
\newcommand{\ccEnum}{\lciParseCC{\lciTwoColumnContinuation D}}
\newcommand{\ccConstructor}{\lciParseCC{\lciTwoColumnContinuation E}}

%% The comment parameter remains (third column), if its not a global decl.
\newcommand{\lciTwoColumnContinuation}[1]{\lciIfGlobal
    {\newcommand{\lciIfGlobal}{\lcFalse}\lciTwoColumnX{#1}{}}
    {\lciTwoColumnX{#1}}}
\newcommand{\lciTwoColumnX}[2]{\lciGluePostProcessing
    \lciTwoColumnLayout{#1}\lciIfEmpty{#C2}
    {\lciTwoColsEndEmpty}{\lciTwoColsSecond #2\lciTwoColsEnd}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
}

%% Tricky definition, since we must have % signs in it.
\newcommand{\lciTwoColsSecond}{\lcRawHtml{<TR><TD WIDTH=30}\%\lcRawHtml{ NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70}\%\lcRawHtml{>
    }}
\newcommand{\lciTwoColsEnd}{\lcRawHtml{
        <P></TD></TR>
        </TABLE><!2>
}}
\newcommand{\lciTwoColsEndEmpty}{\lcRawHtml{
        <P></TABLE><!2>
}}


%% Simply omit the first argument and hope that ParameterMode
%% can parse it (i.e. no % symbol in it).
\newcommand{\ccFunctionTemplate}[1]{\ccFunction}

\newcommand{\ccMemberFunction}{\ccMethod}

%% The single char encodes the category for the continuation
\newcommand{\ccMethod}{\lciParseCC{\lciThreeColumnContinuation L}}
\newcommand{\ccFunction}{\lciParseCC{\lciThreeColumnContinuation M}}
\newcommand{\ccVariable}{\lciParseCC{\lciThreeColumnContinuation N}}
\newcommand{\ccTypedef}{\lciParseCC{\lciThreeColumnContinuation O}}

%% The comment parameter remains (third column), if its not a global decl.
\newcommand{\lciThreeColumnContinuation}[1]{\lciIfGlobal
    {\newcommand{\lciIfGlobal}{\lcFalse}\lciThreeColumnX{#1}{}}
    {\lciThreeColumnX{#1}}}
\newcommand{\lciThreeColumnX}[2]{\lciGluePostProcessing\lciIfEmpty{#C2}
    {\lciThreeColumnLayout{#1}{1}\lciThreeColsEndEmpty}
    {\lciThreeColumnLayout{#1}{0}#C2\lciThreeColsEnd}%
    \gdef{\lciIfHtmlLinks}{\lcTrue}%
    \gdef{\lciIfHtmlIndex}{\lcTrue}%
}

\newcommand{\lciThreeColsEnd}{\lcRawHtml{
        </TD></TR>
        </TABLE><!3>
}}
\newcommand{\lciThreeColsEndEmpty}{\lcRawHtml{
        </TR>
        </TABLE><!3>
}}

% ___________________________________________________________________________
% ###########################################################################
% |
% |   o   HTML Related Support
% |
% ###########################################################################

\newcommand{\ccInclude}[1]{\lcRawHtml{<I>##include &lt;}%
    \lciIfDefined{\lciHeaderPath}%
    {\lcRawHtml{<A HREF="}\newcommand{\lciDefLocalHtmlName}[1]{%
        \newcommand{\lciLocalHtmlName}{\lcAsciiToHtml{##X1}}}%
      \lciDefLocalHtmlName\lciHeaderPath\lciLocalHtmlName%
      \lcAsciiToHtml{#C1}\lcRawHtml{">}\lcAsciiToHtml{#C1}\lcRawHtml{</A>}}%
    {\lcAsciiToHtml{#C1}}%
    \lcRawHtml{&gt;</I>}%
}

\newcommand{\ccHtmlIndex}[1]{\lciHtmlIndex{class}{#C1}}
\newcommand{\ccHtmlIndex@om}{\lciHtmlIndex{#C1}{#C2}}

\newcommand{\ccHtmlIndexC}{%
    \newcommand{\lciLocalIndexCategory}{class}\lciParseCC{\lciIndexCParsed}}
\lciOptionalParameterAtEnd{\ccHtmlIndexC}{1}
\newcommand{\ccHtmlIndexC@o}{%
    \newcommand{\lciLocalIndexCategory}{#C1}\lciParseCC{\lciIndexCParsed}}
\newcommand{\lciIndexCParsed}{\lciIndexCParsedX{\lciLocalIndexCategory}}
\newcommand{\lciIndexCParsedX}[1]{\lciHtmlIndexC{#X1}}

\newcommand{\lciLocalIndexCategory}{class}

\newcommand{\ccHtmlCrossLink}{\lciParseCC{\lciHtmlCrossLink 1}}

\newenvironment{ccHtmlClassFile}{%
    \lciPushFootnotes
    \gdef{\lciIfHtmlClassNotInline}{\lcFalse}%
    \lciParseCC{\ccHtmlClassFileCont}%
}{%
    \lciPrintFootnotes
    \lciPopFootnotes
    \lciHtmlClassFileEnd
    \gdef{\lciIfHtmlClassNotInline}{\lcTrue}%
}
\newcommand{\ccHtmlClassFileCont}{\lciStoreHtmlFileName\lciHtmlFileNameBegin}


% ___________________________________________________________________________
% ###########################################################################
% | EOF
% ###########################################################################
