#!/bin/csh -f
# **************************************************************************
# 
#  cc_manual_to_html
#  ===================
#  A script to convert a specification written in a TeX file with the
#  cc_manual.sty into an online manual in HTML.
#
#  It is a two step procedure: First all TeX files are converted into 
#  HTML. Meanwhile the necessary information for the cross links is 
#  collected as set of flex-rules. In the second step are the hyperlinks
#  generated for all HTML files.
#  
# The following programs are necessary to run this script
#
#    o  cc_extract_html
#    o  flex
#    o  cc / gcc
#    o  cc_index_sort
#
#  Author    : (c) 1997 Lutz Kettner
#  Revision  : $Revision$
#  Date      : $Date$
# 
# **************************************************************************

# =======================================================
# Installation: chose the appropriate compiler and paths:
# =======================================================
# A C compiler can be specified here. Normally cc or gcc should work.
# Note: cc does not work on SunOS 4.1.3 (BSD), but on SunOS 5...
#set CC = gcc
set CC = cc

# Path for the HTML conversion tools for the default configuration files.
# This path will be compiled into the cc_extract_html program.
# The same variable has to be configured here. (No slash / at the end!)
#set HTML_DEFAULT_PATH = 
set HTML_DEFAULT_PATH = /home/kettner/topics/cgal/Tools/src/html_config_files

# A couple of default settings that the cc_extract_html program does not know.
set DEFAULT_DATE = `date +"%a, %B %e, %Y"`
set DEFAULT_AUTHOR = "The <A HREF="http://www.cs.ruu.nl/CGAL/"><TT>CGAL</TT> Project</A>"
set DEFAULT_TITLE  = "The CGAL Kernel Manual"

# =======================================================
# Installation: Nothing else below this line.
# =======================================================

if ( $?DEBUG) echo "# DEBUG defined; all commands will be echoed."

# Prepare local variables
# -----------------------
set tmp_path = "/usr/tmp"
if ( ! -d ${tmp_path}) set = tmp_path = "."
if ($?TEMP) then
  if (-d ${TEMP}) set tmp_path = $TEMP
endif
if ($?TMP) then
  if (-d ${TMP}) set tmp_path = $TMP
endif

set out_path    = "."
set config_path = ${HTML_DEFAULT_PATH}

set DEFAULT_RELEASE = 

set default_switch = 0
set show_main_switch = 0

# Parse command line parameters
# -----------------------------

if ( $?DEBUG) echo "# command line parsing."

if ( $#argv < 1) goto usage
set in_files = ""

while ($#argv > 0)
    if ( "$1" == "-h") goto usage
    if ( "$1" == "-help") goto usage

    if ( "$1" == "-defaults") then
	set default_switch = 1
        break
    endif

    if ( "$1" == "-show_main") then
        set show_main_switch = 1;
        shift
        continue
    endif
    if ( "$1" == "-config") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -config needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -config needs a valid directory as parameter."
            goto usage
	endif
	set config_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-tmp") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -tmp needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -tmp needs a valid directory as parameter."
            goto usage
	endif
	set tmp_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-o") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -o needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -o needs a valid directory as parameter."
            goto usage
	endif
	set out_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-date") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -date needs an additional parameter."
            goto usage
	endif
	set DEFAULT_DATE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-release") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -release needs an additional parameter."
            goto usage
	endif
	set DEFAULT_RELEASE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-title") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -title needs an additional parameter."
            goto usage
	endif
	set DEFAULT_TITLE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-author") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -author needs an additional parameter."
            goto usage
	endif
	set DEFAULT_AUTHOR = "$1"
	shift
        continue
    endif

    set in_files = "$in_files $1"
    shift
end

if ( $?DEBUG || $default_switch == 1) then
    echo "The variable settings (including commmandline options) are:"
    echo "  HTML_DEFAULT_PATH = ${HTML_DEFAULT_PATH}"
    echo "  DEFAULT_DATE      = ${DEFAULT_DATE}"
    echo "  DEFAULT_AUTHOR    = ${DEFAULT_AUTHOR}"
    echo "  DEFAULT_TITLE     = ${DEFAULT_TITLE}"
    echo "  DEFAULT_RELEASE   = ${DEFAULT_RELEASE}"
    echo "  tmp_path          = ${tmp_path}"
    echo "  out_path          = ${out_path}"
    echo "  config_path       = ${config_path}"
    echo "  input_files       = ${in_files}"
    echo ""
endif
if ( $default_switch) goto end_of_script

if ( "$in_files" == "") goto usage

# Make a subdirectory for the temp_path:
# --------------------------------------
set tmp_name = "extract_html_tmp"
if ( $?DEBUG) echo "# Make a subdirectory 'extract_html_tmp' for the tmp_path."

set new_tmp_path =  ${tmp_path}/${tmp_name}
if ( -d ${new_tmp_path}) then
    echo "error: the subdirectory 'extract_html_tmp' for the tmp_path exists already."
    echo "       type 'rm -r ${new_tmp_path}' to remove it."
    goto usage
endif
mkdir ${new_tmp_path}


# Step 1: convert each LaTeX file into an HTML file.
# --------------------------------------------------
if ( $?DEBUG) echo "# Step 1: convert each LaTeX file into an HTML file."
if ($show_main_switch) then
    if ( $?DEBUG) echo "cc_extract_html -date "'"'"${DEFAULT_DATE}"'"'" -release "'"'"${DEFAULT_RELEASE}"'"'" -title "'"'"${DEFAULT_TITLE}"'"'" -author "'"'"${DEFAULT_AUTHOR}"'"'" -config ${config_path}/ -tmp ${new_tmp_path}/ ${in_files}"
    cc_extract_html -date "${DEFAULT_DATE}" -release "${DEFAULT_RELEASE}" -title "${DEFAULT_TITLE}" -author "${DEFAULT_AUTHOR}" -config ${config_path}/ -tmp ${new_tmp_path}/ ${in_files}
else
    if ( $?DEBUG) echo "cc_extract_html -date "'"'"${DEFAULT_DATE}"'"'" -release "'"'"${DEFAULT_RELEASE}"'"'" -title "'"'"${DEFAULT_TITLE}"'"'" -author "'"'"${DEFAULT_AUTHOR}"'"'" -config ${config_path}/ -tmp ${new_tmp_path}/ ${in_files} >/dev/null"
    cc_extract_html -date "${DEFAULT_DATE}" -release "${DEFAULT_RELEASE}" -title "${DEFAULT_TITLE}" -author "${DEFAULT_AUTHOR}" -config ${config_path}/ -tmp ${new_tmp_path}/ ${in_files} >/dev/null
endif

# Step 2: generate the hyperlinks. The anchor filter.
# ---------------------------------------------------
if ( $?DEBUG) echo "# Step 2: generate the hyperlinks. The anchor filter"

if ( $?DEBUG) echo "cat ${config_path}/cc_anchor_header ${new_tmp_path}/cc_anchor_rules ${config_path}/cc_anchor_footer > ${new_tmp_path}/cc_anchor_filter.yy"
cat ${config_path}/cc_anchor_header ${new_tmp_path}/cc_anchor_rules ${config_path}/cc_anchor_footer > ${new_tmp_path}/cc_anchor_filter.yy

if ( $?DEBUG) echo "flex -t -8 ${new_tmp_path}/cc_anchor_filter.yy > ${new_tmp_path}/cc_anchor_filter.c"
flex -t -8 ${new_tmp_path}/cc_anchor_filter.yy > ${new_tmp_path}/cc_anchor_filter.c

if ( $?DEBUG) echo "${CC} -o ${new_tmp_path}/cc_anchor_filter ${new_tmp_path}/cc_anchor_filter.c"
${CC} -o ${new_tmp_path}/cc_anchor_filter ${new_tmp_path}/cc_anchor_filter.c
if (-r cc_anchor_filter.o) rm cc_anchor_filter.o

# Filtering all HTML files.
# -------------------------
if ( $?DEBUG) echo "# Filtering all HTML files."
foreach f (${new_tmp_path}/*.html)
  if ( $?DEBUG) echo "${new_tmp_path}/cc_anchor_filter < $f > ${out_path}/$f:t"
  ${new_tmp_path}/cc_anchor_filter < $f > ${out_path}/$f:t
end

# Converting the index.
# ---------------------
if ( $?DEBUG) echo "# Converting the index."

if ( $?DEBUG) echo "cc_index_sort -ger ${new_tmp_path}/cc_index_body | sed 's/[<][\!]sort[^\!]*[\!][>]//' >  ${new_tmp_path}/cc_index_sorted"
cc_index_sort -ger ${new_tmp_path}/cc_index_body | sed 's/[<][\!]sort[^\!]*[\!][>]//' >  ${new_tmp_path}/cc_index_sorted

if ( $?DEBUG) echo "cat ${new_tmp_path}/cc_index_header ${new_tmp_path}/cc_index_sorted ${new_tmp_path}/cc_index_footer > ${new_tmp_path}/cc_index"
cat ${new_tmp_path}/cc_index_header ${new_tmp_path}/cc_index_sorted ${new_tmp_path}/cc_index_footer > ${new_tmp_path}/cc_index

if ( $?DEBUG) echo "${new_tmp_path}/cc_anchor_filter < ${new_tmp_path}/cc_index > ${out_path}/manual_index.html"
${new_tmp_path}/cc_anchor_filter < ${new_tmp_path}/cc_index > ${out_path}/manual_index.html


# Cleanup
# -------
if ( $?DEBUG) echo "# Cleanup and all done"
if ( $?DEBUG) then
    echo "# rm -r ${new_tmp_path}"
else
    rm -r ${new_tmp_path}
endif

end_of_script:
exit

usage:
echo "$0 "'$Revision$'" (c) Lutz Kettner"
echo "Usage: $0 [<options>] <tex-files...>"
echo "           -defaults          show the settings of the internal variables."
echo "           -show_main         show the translation result for the main file."
echo "           -date    <text>    set a date for the manual."
echo "           -release <text>    set a release number for the manual."
echo "           -title   <text>    set a title text for the manual."
echo "           -author  <text>    set an author address (email) for the manual."
echo "           -config  <dir>     set the path where to find the config files."
echo "           -tmp     <dir>     set the path where to put intermediate files."
echo "           "
echo "           -o       <dir>     output directory for the generated HTML manual"
exit (1)

