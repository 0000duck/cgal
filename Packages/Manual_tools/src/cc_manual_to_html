#!/bin/csh -f
# **************************************************************************
# 
#  cc_manual_to_html
#  ===================
#  A script to convert a specification written in a TeX file with the
#  cc_manual.sty into an online manual in HTML.
#
#  It is a two step procedure: First all TeX files are converted into 
#  HTML. Meanwhile the necessary information for the cross links is 
#  collected as set of flex-rules. In the second step are the hyperlinks
#  generated for all HTML files.
#  
#  Besides programs and scripts distributed with the LaTeX converter,
#  the following programs are necessary to run this script
#
#    o  flex
#    o  C Compiler: cc / gcc
#    o  Perl 5 (for subsequent scripts)
#
#  Author    : (c) 1997 Lutz Kettner
#              as of version 3.3 (Sept. 1999) maintained by Susan Hert
#  Revision  : $Revision$
#  Date      : $Date$
# 
# **************************************************************************

# =====================================================================
# Begin of Installation Section: ...
# =====================================================================
# Choose appropriate values in the environment or uncomment and
# set the values here. See the INSTALLATION file for more details.

# Path to the configuration files of the latex_converter:
# Used during installation to copy config files and compiled
# into the cc_extract_html program as default config path.
# The same variable is used in the cc_manual_to_html script.
# LATEX_CONV_CONFIG = ${PUBLIC}/CGAL/Tools/latex_converter_config


# C Compiler: Gnu gcc 2.6.3 (or above) or the usual system cc:
# CC = gcc

# The header files within the \ccInclude macro can be linked to the original
# header files if the -header option is given to the cc_extract_html program.
# The environment variable LATEX_CONV_HEADER is used as default. 
# If it is not set, the default setting is empty and include files are not
# linked.

set header = ""
if ($?LATEX_CONV_HEADER) then
    set header = "-header ${LATEX_CONV_HEADER}"
endif

# Default parameters used in calling the cc_extract_html program:
# They are not necessarily supposed to be set in the environment.
if ( ! $?LATEX_CONV_DATE)    set LATEX_CONV_DATE   = `date +"%a, %B %e, %Y"`
if ( ! $?LATEX_CONV_AUTHOR)  set LATEX_CONV_AUTHOR = \
            'The <A HREF="http://www.cgal.org">CGAL Project</A>'
if ( ! $?LATEX_CONV_TITLE)   set LATEX_CONV_TITLE  = "Reference Manual"
if ( ! $?LATEX_CONV_RELEASE) set LATEX_CONV_RELEASE = 

# =====================================================================
# ... End of Installation Section.
# =====================================================================

# Prepare local variables
# -----------------------
set prog_name = $0
set prog_name = $prog_name:t

set tmp_path = "/usr/tmp"
if ( ! -d ${tmp_path}) set tmp_path = "."
if ($?TEMP) then
  if (-d ${TEMP}) set tmp_path = $TEMP
endif
if ($?TMP) then
  if (-d ${TMP}) set tmp_path = $TMP
endif

set aux_file    = ""
set bbl_file    = ""

set out_path    = "."
set config_path = ${LATEX_CONV_CONFIG}

set default_switch   = 0
set show_main_switch = 0
set extended_switch  = 0
set extract_opt      = ""
set quiet_switch     = 0;
set ref_part_switch  = 0;

set FLEX = "flex -t -8 -w"

# Parse command line parameters
# -----------------------------

if ( $#argv < 1) goto usage
set in_files = ""
set ref_files = ""

while ($#argv > 0)
    if ( "$1" == "-h") goto usage
    if ( "$1" == "-help") goto usage

    if ( "$1" == "-defaults") then
	set default_switch = 1
        break
    endif

    if ( "$1" == "-V") then
        echo "$prog_name "'$Revision$'" (c) Lutz Kettner"
	echo -n "Using: "
	cc_extract_html -V
        exit(0)
    endif

    if ( "$1" == "-extended") then
	set extended_switch = 1
	shift
        continue
    endif

    if ( "$1" == "-ref_manual") then
	set ref_part_switch = 1
	shift
        continue
    endif

    if ( "$1" == "-show_main") then
        set show_main_switch = 1;
        shift
        continue
    endif
    if ( "$1" == "-config") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -config needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -config needs a valid directory as parameter."
            goto usage
	endif
	set config_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-tmp") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -tmp needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -tmp needs a valid directory as parameter."
            goto usage
	endif
	set tmp_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-o") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -o needs an additional parameter."
            goto usage
	endif
	if ( ! -d $1) then 
 	    echo "error: switch -o needs a valid directory as parameter."
            goto usage
	endif
	set out_path = "$1"
	shift
        continue
    endif
    if ( "$1" == "-header") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -header needs an additional parameter."
            goto usage
	endif
	set header = "-header $1"
	shift
        continue
    endif
    # The following block remains for compatibility.
    if ( "$1" == "-cgal_dir") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -cgal_dir needs an additional parameter."
            goto usage
	endif
	set header = "-header $1"
	shift
        continue
    endif
    if ( "$1" == "-date") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -date needs an additional parameter."
            goto usage
	endif
	set LATEX_CONV_DATE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-release") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -release needs an additional parameter."
            goto usage
	endif
	set LATEX_CONV_RELEASE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-title") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -title needs an additional parameter."
            goto usage
	endif
	set LATEX_CONV_TITLE = "$1"
	shift
        continue
    endif
    if ( "$1" == "-author") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -author needs an additional parameter."
            goto usage
	endif
	set LATEX_CONV_AUTHOR = "$1"
	shift
        continue
    endif
    if ( "$1" == "-aux") then
        shift
        if ( $#argv < 1 || ! -r $1) then
	    echo "error: switch -aux needs a filename as additional parameter."
            goto usage
	endif
	set aux_file = "${tmp_path}/aux_tmp_file.`date +%M%S`.tex"
	grep "\\bibcite[{]" $1 > $aux_file
	shift
        continue
    endif
    if ( "$1" == "-bbl") then
        shift
        if ( $#argv < 1 || ! -r $1) then
	    echo "error: switch -bbl needs a filename as additional parameter."
            goto usage
	endif
	set bbl_file = "$1"
	shift
        continue
    endif
    if ( "$1" == "-quiet") then
        set quiet_switch = 1;
        set extract_opt = "$extract_opt $1"
        shift
        continue
    endif
    if ( "$1" == "-macrodef") then
        set extract_opt = "$extract_opt $1"
        shift
        continue
    endif
    if ( "$1" == "-macroexp") then
        set extract_opt = "$extract_opt $1"
        shift
        continue
    endif
    if ( "$1" == "-stymacro") then
        set extract_opt = "$extract_opt $1"
        shift
        continue
    endif
    if ( "$1" == "-stacktrace") then
        set extract_opt = "$extract_opt $1"
        shift
        continue
    endif
    if ( "$1" == "-sty") then
        shift
        if ( $#argv < 1) then
	    echo "error: switch -sty needs an additional parameter."
            goto usage
	endif
        set extract_opt = "$extract_opt -sty $1"
        shift
        continue
    endif
    if ( "$1" == "-flexwarn") then
        set FLEX = "flex -t -8"
        shift
        continue
    endif

    if ($ref_part_switch == 1) then
      set ref_files = "$ref_files $1"
    else
      set in_files = "$in_files $1"
    endif
    shift
end

if ( $ref_part_switch && $extended_switch == 0 ) then
   echo "error:  switch -ref_manual is valid only when the -extended switch is used."
   goto usage
endif

if ( $?DEBUG) echo "# DEBUG defined; all actions will be echoed."

if ( $?DEBUG || $default_switch == 1) then
    echo "The variable settings (including commmandline options) are:"
    echo "  LATEX_CONV_CONFIG  = ${LATEX_CONV_CONFIG}"
    echo "  LATEX_CONV_DATE    = ${LATEX_CONV_DATE}"
    echo "  LATEX_CONV_AUTHOR  = ${LATEX_CONV_AUTHOR}"
    echo "  LATEX_CONV_TITLE   = ${LATEX_CONV_TITLE}"
    echo "  LATEX_CONV_RELEASE = ${LATEX_CONV_RELEASE}"
    echo "  tmp_path           = ${tmp_path}"
    echo "  out_path           = ${out_path}"
    echo "  header             = ${header}"
    echo "  config_path        = ${config_path}"
    echo "  input_files        = ${in_files} ${ref_files}"
    echo "  aux_file           = ${aux_file}"
    echo "  bbl_file           = ${bbl_file}"
    echo "  extract_opt        = ${extract_opt}"
    echo ""
endif
if ( $default_switch) goto end_of_script

if ( "$in_files" == "" && "$ref_files" == "" ) goto usage

set config_html = "${config_path}/html"
set config_gif  = "${config_path}/gif"

if ( $?DEBUG) set verbose = 1


# Make a subdirectory for the temp_path:
# --------------------------------------
set tmp_name = "extract_html_tmp_$USER"

set new_tmp_path =  ${tmp_path}/${tmp_name}
if ( -d ${new_tmp_path}) then
    echo "warning: the tmp_path $tmp_name exists already."
    echo "         It will be removed."
    \rm -r ${new_tmp_path}
endif
\mkdir -p ${new_tmp_path}

if ( ! $quiet_switch) echo "[$prog_name "'$Revision$'

if ( $extended_switch) goto extended_conversion

# Step 1: convert each LaTeX file into an HTML file.
# --------------------------------------------------
set options = "${header} -config ${config_path} -tmp ${new_tmp_path} ${aux_file} ${bbl_file}"

if ( $?DEBUG) echo "# Step 1: convert each LaTeX file into an HTML file."
if ($show_main_switch) then
    cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} -main main.html ${in_files} ${ref_files}
else
    cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} ${in_files} ${ref_files} >/dev/null
endif

# Step 2: generate the hyperlinks. The anchor filter.
# ---------------------------------------------------
if ( ! $quiet_switch) echo -n "creating anchor filter"
if ( $?DEBUG) echo "# Step 2: generate the hyperlinks. The anchor filter"

\cat ${config_html}/cc_anchor_header ${new_tmp_path}/cc_anchor_rules ${config_html}/cc_anchor_footer > ${new_tmp_path}/cc_anchor_filter.yy

${FLEX} ${new_tmp_path}/cc_anchor_filter.yy > ${new_tmp_path}/cc_anchor_filter.c

${CC} -o ${new_tmp_path}/cc_anchor_filter ${new_tmp_path}/cc_anchor_filter.c
if (-r cc_anchor_filter.o) rm cc_anchor_filter.o

# Filtering all HTML files.
# -------------------------
if ( ! $quiet_switch) echo -n ", applying anchor filter"
set CURRENT_DIR=$PWD
cd ${out_path}
set ABS_OUTPATH=$PWD
cd ${CURRENT_DIR}
cd ${new_tmp_path}
# make sure we get all subdirectories
if ( $?DEBUG) echo "# Create all subdirectories in output structure."
foreach f ( `find . -type d -print | sed 's/^[.][/]//'`)
  if ( $?DEBUG) echo $f
  \test -d ${ABS_OUTPATH}/$f || \mkdir ${ABS_OUTPATH}/$f
end
if ( $?DEBUG) echo "# Copy all files listed in 'htmlfiles'"
foreach f ( `find . -type d -print | sed 's/^[.][/]//'`)
  if ( -r ${CURRENT_DIR}/${f}/htmlfiles ) then
    if ( $?DEBUG) echo $f/htmlfiles
    set tmp_dir=$PWD
    cd ${CURRENT_DIR}/${f}
    \cp `cat htmlfiles` ${ABS_OUTPATH}/${f}/
    cd $tmp_dir
  endif
end
if ( $?DEBUG) echo "# Filtering all HTML files."
foreach f ( `find . -name '*.html' -print | sed 's/^[.][/]//'`)
  if ( $?DEBUG) echo $f
  ./cc_anchor_filter < $f | cc_remove_unwanted_links > ${ABS_OUTPATH}/$f
end
cd $CURRENT_DIR

#foreach f (${new_tmp_path}/*.html)
#  if ( $?DEBUG) echo $f
#  ${new_tmp_path}/cc_anchor_filter < $f | cc_remove_unwanted_links > ${out_path}/$f:t
#end

# Converting the index.
# ---------------------
if ( $?DEBUG) echo "# Converting the index."

if ( $quiet_switch) then
    makeindex -q -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx
else
    echo "makeindex -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx"
    makeindex -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx
endif
cc_index_link ${new_tmp_path}/HREF ${new_tmp_path}/manual.ind ${new_tmp_path}/cc_index
\cat ${new_tmp_path}/cc_index_header ${new_tmp_path}/cc_index ${new_tmp_path}/cc_index_footer > ${out_path}/manual_index.html
\cat ${config_gif}/index_arrow.gif > ${out_path}/index_arrow.gif    

# Copy the necessary images to the manual.
# -------------------------------------------------------
if ( ! $quiet_switch) echo -n ", copying image files"

set image_files = `\cat ${out_path}/*.html | cc_extract_images | \sort | \uniq`
foreach f ($image_files)
    if ( -r ${config_gif}/$f) then
        \cp ${config_gif}/$f ${out_path}
    else
        echo "Error: HTML converter: image file '${config_gif}/$f' not found."
    endif
end

conversion_done:

# Cleanup
# -------
if ( $?DEBUG) echo "# Cleanup and all done"
if ( $?DEBUG) then
    echo "# rm -r ${new_tmp_path}"
else
    \rm -r ${new_tmp_path}
endif
if ( ! $quiet_switch) echo "]"


end_of_script:
exit

# Extended Conversion of multiple manual parts 
# --------------------------------------------
extended_conversion:

# Step 0: create subdirectories.
# ------------------------------
if ( $?DEBUG) echo "# Step 0: create subdirectories."
foreach f ($in_files $ref_files)
    \mkdir -p ${new_tmp_path}/$f:h
    if ( ! -d ${out_path}/$f:h) then
        \mkdir -p ${out_path}/$f:h
    endif
end

# directories in which to look for input files (default is current
# directory)
if ( ! $?LATEX_CONV_INPUTS)  then
   set orig_INPUTS = "."
else
   set orig_INPUTS = "$LATEX_CONV_INPUTS"
endif


# Step 1: convert each LaTeX file into an HTML file.
# --------------------------------------------------
if ( $?DEBUG) echo "# Step 1: convert each LaTeX file into an HTML file."
foreach f ($in_files $ref_files)
    if ( ! $quiet_switch) echo "[converting package $f"
    set options = "${header} -config ${config_path} -tmp ${new_tmp_path}/$f:h -noheader"
    set dir = $f:h
    setenv LATEX_CONV_INPUTS "${dir}:$orig_INPUTS"
    if (-r ${new_tmp_path}/HREF_counter) then
       \cat ${new_tmp_path}/HREF_counter > ${new_tmp_path}/$f:h/HREF_counter
    endif
    cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} $f:t >/dev/null
    \cat ${new_tmp_path}/$dir/HREF_counter > ${new_tmp_path}/HREF_counter
    if ( ! $quiet_switch) echo "]"
end


foreach f ($in_files $ref_files) 
  \rm ${new_tmp_path}/$f:h/HREF_counter
end
\rm ${new_tmp_path}/HREF_counter

#foreach f ($ref_files)
#    if ( ! $quiet_switch) echo "[converting package $f"
#    set options = "${header} -config ${config_path} -tmp ${new_tmp_path}/$f:h -noheader"
#    set dir = $f:h
#    setenv LATEX_CONV_INPUTS "${dir}:${dir}/..:$orig_INPUTS"
#    cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} $f:t >/dev/null
#    if ( ! $quiet_switch) echo "]"
#end

setenv LATEX_CONV_INPUTS "$orig_INPUTS"

# Step 2: generate the local hyperlinks. The anchor filter.
# ---------------------------------------------------------
if ( ! $quiet_switch) echo "creating local anchor filter,"
if ( $?DEBUG) echo "# Step 2: generate the hyperlinks. The anchor filter"
foreach f ($in_files $ref_files)
    \cat ${config_html}/cc_anchor_header ${new_tmp_path}/$f:h/cc_anchor_rules ${config_html}/cc_anchor_footer > ${new_tmp_path}/cc_anchor_filter.yy

    ${FLEX} ${new_tmp_path}/cc_anchor_filter.yy > ${new_tmp_path}/cc_anchor_filter.c

    ${CC} -o ${new_tmp_path}/cc_anchor_filter ${new_tmp_path}/cc_anchor_filter.c
    if (-r cc_anchor_filter.o) \rm cc_anchor_filter.o

    # Filtering all HTML files locally.
    # ---------------------------------
    if ( ! $quiet_switch) echo "applying local anchor filter to package $f,"
    if ( $?DEBUG) echo "# Filtering all HTML files locally."
       
    foreach ff (${new_tmp_path}/$f:h/*.html)
        \mv $ff $ff.bak
        ${new_tmp_path}/cc_anchor_filter < $ff.bak | cc_remove_unwanted_links > $ff
	\rm $ff.bak
    end
    setenv CC__LOC_F "$f:h/"
    cc_patch_anchor_toc_index ${new_tmp_path}/$f:h/contents.html
    cc_patch_anchor_index ${new_tmp_path}/$f:h/HREF
    setenv CC__LOC_F ../$f:h/
    cc_patch_anchor_filter ${new_tmp_path}/$f:h/cc_anchor_rules
end


# Step 3: convert bibliography (if any) and .aux file.
# -----------------------------------------------------------
    if ( ! $quiet_switch) echo -n ", converting bibliography"
if ( $?DEBUG) echo "# Step 3: convert bibliography (if any) and .aux file."
set options = "${header} -config ${config_path} -tmp ${new_tmp_path} -noheader ${aux_file} ${bbl_file}"
if ( "${aux_file}" == ""  && "${bbl_file}" == "") then
    \touch ${new_tmp_path}/cc_anchor_rules
else
    cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} >/dev/null
endif


# Step 4: generate the global hyperlinks. The anchor filter.
# -----------------------------------------------------------
    if ( ! $quiet_switch) echo -n ", creating global anchor filter"
if ( $?DEBUG) echo "# Step 4: generate the global hyperlinks. The anchor filter"
cat ${config_html}/cc_anchor_header ${new_tmp_path}/cc_anchor_rules > ${new_tmp_path}/cc_anchor_filter.yy
# make uplink for images provided by the converter point into common gif dir
# echo '"SRC=\"../cc_"[^"]*".gif\""    { fputs( "SRC=\"../gif", stdout); fputs( yytext+7, stdout);}' >> ${new_tmp_path}/cc_anchor_filter.yy
foreach f ($in_files $ref_files)
    \cat ${new_tmp_path}/$f:h/cc_anchor_rules >> ${new_tmp_path}/cc_anchor_filter.yy
end
\cat ${config_html}/cc_anchor_footer >> ${new_tmp_path}/cc_anchor_filter.yy

${FLEX} ${new_tmp_path}/cc_anchor_filter.yy > ${new_tmp_path}/cc_anchor_filter.c

${CC} -o ${new_tmp_path}/cc_anchor_filter ${new_tmp_path}/cc_anchor_filter.c

if (-r cc_anchor_filter.o) \rm cc_anchor_filter.o

if ( ! $quiet_switch) echo -n ", applying global anchor filter"
foreach f ($in_files $ref_files)
    # Filtering all HTML files globally.
    # ----------------------------------
    if ( $?DEBUG) echo "# Filtering all HTML files globally."
    foreach ff (${new_tmp_path}/$f:h/*.html)
        ${new_tmp_path}/cc_anchor_filter < $ff | cc_remove_unwanted_links > ${out_path}/$f:h/$ff:t
	cc_patch_anchor_pages ${out_path}/$f:h/$ff:t
    end
    \rm ${out_path}/$f:h/contents.html
end


# Converting the index, table of contents, and the bibliography.
# --------------------------------------------------------------

if ( ! $quiet_switch) echo -n ", index, toc, bibliography"

${new_tmp_path}/cc_anchor_filter < ${new_tmp_path}/biblio.html > ${out_path}/biblio.html

if ( $?DEBUG) echo "# Converting the index."
 
if ( $ref_part_switch ) then
   set options = "${header} -config ${config_path} -tmp ${new_tmp_path} -onlyheader cc_toc_w_parts_footer cc_toc_w_parts_header cc_index_footer cc_index_header"
   cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} >/dev/null
   \cat ${new_tmp_path}/cc_toc_w_parts_header > ${new_tmp_path}/contents.html

else
   set options = "${header} -config ${config_path} -tmp ${new_tmp_path} -onlyheader cc_toc_footer cc_toc_header cc_index_footer cc_index_header"
   cc_extract_html ${extract_opt} -date "${LATEX_CONV_DATE}" -release "${LATEX_CONV_RELEASE}" -title "${LATEX_CONV_TITLE}" -author "${LATEX_CONV_AUTHOR}" ${options} >/dev/null
   \cat ${new_tmp_path}/cc_toc_header > ${new_tmp_path}/contents.html
endif

foreach f ($in_files $ref_files)
    \cat ${new_tmp_path}/$f:h/contents.html >> ${new_tmp_path}/contents.html
end

if ( $ref_part_switch ) then
   \cat ${new_tmp_path}/cc_toc_w_parts_footer >> ${new_tmp_path}/contents.html
   sed 's/[<][\!]-- Start of new manual part --[>]/<\/OL><\!-- Start of new manual part -->/' ${new_tmp_path}/contents.html > ${new_tmp_path}/edited_contents.html
   \mv ${new_tmp_path}/edited_contents.html ${new_tmp_path}/contents.html
#   sed -e '{ 
#/^[<][\!]-- End of cc_toc_w_parts_header --[>]/ { 
#N 
#s/[<]\/OL[>]// 
#} 
#}' ${new_tmp_path}/edited_contents.html > ${new_tmp_path}/new.html 
#   \rm ${new_tmp_path}/edited_contents.html 
else
   \cat ${new_tmp_path}/cc_toc_footer >> ${new_tmp_path}/contents.html
endif

${new_tmp_path}/cc_anchor_filter < ${new_tmp_path}/contents.html | cc_remove_unwanted_links > ${out_path}/contents.html

foreach f ($in_files $ref_files)
    \cat ${new_tmp_path}/$f:h/manual.hidx >> ${new_tmp_path}/manual.hidx
    \cat ${new_tmp_path}/$f:h/HREF >> ${new_tmp_path}/HREF
end
if ( $quiet_switch) then
    makeindex -q -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx
else
    echo "makeindex -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx"
    makeindex -s ${config_html}/html_index.mst ${new_tmp_path}/manual.hidx
endif
cc_index_link ${new_tmp_path}/HREF ${new_tmp_path}/manual.ind ${new_tmp_path}/manual_index
\cat ${new_tmp_path}/cc_index_header ${new_tmp_path}/manual_index ${new_tmp_path}/cc_index_footer > ${out_path}/manual_index.html
\cat ${config_gif}/index_arrow.gif > ${out_path}/index_arrow.gif


# Copy the necessary images to the manual.
# -------------------------------------------------------
if ( ! $quiet_switch) echo -n ", copying image files"

if ( ! -d ${out_path}/gif) \mkdir -p ${out_path}/gif
set image_files = `cat ${out_path}/*.html ${out_path}/*/*.html | cc_extract_images | \sort | \uniq`
foreach f ($image_files)
    if ( -r ${config_gif}/$f) then
        \cp ${config_gif}/$f ${out_path}/gif
    else
        echo "Error: HTML converter: image file '${config_gif}/$f' not found."
    endif
end


goto conversion_done


usage:
echo "$prog_name "'$Revision$'" (c) Lutz Kettner"
echo "Usage: $prog_name [<options>] <tex-files...>"
echo "           -defaults           show the settings of the internal variables."
echo "           -extended           extended organization among multiple dir's."
echo "           -ref_manual         reference manual input files (requires -extended)."
echo "                               All input files following this switch will"echo "                               be part of the reference manual"
echo "           -show_main          put the result for the main file in main.html."
echo "           -date     <text>    set a date for the manual."
echo "           -release  <text>    set a release number for the manual."
echo "           -title    <text>    set a title text for the manual."
echo "           -author   <text>    set an author address (email) for the manual."
echo "           -config   <dir>     set the path where to find the config files."
echo "           -tmp      <dir>     set the path where to put intermediate files."
echo "           -header   <dir>     set the path where the C headers are."
echo "           -o        <dir>     output directory for the generated HTML manual"
echo "           -aux      <file>    auxiliary file where the \\bibcite's are in."
echo "           -bbl      <file>    bibliography file produced by bibtex."
echo "           -sty      <style>   use style file.";
echo "           -quiet              no output, no warnings for unknown macros."
echo "           -macrodef           trace macro definitions."
echo "           -macroexp           trace macro expansions."
echo "           -stymacro           trace style macros as well."
echo "           -stacktrace         stack trace for each error."
echo "           -flexwarn           show warnings produced by flex."
exit (1)

