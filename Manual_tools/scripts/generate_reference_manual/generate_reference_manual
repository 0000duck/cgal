#!/bin/bash

# Goal   : Generate automatically (most of) the Reference Manual of a CGAL package
# Author : Laurent Saboret, INRIA, 2005-2008
# ------------------------------------------

# Usage
# ------
usage ()
{
echo "\

generate_reference_manual automatically generates the Reference Manual of a CGAL package. The documentation is extracted directly from the sources, which makes it much easier to keep the documentation consistent with the source code.
If the code is commented, this tool generates the whole Reference Manual of the package (except the introduction page). If not, it generates a raw documentation that you have to complete manually.
Note that this tool adds or updates an automatic documentation and *never* removes the documentation manually written. Tags %START-AUTO and %END-AUTO clearly delimitate the automatic documentation.

Installation:
------------

This is a shell script, thus for Unix only.

This script is available at svn+ssh://scm.gforge.inria.fr/svn/cgal/trunk/Manual_tools/scripts/generate_reference_manual/.
The easiest way to install it is to check out this folder and add it to PATH.

generate_reference_manual requires Perl (any recent version) and Doxygen >= 1.4.

Usage:
-----

generate_reference_manual [options] /path/to/package
    -h, --help      Print this help

The typical usage is:
1) Comment your code using Doxygen conventions (see below).
2) Create the package's Reference Manual as described in CGAL Developer Manual. Create skeleton documentation files using cc_ref_wizard.
2) Run generate_reference_manual and cgal_manual.
4) Look at the generated documentation in the Reference Manual .tex files and in the PS/PDF/HTML final Reference manual.
In order to complete it, you may:
    a) Add comments in C++ source code.
    b) Add documentation in .tex files outside of the automatic documentation.
5) Goto point 2) until the Reference Manual is complete.

Doxygen:
-------

This tool uses Doxygen as preprocessor. Doxygen parses C++ code to generate an automatic documentation, that generate_reference_manual reformats for CGAL Manual.

You must use Doxygen conventions to document your code. Doxygen understands both JavaDoc style documentation and Qt style documentation:
* You must use ///, //!, /**...*/ or /*!...*/ to delimit the comments that Doxygen will extract (///< for a comment located after the item it refers to).
* You may document parameters using @param or \param.
* You may insert latex in C++ comments by surrounding it with \f$...\f$.

See http://www.stack.nl/~dimitri/doxygen/docblocks.html for details.

Extensions to Doxygen:
---------------------

* CGAL Manual creates hyperlinks for documented items wrapped by \ccc. This tools wraps automatically words containing an underscore or 2 colons (::). You may force a hyperlink by surrounding a word with simple quotes.

* Words surrounded by double quotes are italicized (using \em).

* The @heading keyword defines a new section in CGAL Manual. The form is:
  /// @heading name:
  /// content.
where 'name' becomes the section's title and 'content' the section's text.
The name must end by a colon and the content by a dot.

Example:
  /// @heading Has Models: The Vector concept has 2 models:
  /// - CGAL::Taucs_vector<T>,
  /// - OpenNL::FullVector<T>.
is converted to:
  \ccHasModels
    The Vector concept has 2 models:
    \ccc{CGAL::Taucs_vector<T>},
    \ccc{OpenNL::FullVector<T>}.

* The @subheading keyword defines a sub-section in CGAL Manual. The form is:
  /// @subheading name
  /// @{
  ...
  /// @}
where 'name' becomes the sub-section's title.

Example:
  /// @subheading Geometric Types
  /// @{
  typedef Point_3 Point;  ///< 3D point.
  /// @}
is converted to:
  \subsubsection{Geometric Types}
    \ccNestedType{Point}{3D point.}

Tips:
----

* You have various ways to control the documentation generated by this tool:
  - generate_reference_manual documents only items with a .tex file in /path/to/package/doc_tex/package_ref.
  - It automatically skips private items.
  - You may force it to skip a part of a source file using @cond SKIP_IN_MANUAL...@endcond.
* To generate a concept's documentation, you may create a fake C++ class named after the concept anywhere in the package's folders tree (use the dont_submit file to ignore it in CGAL releases).
* If comments lack in the generated documentation or are misplaced, check the Doxygen output at /path/to/package/doxygen/html/index.html.

Known bugs:
----------

* So far, this tool documents only concepts, classes, structs and functions.

Contact:
-------

Please contact Laurent Saboret <Laurent.Saboret@sophia.inria.fr> if you discover a bug or wish to request for an enhancement.
"
exit 1
}


#######
# Main
#######

# Version
echo "generate_reference_manual version 1.0.";

# Global variables
ROOT_FOLDER="" # Package's root folder
COPY_DOXYGEN_LATEX_DOC_ARGS="" # Parameters for copy_doxygen_latex_doc
PACKAGE=""  # Package name (without path)
DOXYFILE="" # doxygen configuration file
DEBUG=0 # Debug mode?

# Decode parameters
if [ ! "$1" ] # If no argument
then
    usage
fi
while [ "$1" ]
do
    case "$1" in
    -h|--help) # If usage
        usage
        ;;
    -f|--force) # Ignore obsolete option --force
        ;;
    -d|--debug) # If --debug
        DEBUG=1
        COPY_DOXYGEN_LATEX_DOC_ARGS="$COPY_DOXYGEN_LATEX_DOC_ARGS $1"
        ;;
    -*) # If unknown parameter
        usage
        ;;
    * ) # Package's root folder
        ROOT_FOLDER="$1"
        ;;
    esac
    shift
done

# Test if doxygen is installed
which doxygen >/dev/null 2>&1
if [[ $? != 0 ]]; then
    echo "ERROR: cannot find doxygen"
    exit 1
fi

# Test if doxygen configuration file generate_reference_manual_Doxyfile is present
DOXYFILE="$0_Doxyfile"
if [[ ! (-f "${DOXYFILE}") ]]; then
    echo "ERROR: file ${DOXYFILE} does not exist"
    exit 1
fi

# Test if copy_doxygen_latex_doc is installed
which copy_doxygen_latex_doc >/dev/null 2>&1
if [[ $? != 0 ]]; then
    echo "ERROR: cannot find copy_doxygen_latex_doc"
    exit 1
fi

# Goto package's root folder
if [[ -d "${ROOT_FOLDER}" ]]; then
    cd "${ROOT_FOLDER}"
else
    echo "ERROR: folder ${ROOT_FOLDER} does not exist"
    exit 1
fi

# Remove trailing slash
ROOT_FOLDER=`pwd`

# Get package path
PACKAGE=`pwd | sed 's/.*\///'`

# Delete the output of previous uses of generate_reference_manual
rm -rf doc_doxygen
mkdir doc_doxygen

# Run doxygen
echo ""
echo "Run doxygen..."
doxygen "${DOXYFILE}" >/dev/null 2>&1

# Turn traces on
#set -x

# Update the Reference Manual
echo ""
echo "Update the Reference Manual..."
for manual_file in doc_tex/${PACKAGE}_ref/*.tex
do
    # Skip main.tex and intro.tex
    if [[ (`basename "${manual_file}"` != "main.tex") && \
          (`basename "${manual_file}"` != "intro.tex") ]];
    then
        # Get the list of classes/structs/functions documented in "${manual_file}"
        items=`egrep '^\s*\\\\begin\{ccRef' "${manual_file}" | \
            perl -p -e 's/^\s*\\\\begin\{ccRef.*?\s*\{// ; s/[\s<}].*//'`

        for item in $items
        do
            # Find the file containing the doxygen-generated documentation
            #
            doxygen_output_file_root=`echo "${item}" | sed 's/_/__/g'`
            #
            # Test if ${item} is a concept or a class in the global scope
            doxygen_output_file="doc_doxygen/latex/class${doxygen_output_file_root}.tex"
            # Test if ${item} is a struct in the global scope
            [ ! -f "${doxygen_output_file}" ] && \
                doxygen_output_file="doc_doxygen/latex/struct${doxygen_output_file_root}.tex"
        #     # Test if ${item} is a class in the CGAL namespace
        #     [ ! -f "${doxygen_output_file}" ] && \
        #         doxygen_output_file="doc_doxygen/latex/classCGAL_1_1${doxygen_output_file_root}.tex"
        #     # Test if ${item} is a struct in the CGAL namespace
        #     [ ! -f "${doxygen_output_file}" ] && \
        #         doxygen_output_file="doc_doxygen/latex/structCGAL_1_1${doxygen_output_file_root}.tex"
            # Test if ${item} is a global function (in any scope)
            [ ! -f "${doxygen_output_file}" ] && \
                doxygen_output_file="doc_doxygen/latex/${doxygen_output_file_root}_8h.tex"
            [ ! -f "${doxygen_output_file}" ] && \
                doxygen_output_file=`grep -l '\\\\index{'${item} doc_doxygen/latex/*_8h.tex`

            # Insert the doxygen-generated documentation into ${manual_file}
            if [[ -f "${doxygen_output_file}" ]];
            then
                if [[ $DEBUG == 0 ]]; then
                    echo "* ${item}"
                else
                    echo copy_doxygen_latex_doc $COPY_DOXYGEN_LATEX_DOC_ARGS "${item}" "`pwd`/${doxygen_output_file}" "`pwd`/${manual_file}"
                fi
                copy_doxygen_latex_doc $COPY_DOXYGEN_LATEX_DOC_ARGS "${item}" "${doxygen_output_file}" "${manual_file}"
            else
                echo "ERROR: cannot find doxygen documentation for ${item} (in ${manual_file})"
            fi
        done
    fi
done

# Update citations (hard-coded).
# TODO: add here citations for all packages using generate_reference_manual.
perl -pi -e 's/\[(GHJV95|GOF95)\]/\\cite{cgal:ghjv-dpero-95}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[FH05\]/\\cite{cgal:fh-survey-05}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[Flo03\]/\\cite{cgal:f-mvc-03}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[DMA02\]/\\cite{cgal:dma-ipsm-02}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[LPRM02\]/\\cite{cgal:lprm-lscm-02}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[Tut63\]/\\cite{t-hdg-63}/s' doc_tex/${PACKAGE}_ref/*.tex
perl -pi -e 's/\[EDD\+95\]/\\cite{cgal:eddhls-maam-95}/s' doc_tex/${PACKAGE}_ref/*.tex

exit 0
