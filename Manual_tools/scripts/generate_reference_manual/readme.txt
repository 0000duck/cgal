generate_reference_manual
*************************

generate_reference_manual automatically generates the Reference Manual of a CGAL package.
If the C++ source code is commented, this tool generates the whole Reference Manual of the package (except the introduction page). If not, it generates a raw documentation that you have to complete manually.

Installation:

This is a shell script, thus for Unix only.

generate_reference_manual and copy_doxygen_latex_doc must be in the PATH.
generate_reference_manual_Doxyfile must be in the same folder as generate_reference_manual.

generate_reference_manual requires Perl (any recent version) and Doxygen >= 1.4.

Usage:

generate_reference_manual [options] /path/to/package/root
    -h, --help      Print this help
    -d, --debug     Debug mode

Most of the Reference Manual is simply extracted from the code and from the comments, thus usage is pretty straightforward.
generate_reference_manual also looks for CGAL Manual keywords in the comments and converts them to separate paragraphs:
  - A paragraph starting by 'Is Model for the Concepts:' is converted to \ccIsModel section
  - A paragraph starting by 'Refines:' is converted to \ccRefines section
  - A paragraph starting by 'Has Models:' is converted to \ccHasModels section
  - A paragraph starting by 'Parameters:' is converted \ccParameters section

Typical scenario:

1) Create the package's Reference Manual as described in CGAL Developer Manual. Create skeleton documentation files using cc_ref_wizard.
2) Run generate_reference_manual.
3) Run cgal_manual.
4) Look at the generated documentation in the Reference Manual .tex files and in the PS/PDF/HTML final Reference manual. In order to complete it, you may:
    a) Comment the C++ source code using Doxygen conventions and run generate_reference_manual again.
    b) Write extra documentation in .tex files outside of automatic sections.
5) Goto point 3) until the Reference Manual is complete.

Doxygen:

As this tool uses Doxygen as preprocessor, you must use Doxygen conventions to document your code.
Basically, this means using ///, //!, /**...*/ or /*!...*/ to delimit the comments that Doxygen will extract.
You may also document parameters using @param (Javadoc style) or \param (Qt style).
See http://www.stack.nl/~dimitri/doxygen/docblocks.html for details.

Tips:

* This tool adds or updates automatic documentation and *never* removes the documentation manually written. Tags %START-AUTO and %END-AUTO clearly deliminate the automatic documentation.
* You have various ways to control the documentation generated by this tool:
  - generate_reference_manual documents only items with a .tex file in doc_tex/package_ref.
  - It automatically skips private items.
  - You may force it to skip a section of a source file using @cond SKIP_IN_MANUAL...@endcond.
* To generate a concept's documentation, you may create a fake C++ class named after the concept anywhere in the package's folders tree (use the dont_submit file to ignore it in CGAL releases).
* Words containing an underscore or :: are automatically changed to hyperlinks (using \ccc). You may force an hyperlink by surrounding a word with simple quotes.
* Words surrounded by double quotes are italicized (using \em).
* You may insert latex in C++ comments by surrounding it with \f$...\f$.

Known bugs:

* So far, this tool documents only concepts, classes, structs and functions.

Contact:

Please contact Laurent Saboret <Laurent.Saboret@sophia.inria.fr> if you discover a bug or wish to request for an enhancement.
