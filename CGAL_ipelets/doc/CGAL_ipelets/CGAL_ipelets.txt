
\page chapcgalipelets CGAL Ipelets 

namespace CGAL {
/*!

\mainpage CGAL Ipelets 
\anchor chapcgalipelets
\authors S&eacute;bastien Loriot and Sylvain Pion

# Introduction #

The Ipe extensible drawing editor (<A HREF="http://tclab.kaist.ac.kr/ipe/">http://tclab.kaist.ac.kr/ipe/</A>) \cite schwarzkopf1995ede,ipe:man-09
is a tool used by computational geometry researchers to produce 2D figures for inclusion in articles or presentations.
The extensible adjective sheds a light on an important feature:
the possibility for users to write small extensions (called <I>ipelets</I>)
to interface any algorithm with Ipe. This feature is especially interesting 
to produce illustrations in a paper describing a new algorithm.
This package provides one class
that eases the writing of ipelets based on \cgal, reducing the needed knowledge of the API of Ipe.
This class is designed to fulfill most of the needs to implement an ipelet for a 2D \cgal algorithm.
In addition, this package comes with more than ten complete examples
of ipelets: alpha-shape, arrangements, Voronoi diagrams, convex hulls, Hilbert curve, k-order Delaunay,
2D mesh, Minkowski sum, polygon partition, random generators, triangulations \f$ \dots\f$ 

\section seccgal_ipelets CGAL Ipelets 

The class `CGAL::Ipelet_base` derives from the class `Ipelets` from Ipe
and has one template parameter indicating 
which kernel must be used within the ipelet. 
In practice, we recommend to use either `CGAL::Exact_predicate_exact_constructions_kernel`
or `CGAL::Exact_predicate_inexact_construction_kernel`.

Two main methods are provided by the `CGAL::Ipelet_base` class.
The first one, `read_active_objects` retrieves all
primitives selected in Ipe when calling an ipelet, and converts them into equivalent \cgal objects.
The second method, `draw_in_ipe` draws \cgal objects in the Ipe
window. These functions handle basic objects such as points, segments, polygons, circles and circular arcs.

The registration of an ipelet into Ipe can be done using the macro
`CGAL_IPELET`. `CGAL_IPELET(ipelet_class_name)` 
must follow the definition of the ipelet class, in the same file source file.

# Example #

The following example shows how the class `CGAL::Ipelet_base` can be used to easily
interface the \cgal 2D Delaunay triangulation with Ipe.

\cgalexample{simple_triangulation.cpp}

\image html example.png 

# Installation of the Demo Ipelets #

Some working ipelets can be found within
the demo directory of this package. To install them you need
to go to the demo directory of the package and run cmake.
The compilation of these demo requires the source tree and the library of Ipe.
If your Ipe installation is not detected you need to set the cmake
variables `IPE_INCLUDE_DIR` and `IPE_LIBRARIES`. If you want
to install ipelets automatically (using `make install` for example)
you also need to set the cmake variable `IPELET_INSTALL_DIR`, 
if the ipelet installation path has not already been detected.
These ipelets have been tested with the versions 6.0pre28 to 6.0pre32 of Ipe,
as well as with the version 7 (at least up to version 7.10).
These ipelets are a good starting point to design your own ipelet. For more details on how
to compile an ipelet, please refer to the Ipe manual.

# Design and Implementation History #

A first draft of the \cgal ipelets has been implemented during the
internship of Nicolas Carrez, in 2005, supervised by Olivier Devillers.
Since then, the ipelets have been rewritten and extended by Sebastien
Loriot as a stand-alone software with the help of Laurent Rineau.
Finally, an enhanced version has been formally contributed to \cgal in 2009
by Sebastien Loriot. Sylvain Pion has participated in the discussion
of the overall design, and contributed the Hilbert sort ipelet demo.

*/ 
} /* namespace CGAL */

