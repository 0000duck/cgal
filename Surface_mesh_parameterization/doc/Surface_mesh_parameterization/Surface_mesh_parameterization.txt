namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_Planar_Parameterization_of_Triangulated_Surface_Meshes

\anchor chapsurface_mesh_parameterization
\cgalAutoToc

\authors Laurent Saboret, Pierre Alliez and Bruno L&eacute;vy

\section Surface_mesh_parameterizationIntroduction Introduction

Parameterizing a surface amounts to finding a one-to-one mapping from
a suitable domain to the surface. A good mapping is the one which
minimizes either angle distortions (conformal parameterization) or
area distortions (equiareal parameterization) in some sense. In this
package, we focus on parameterizing triangulated surfaces which are
homeomorphic to a disk, and on piecewise linear mappings onto a planar
domain.

Although the main motivation behind the first parameterization methods
was the application to texture mapping, it is now frequently used for
mapping more sophisticated modulation signals (such as normal,
transparency, reflection or light modulation maps), fitting scattered
data, re-parameterizing spline surfaces, repairing CAD models,
approximating surfaces and remeshing.

This \cgal package implements 
surface parameterization methods, such as least squares conformal maps,
discrete conformal map, discrete authalic
parameterization, Floater mean value coordinates or Tutte barycentric
mapping. These methods mainly distinguish by the distortion they
minimize (angles vs. areas), by the constrained border onto the
planar domain (convex polygon vs. free border) and by the guarantees
provided in terms of bijective mapping.

The package proposes an interface for any model of the concept `FaceGraph`,
that is classes as  `Polyhedron_3`, `Surface_mesh`, as well as mesh
classes of OpenMesh.


Since parameterizing meshes require efficient representation of sparse
matrices and efficient iterative or direct linear solvers, we provide
a unified interface to linear solvers  as described in Chapter 
\ref PkgSolverSummary.

Note that linear solvers commonly use double precision floating point
numbers. Therefore, this package is intended to be used with a \cgal %Cartesian kernel with doubles.


\cgalFigureBegin{Surface_mesh_parameterizationfigintroduction,introduction.jpg}
Texture mapping via Least Squares Conformal Maps parameterization. Top: original mesh and texture. Bottom: parameterizedmesh (left: parameter space, right: textured mesh).
\cgalFigureEnd

\section Surface_mesh_parameterizationBasics Basics

\subsection Surface_mesh_parameterizationDefaultSurface Default Surface Parameterization

From the user point of view, the simplest entry point to this package
is the following function:

\code{.cpp}
parameterize(TriangleMesh & mesh,
             boost::graph_traits<TriangleMesh>::halfedge_descriptor bhd,
             VertexUvMap uvm);
\endcode

The function `parameterize()` applies a default surface parameterization
method, namely Floater Mean Value Coordinates \cgalCite{cgal:f-mvc-03}, 
to the connected component of the mesh of type `TriangleMesh` with the border given by the halfedge `bhd`.
This border is parameterized with an arc-length circular border parameterization. 
The sparse linear solver used is from the \ref thirdpartyEigen library. 

The mesh of type `TriangleMesh` which must be a model of the concept `FaceGraph`, additionally 
must be triangulated, 2-manifold, oriented, and homeomorphic to a disc (possibly with holes).

The result is stored in a property map for the mesh vertices.

The adapter class `Seam_mesh` enables to introduce virtual borders, so that one can parameterize 
a mesh  that is not a topological disk.


\subsection secErrorCodes Error Codes

`Parameterizer_traits_3<TriangleMesh>` is the (pure virtual) superclass of all surface parameterizations and defines the error codes.

\todo work out this subsection

\subsection Surface_mesh_parameterizationDefaultParameterization Default Parameterization Example

In the following example, we apply the default parameterization to a
`Polyhedron_3` mesh.

\cgalExample{Surface_mesh_parameterization/Simple_parameterization.cpp}


\subsection Surface_mesh_parameterizationEnhancedparameterize Choosing a Parameterization Algorithm

This package provides a second `parameterize()` entry point
where the user can specify a parameterization method:

\code{.cpp}
parameterize(TriangleMesh& mesh,
             ParameterizerTraits_3 parameterizer,
             boost::graph_traits<TriangleMesh>::halfedge_descriptor bhd,
             VertexUvMap uvm);
\endcode

It computes a one-to-one mapping from a 3D triangle surface mesh to a
simple 2D domain. The mapping is piecewise linear on the triangle
mesh. The result is a pair `(u,v)` of parameter coordinates for each
vertex of the input mesh.  One-to-one mapping may be guaranteed or
not, depending on the chosen `ParameterizerTraits_3` algorithm.
<br>
The mesh must be a triangle surface mesh with one
connected component, and the mesh border must be mapped onto a convex
polygon (for fixed border parameterizations).



\subsection Surface_mesh_parameterizationIntroductionPC Introduction to the Package Concepts

\subsection Surface_mesh_parameterizationTheParameterizerTraits3 The ParameterizerTraits_3 Concept

This \cgal package implements 
surface parameterization methods, such as Least Squares Conformal Maps,
Discrete Conformal Map, Discrete Authalic
Parameterization, Floater Mean Value Coordinates or Tutte Barycentric
Mapping. These methods are provided as models of the
`ParameterizerTraits_3` concept. See Section \ref secSurfaceParameterizationMethods.

Each of these surface parameterization methods is templated by
the input mesh type, a border parameterization and a solver:

\cgalFigureBegin{Surface_mesh_parameterizationfigparameterizer_class_diagram_simplified,parameterizer_class_diagram_simplified.png}
A parameterizer UML class diagram (simplified).
\cgalFigureEnd

\subsection Surface_mesh_parameterizationTheBorderParameterizer3 The BorderParameterizer_3 Concept

Parameterization methods for
borders are used as traits classes modifying the behavior of
`ParameterizerTraits_3` models.
They are provided as models of the `BorderParameterizer_3` concept.
See Sections \ref secBorderParameterizationsforFixedMethods
and \ref secBorderParameterizationsforFreeMethods.

\subsection Surface_mesh_parameterizationTheSparseLinearAlgebraTraitsd The SparseLinearAlgebraTraits_d Concept

This package solves sparse linear systems using solvers which are models
of `SparseLinearAlgebraTraits_d`. See Chapter \ref PkgSolverSummary.

\subsection Surface_mesh_parameterizationTheParameterizationMesh3 The TriangleMesh Concept

As described in Section \ref secInputMeshforparameterize the input
meshes handled by `parameterize()` must be models of the
`TriangleMesh` concept. The surface parameterization methods provided
by this package only support surfaces which are homeomorphic to disks,
possibly with holes. Nevertheless meshed with arbitrary topology and
number of connected components can be parameterized, provided that the
user specifies a <I>cut graph</I> (a set of edges) which is the border
of a topological disc. 




\section secSurfaceParameterizationMethods Surface Parameterization Methods 

This \cgal package implements surface parameterization methods, such
as Least Squares Conformal Maps, Discrete Conformal Map, Discrete
Authalic Parameterization, Floater Mean Value Coordinates or Tutte
Barycentric Mapping. These methods are provided as models of the
`ParameterizerTraits_3` concept.

\subsection Surface_mesh_parameterizationFixedBorder Fixed Border Surface Parameterizations

Fixed Border Surface Parameterizations need a set of constraints: two
(u,v) coordinates for each vertex along the border.
Such border parameterizations are described in Section
\ref secBorderParameterizationsforFixedMethods.

\subsection Surface_mesh_parameterizationTutteBarycentric Tutte Barycentric Mapping

`Barycentric_mapping_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` 

The Barycentric Mapping parameterization method has been introduced by
Tutte \cgalCite{t-hdg-63}. In parameter space, each vertex is
placed at the barycenter of its neighbors to achieve the so-called
convex combination condition. This algorithm amounts to solve one
sparse linear solver for each set of parameter coordinates, with a
\#vertices x \#vertices sparse and symmetric positive definite matrix
(if the border vertices are eliminated from the linear system).
A coefficient \f$ (i, j)\f$ of the matrix is set to 1 for an edge linking
the vertex \f$ v_i\f$ to the vertex \f$ v_j\f$, to minus the degree of the
vertex \f$ v_i\f$ for a diagonal element, and to 0 for any other matrix
entry. Although a bijective mapping is guaranteed when the border is convex,
this method does not minimize angles nor areas distortion.

\cgalFigureBegin{Surface_mesh_parameterizationfiguniform,uniform.png}
Left: Tutte barycentric mapping parameterization (the red line depicts the cut graph). Right: parameter space.
\cgalFigureEnd

\subsection Surface_mesh_parameterizationDiscreteConformal Discrete Conformal Map

`Discrete_conformal_map_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` 

Discrete conformal map parameterization has been introduced by Eck et
al. to the graphics community \cgalCite{cgal:eddhls-maam-95}. It attempts to
lower angle deformation by minimizing a discrete version of the
Dirichlet energy as derived by Pinkall and
Polthier \cgalCite{cgal:pp-cdmsc-93}. A one-to-one mapping is guaranteed
only when the two following conditions are fulfilled: the barycentric mapping
condition (each vertex in parameter space is a convex combination if
its neighboring vertices), and the border is convex.
This method solves two \#vertices x \#vertices sparse linear
systems. The matrix (the same for both systems) is sparse and symmetric definite
positive (if the border vertices are eliminated from the linear system
and if the mesh contains no hole),
thus can be efficiently solved using dedicated linear solvers.

\cgalFigureBegin{Surface_mesh_parameterizationfigconformal,conformal.png}
Left: discrete conformal map. Right: parameter space.
\cgalFigureEnd

\subsection Surface_mesh_parameterizationFloaterMean Floater Mean Value Coordinates

`Mean_value_coordinates_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` 

The mean value coordinates parameterization method has been introduced
by Floater \cgalCite{cgal:f-mvc-03}. Each vertex in parameter space is
optimized so as to be a convex combination of its neighboring
vertices. The barycentric coordinates are this time unconditionally
positive, by deriving an application of the mean theorem for harmonic
functions. This method is in essence an approximation of the discrete conformal
maps, with a guaranteed one-to-one mapping when the border is convex.
This method solves two \#vertices x \#vertices sparse linear systems. The matrix (the
same for both systems) is asymmetric.

\cgalFigureBegin{Surface_mesh_parameterizationfigfloater,floater.png}
Floater Mean Value Coordinates
\cgalFigureEnd

\subsection Surface_mesh_parameterizationDiscreteAuthalic Discrete Authalic Parameterization

`Discrete_authalic_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` 

The discrete authalic parameterization method has been introduced by
Desbrun et al. \cgalCite{cgal:dma-ipsm-02}. It corresponds to
a weak formulation of an area-preserving method, and in essence
locally minimizes the area distortion. A one-to-one mapping is
guaranteed only if the convex combination condition is fulfilled and
the border is convex. This method solves two
\#vertices x \#vertices sparse linear systems. The matrix (the same
for both systems) is asymmetric.

\cgalFigureBegin{Surface_mesh_parameterizationfigauthalic,authalic.png}
Discrete Authalic Parameterization
\cgalFigureEnd

\subsection secBorderParameterizationsforFixedMethods Border Parameterizations for Fixed Methods 

Parameterization methods for
borders are used as traits classes modifying the behavior of
`ParameterizerTraits_3` models.
They are provided as models of the `BorderParameterizer_3` concept.
Border parameterizations for fixed border surface parameterizations
are a family of methods to define a set of constraints, namely two
\f$ u,v\f$ coordinates for each vertex along the border.

<UL>

<LI>The user can select a border parameterization among
two commonly used methods: uniform or arc-length parameterization.

<I>Usage:</I>

Uniform border parameterization is more stable, although it gives
poor visual results. The
arc-length border parameterization is used by default.

<LI>One convex shape specified by one shape among two standard ones:
a circle or a square.

<I>Usage:</I>

The circular border parameterization is used by default as it
corresponds to the simplest convex shape. The square border
parameterization is commonly used for texture mapping.

</UL>

`Circular_border_arc_length_parameterizer_3<TriangleMesh>` 

`Circular_border_uniform_parameterizer_3<TriangleMesh>` 

`Square_border_arc_length_parameterizer_3<TriangleMesh>` 

`Square_border_uniform_parameterizer_3<TriangleMesh>` 

\cgalFigureBegin{Surface_mesh_parameterizationfigcircular_border,border.png}
Left: Julius Cesar mask parameterization with Authalic/circular border. Right: Julius Cesar mask's image with Floater/square border.
\cgalFigureEnd

\subsection Surface_mesh_parameterizationFreeBorderSurface Free Border Surface Parameterizations

\subsection Surface_mesh_parameterizationLeastSquares Least Squares Conformal Maps

`LSCM_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` 

The Least Squares Conformal Maps (LSCM) parameterization method has
been introduced by L&eacute;vy et al. \cgalCite{cgal:lprm-lscm-02}.
It corresponds to a conformal method with a free border (at least two
vertices have to be constrained to obtain a unique solution), which
allows further lowering of the angle distortion. A one-to-one mapping
is not guaranteed by this method. It solves a (2 \f$ \times\f$
\#triangles) \f$ \times\f$ \#vertices sparse linear system in the least squares sense,
which implies solving a symmetric matrix.

\cgalFigureBegin{Surface_mesh_parameterizationfigLSCM,LSCM.png}
Least squares conformal maps.
\cgalFigureEnd

\subsection secBorderParameterizationsforFreeMethods Border Parameterizations for Free Methods 

Parameterization methods for
borders are used as traits classes modifying the behavior of
`ParameterizerTraits_3` models. They are provided as models of the `BorderParameterizer_3` concept.
The border parameterizations associated to free border surface
parameterization methods define only two constraints: the pinned vertices.

<UL>

<LI>`Two_vertices_parameterizer_3<TriangleMesh>` 

<I>Usage:</I>

`Two_vertices_parameterizer_3<TriangleMesh>` is the default
free border parameterization, and is the only one available
in the current version of this package.

</UL>

\subsection Surface_mesh_parameterizationDiscreteAuthalic_1 Discrete Authalic Parameterization Example

In the following example, we compute a Discrete Authalic parameterization
over a `Polyhedron_3<Traits>` mesh. Specifying a specific surface parameterization
instead of the default one means using the second parameter of `parameterize()`. The
differences with the first example  \ref Surface_mesh_parameterization/Simple_parameterization.cpp "Simple_parameterization.cpp" are:

\code{.cpp}

#include <CGAL/Discrete_authalic_parameterizer_3.h>

...

//***************************************
// Discrete Authalic Parameterization
//***************************************

typedef CGAL::Discrete_authalic_parameterizer_3<Mesh>
Parameterizer;

Parameterizer::Error_code err = CGAL::parameterize(mesh, Parameterizer());

...

\endcode

\subsection Surface_mesh_parameterizationSquareBorder Square Border Arc Length Parameterization Example

In the following example, we compute a Floater mean value coordinates
parameterization with a square border arc length parameterization.
Specifying a specific border parameterization
instead of the default one means using the second parameter of
`Mean_value_coordinates_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>`.
The differences with the first example \ref Surface_mesh_parameterization/Simple_parameterization.cpp "Simple_parameterization.cpp" are:

\code{.cpp}

#include <CGAL/Square_border_parameterizer_3.h>

...

//***************************************
// Floater Mean Value Coordinates parameterization
// with square border
//***************************************

// Square border parameterizer
typedef CGAL::Square_border_arc_length_parameterizer_3<Mesh>
Border_parameterizer;

// Floater Mean Value Coordinates parameterizer with square border
typedef CGAL::Mean_value_coordinates_parameterizer_3<Mesh,Border_parameterizer>
Parameterizer;

Parameterizer::Error_code err = CGAL::parameterize(mesh, Parameterizer());

...

\endcode



\section secCuttingaMesh Cutting a Mesh 

\subsection Surface_mesh_parameterizationComputingaCut Computing a Cut Graph

All surface parameterization methods proposed in this package only
deal with meshes which are homeomorphic (topologically equivalent) to
discs.  Nevertheless meshes with arbitrary topology and number of
connected components car be parameterized, provided that the user
specifies a cut graph (a set of edges), which is the
border of a topological disc. If no cut graph is provided as input,
the longest border already in the input mesh is taken as default
border, all other borders being considered as holes. Note that only
the inside part (i.e., one connected component) of the given border is
parameterized.

\cgalFigureBegin{Surface_mesh_parameterizationfigcut,cut.png}
Cut Graph
\cgalFigureEnd

This package does not provide any algorithm to transform an arbitrary mesh
into a topological disk, the user being responsible
for generating such a cut graph. Nevertheless, we provide in
\ref Surface_mesh_parameterization/polyhedron_ex_parameterization.cpp "polyhedron_ex_parameterization.cpp"
a simple cutting algorithm for the sake of completeness.

\subsection Surface_mesh_parameterizationApplyingaCut Applying a Cut

The surface parameterization classes in this package only <I>directly</I> support
surfaces which are homeomorphic to disks (models of
`TriangleMesh`). This software design simplifies the
implementation of all new parameterization methods.

The `Seam_mesh<TriangleMesh>` class is responsible for
<I>virtually</I> cutting a patch in a `TriangleMesh` mesh.  The
resulting patch is a topological disk (if the cut graph is correct)
and provides a `TriangleMesh` interface. It can be used as parameter
of `parameterize()`.


Note that this class is a decorator which adds <I>on the fly</I>
the necessary fields to unmodified \cgal data structures (using STL
maps). For better performances, it is recommended to use \cgal data
structures enriched with the proper fields. See `Polyhedron_ex`
class in \ref Surface_mesh_parameterization/polyhedron_ex_parameterization.cpp "polyhedron_ex_parameterization.cpp" example.

\subsection Surface_mesh_parameterizationCuttingaMesh Cutting a Mesh Example

In the following example, we <I>virtually</I> cut a
`Polyhedron_3<Traits>` mesh
to make it a topological disk, then applies the default parameterization:

\cgalExample{Surface_mesh_parameterization/Mesh_cutting_parameterization.cpp}



\section Surface_mesh_parameterizationComplexity Complexity and Guarantees

\subsection Surface_mesh_parameterizationParameterization Parameterization Methods and Guarantees

<UL>

<LI>Fixed boundaries

<UL>

<LI>One-to-one mapping

Tutte's theorem guarantees a one-to-one mapping provided that the weights are all positive
and the border convex.
It is the case for Tutte barycentric mapping and Floater mean value coordinates.
It is not always the case for discrete conformal map (cotangents) and
discrete authalic parameterization.

<LI>Non-singularity of the matrix

Geshorgin's theorem guarantees the convergence of the solver if the matrix is diagonal dominant.
This is the case with positive weights (Tutte barycentric mapping and Floater mean value coordinates).

</UL>

<LI>Free boundaries

<UL>

<LI>One-to-one mapping

No guarantee is provided by LSCM (both global overlaps and triangle flips can
occur).

<LI>Non-singularity of the matrix

For LSCM, the matrix of the system is the Gram matrix of a matrix with maximal rank,
and is therefore non-singular (Gram theorem).

</UL>

</UL>



\section Surface_mesh_parameterizationSoftware Software Design

\subsection Surface_mesh_parameterizationGlobalFunction Global Function parameterize()

This package's entry point is:

\code{.cpp}

// Compute a one-to-one mapping from a 3D triangle surface mesh to a
// 2D circle, using Floater Mean Value Coordinates algorithm.
// A one-to-one mapping is guaranteed.
template <class TriangleMesh>
typename Parameterizer_traits_3<TriangleMesh>::Error_code
parameterize(TriangleMesh& mesh) // 3D mesh, model of TriangleMesh concept
{
Mean_value_coordinates_parameterizer_3<TriangleMesh> parameterizer;
return parameterizer.parameterize(mesh);
}

// Compute a one-to-one mapping from a 3D triangle surface mesh to a
// simple 2D domain.
// One-to-one mapping may be guaranteed or not,
// depending on the chosen ParametizerTraits_3 algorithm.
template <class TriangleMesh, class ParameterizerTraits_3>
typename Parameterizer_traits_3<TriangleMesh>::Error_code
parameterize(TriangleMesh& mesh, // 3D mesh, model of TriangleMesh
ParameterizerTraits_3 parameterizer) // Parameterization method for mesh
{
return parameterizer.parameterize(mesh);
}

\endcode

You may notice that these global functions simply call the
parameterize() method of a `ParameterizerTraits_3` object.
The purpose of these global functions is:
<UL>
<LI>to be consistent with other \cgal algorithms that are also provided as
global functions, e.g. `convex_hull_2()`,
<LI>to provide a default parameterization method (Floater Mean Value Coordinates),
which wouldn't be possible with a direct call to an object's method.
</UL>

You may also wonder why there is not just one `parameterize()` function
with a default `ParameterizerTraits_3` argument equal to
`Mean_value_coordinates_parameterizer_3<TriangleMesh>`.
The reason is simply that this is not allowed by the C++ standard (see
\cgalCite{cgal:ansi-is14882-98}, paragraph 14.1/9).

\subsection Surface_mesh_parameterizationNoCommonParameterization No Common Parameterization Algorithm

`ParameterizerTraits_3` models modify the behavior of the global function
`parameterize()` - hence the <I>Traits</I> in the name.
On the other hand, `ParameterizerTraits_3` models do not modify the behavior
of a common parameterization algorithm - as you might expect.

In this package, we focus on triangulated surfaces that are homeomorphic to a
disk and on piecewise linear mappings onto planar domains.
A consequence is that the skeleton of all parameterization methods of this
package is the same:
<UL>
<LI>Allocate a sparse linear system \f$ A \times X = B\f$
<LI>Parameterize the mesh border and initialize \f$ B\f$
<LI>Parameterize the inner points of the mesh and set \f$ A\f$ coefficients
<LI>Solve the system
</UL>

It is tempting to make the parameterization method a traits class that
modifies the behavior of a common parameterization algorithm.
On the other hand, there are several differences among methods:
<UL>
<LI>Fixed border methods need to parameterize all border vertices,
while free border methods parameterize only two vertices.
<LI>Some methods create symmetric definite positive systems,
which may be solved more efficiently than general systems.
<LI>Most parameterization methods use two \#vertices x \#vertices systems,
where Least Squares Conformal Maps uses one (2 * \#triangles) x \#vertices system.
<LI>Most parameterization methods invert the \f$ A\f$ matrix,
when Least Squares Conformal Maps solves the system in the least squares sense.
</UL>

Therefore, the software design chosen is:
<UL>
<LI>Each `ParameterizerTraits_3` model implements its own version
of the parameterization algorithm as a parameterize() method.
<LI>Each `ParameterizerTraits_3` model has template arguments
defining the border parameterization and sparse linear solver to use,
with default values adapted to the method.
<LI>Code factorization is achieved using a class hierarchy and (few) virtual methods.
</UL>

\cgalFigureBegin{Surface_mesh_parameterizationfigparameterizer_class_diagram,parameterizer_class_diagram.png}
A parameterizer UML class diagram (main types and methods only)
\cgalFigureEnd

\cgalFigureBegin{Surface_mesh_parameterizationfigparameterizers_class_hierarchy,parameterizers_class_hierarchy.png}
Surface parameterizer classes hierarchy
\cgalFigureEnd

\note `Parameterizer_traits_3<TriangleMesh>` is the (pure virtual)
superclass of all surface parameterization classes.

\subsection Surface_mesh_parameterizationFixedborderparameterizer3 Fixed_border_parameterizer_3 Class

Linear fixed border parameterization algorithms are very close. They mainly
differ by the energy that they try to minimize, i.e.\ by the value of the \f$ w_{ij}\f$
coefficient of the \f$ A\f$ matrix, for \f$ v_i\f$ and \f$ v_j\f$ neighbor vertices of the mesh
\cgalCite{cgal:fh-survey-05}. One consequence is that most of the code of the fixed border methods is factorized in the
`Fixed_border_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>` class.

Subclasses:
<UL>
<LI>must provide `BorderParameterizer_3` and `SparseLinearAlgebraTraits_d`
default template parameters that make sense,
<LI>must implement `compute_w_ij`() to compute \f$ w_{ij}\f$ = (i, j) coefficient
of matrix \f$ A\f$ for \f$ v_j\f$ neighbor vertex of \f$ v_i\f$,
<LI>may implement an optimized version of `is_one_to_one_mapping`().
</UL>

See `Barycentric_mapping_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>`
class as an example.

\subsection Surface_mesh_parameterizationBorderParameterizations Border Parameterizations

Border Parameterizations are models of the `BorderParameterizer_3` concept.
To simplify the implementation, `BorderParameterizer_3` models know only the
`TriangleMesh` mesh class. They do not know the parameterization algorithm or the sparse linear solver used.



\section Surface_mesh_parameterizationExtendingthe Extending the Package and Reusing Code



\subsection Surface_mesh_parameterizationAddingNewParameterization Adding New Parameterization Methods

Implementing a new fixed border linear parameterization is easy. Most
of the code of the fixed border methods is factorized in the
`Fixed_border_parameterizer_3<TriangleMesh, BorderParameterizer_3, SparseLinearAlgebraTraits_d>`
class. Subclasses must mainly
implement a `compute_w_ij`() method which computes each
\f$ w_{ij}\f$ = \f$ (i, j)\f$ coefficient of the matrix \f$ A\f$ for \f$ v_j\f$ neighboring
vertices of \f$ v_i\f$.

Although implementing a new free border linear parameterization
method is more challenging, the Least Squares Conformal Maps
parameterization method provides a good starting point.

\subsection Surface_mesh_parameterizationAddingNewBorder Adding New Border Parameterization Methods

Implementing a new border parameterization method is easy.
Square, circular and two-points border parameterizations are good starting points.




*/ 
} /* namespace CGAL */

