
\authors Laurent Saboret, Pierre Alliez  and Bruno L&eacute;vy

Parameterizing a surface amounts to finding a one-to-one mapping from
a suitable domain to the surface. A good mapping is the one which
minimizes either angle or area distortions in some sense. In this
package, we focus on triangulated surfaces that are homeomorphic to a
disk and on piecewise linear mappings into a planar domain.

# Classified Reference Pages #

HEADING:Main Function 
--------------

\ref ::CGAL::parameterize  

HEADING:Concepts 
--------------

\ref ::ParameterizerTraits_3  

\ref ::BorderParameterizer_3  

\ref ::ParameterizationMesh_3  

\ref ::ParameterizationPatchableMesh_3  

\ref ::SparseLinearAlgebraTraits_d  

\ref ::PolyhedronTraitsWithKernel_3  

HEADING:Surface Parameterization Methods 
--------------

This \cgal package implements some of
the state-of-the-art parameterization methods:

<UL>

<LI>Fixed border:

<UL>

<LI>Tutte Barycentric Mapping \cite t-hdg-63.
    One-to-one mapping is guaranteed for convex border.

<LI>Floater Mean Value Coordinates \cite cgal:f-mvc-03.
    One-to-one mapping is guaranteed for convex border.

<LI>Discrete Conformal Map \cite cgal:eddhls-maam-95.
    Conditionally guaranteed if all weights are positive and border is convex.

<LI>Discrete Authalic parameterization \cite cgal:dma-ipsm-02.
    Conditionally guaranteed if all weights are positive and border is convex.

</UL>

<LI>Free border:

<UL>

<LI>Least Squares Conformal Maps \cite cgal:lprm-lscm-02.

</UL>

</UL>

\ref ::CGAL::Parameterizer_traits_3<ParameterizationMesh_3>  

\ref ::CGAL::Fixed_border_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

\ref ::CGAL::Barycentric_mapping_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

\ref ::CGAL::Discrete_authalic_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

\ref ::CGAL::Discrete_conformal_map_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

\ref ::CGAL::LSCM_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

\ref ::CGAL::Mean_value_coordinates_parameterizer_3<ParameterizationMesh_3, BorderParameterizer_3, SparseLinearAlgebraTraits_d>  

HEADING:Border Parameterization Methods 
--------------

Border parameterization methods define a
set of constraints (a constraint specifies two (u,v) coordinates for
each instance of a vertex along the border).

This package implements all common border parameterization methods:
<UL>

<LI>For fixed border methods:

<UL>

<LI>the user can select a border
        parameterization among two common methods: uniform or
        arc-length parameterizations.

<LI>one convex shape specified by:

<UL>

<LI>one shape among a set of standard ones (circle, square).

</UL>

</UL>

<LI>For free border methods: at least two constraints (the pinned
vertices).

</UL>

\ref ::CGAL::Circular_border_arc_length_parameterizer_3<ParameterizationMesh_3>  

\ref ::CGAL::Circular_border_uniform_parameterizer_3<ParameterizationMesh_3>  

\ref ::CGAL::Square_border_arc_length_parameterizer_3<ParameterizationMesh_3>  

\ref ::CGAL::Square_border_uniform_parameterizer_3<ParameterizationMesh_3>  

\ref ::CGAL::Two_vertices_parameterizer_3<ParameterizationMesh_3>  

HEADING:Mesh 
--------------

The general definition of input meshes handled <I>directly</I> by `CGAL::parameterize()` is:

<UL>

<LI>Model of `ParameterizationMesh_3`.

<LI>Triangulated.

<LI>2-manifold.

<LI>Oriented.

<LI>Homeomorphic to a disc (may have holes).

</UL>

This package provides a model of the `ParameterizationMesh_3` concept
to access `CGAL::Polyhedron_3<Traits>`: 

`CGAL::Parameterization_polyhedron_adaptor_3<Polyhedron_3_>`

The meshes supported <I>indirectly</I> by the package can be of any genus and
have any number of connected components. If it is not a topological
disc, the input mesh has to come with a description of a cutting path (an oriented list of
vertices) which is the border of a topological disc.  If no cutting path is
given as input, we assume that the surface border is the longest border already
in the input mesh (the other borders will be considered as holes).

The `CGAL::Parameterization_mesh_patch_3<ParameterizationPatchableMesh_3>`
class is responsible for <I>virtually</I> cutting
a patch in a `ParameterizationPatchableMesh_3` mesh.
The resulting patch is a topological
disk (if the input cutting path is correct)
and provides a `ParameterizationMesh_3` interface. It can be used as
parameter of `CGAL::parameterize()`.

Note that this way the user is responsible for cutting a closed mesh of
arbitrary genus (even a topological disc with an intricate seam
cut), as long as this condition is fulfilled.

The package provides an interface with `CGAL::Polyhedron_3<Traits>`: 

\ref ::CGAL::Parameterization_polyhedron_adaptor_3<Polyhedron_3_>

HEADING:Output 
--------------

A \f$ (u,v)\f$ pair is computed for
each inner vertex (i.e. its halfedges share the same \f$ (u,v)\f$ pair),
while a \f$ (u,v)\f$ pair is computed for each border halfedge.
The user must iterate over the mesh halfedges to get the result.

HEADING:Sparse Linear Algebra 
--------------

Since parameterizing meshes requires
efficient representation of sparse matrices and efficient iterative or
direct linear solvers, we provide an interface to several
sparse linear solvers:
<UL>
<LI><span class="textsc">Eigen</span> 3.1 (or greater) is the library recommended by \cgalfor solving sparse systems.
<LI>OpenNL (authored by Bruno L&eacute;vy) is shipped with \cgaland is the default solver.
<LI><span class="textsc">Taucs</span> is a direct solver for sparse symmetric matrices.
    It also includes an out-of-core general solver.
</UL>

`OpenNL::DefaultLinearSolverTraits<COEFFTYPE, MATRIX, VECTOR, SOLVER>` in OpenNL package  

`OpenNL::SymmetricLinearSolverTraits<COEFFTYPE, MATRIX, VECTOR, SOLVER>` in OpenNL package  

\ref ::CGAL::Eigen_solver_traits<T>  

\ref ::CGAL::Taucs_solver_traits<T>  

\ref ::CGAL::Taucs_symmetric_solver_traits<T>  

HEADING:Helper Classes 
--------------

\ref ::CGAL::Parameterization_mesh_feature_extractor<ParameterizationMesh_3>  

HEADING:Checks and Assertions 
--------------

The package performs the next checks:

For <I>fixed</I> border parameterizations:
<UL>
<LI>Preconditions:
    <UL>
    <LI>check that the border is mapped onto a convex polygon.
    <LI>check that the input mesh is triangular.
    <LI>check that the input mesh is a surface with one connected component.
    </UL>
<LI>Postconditions:
    <UL>
    <LI>check one-to-one mapping.
    </UL>
</UL>

For <I>free</I> border parameterizations:
<UL>
<LI>Preconditions:
    <UL>
    <LI>check that the input mesh is triangular.
    <LI>check that the input mesh is a surface with one connected component.
    </UL>
<LI>Postconditions:
    <UL>
    <LI>check one-to-one mapping.
    </UL>
</UL>

Assertions are optional checks. The assertion flags for the package
use `SURFACE_MESH_PARAMETERIZATION` in their names (<I>e.g.</I>,
`CGAL_SURFACE_MESH_PARAMETERIZATION_NO_ASSERTIONS`).
