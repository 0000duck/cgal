#! /bin/sh

#
# This script is a modified version of cgal_test_with_cmake which:
# - is cross-platform Unix/make and Cygwin/VisualC++
# - concats all log files to cgal_test_with_cmake.log
# - does not clean up object files and executables (too slow when called by developer)
#

# This is a script for the CGAL test suite. Such a script must obey
# the following rules:
#
# - the name of the script is cgal_test_with_cmake
# - for every target two one line messages are written to the file 'error.txt'
#     the first one indicates if the compilation was successful
#     the second one indicates if the execution was successful
#   if one of the two was not successful, the line should start with 'ERROR:'
# - running the script should not require any user interaction

  ERRORFILE=error.txt
  DO_RUN=y
  case "$CMAKE_GENERATOR" in
  Visual* ) # if VisualC++
      solution=`ls *.sln`
      MAKE_CMD="devenv ${solution} /Build Release /Project"
      ;;
  * ) # if make
      MAKE_CMD="make -fMakefile"
      ;;
  esac
  NEED_CLEAN=

#---------------------------------------------------------------------#
#                    configure
#---------------------------------------------------------------------#

configure()
{
  echo "Configuring... "

  if eval 'cmake "$CMAKE_GENERATOR" -DRUNNING_CGAL_AUTO_TEST=TRUE  \
                                     -DCGAL_DIR="$CGAL_DIR" \
                                     .' ; then

    echo "   succesful configuration" >> $ERRORFILE
  else
    echo "   ERROR:    configuration" >> $ERRORFILE
  fi
}

#---------------------------------------------------------------------#
#                   find_executable <target>
#                   (different on Windows and Unix)
#---------------------------------------------------------------------#

find_executable()
{
    PARAM_APPLICATION=""
    [ -f ./release/$1.exe ] && PARAM_APPLICATION="./release/$1.exe"
    [ -f ./x64/release/$1.exe ] && PARAM_APPLICATION="./x64/release/$1.exe"
    [ -x ./$1 ] && PARAM_APPLICATION="./$1"
    echo "$PARAM_APPLICATION"
}

#---------------------------------------------------------------------#
#                    compile_and_run <target>
#---------------------------------------------------------------------#

compile_and_run()
{
  echo "Compiling $1 ... "
  SUCCES="y"

  if eval '${MAKE_CMD} $1' ; then
    echo "   succesful compilation of $1" >> $ERRORFILE
  else
    echo "   ERROR:    compilation of $1" >> $ERRORFILE
    SUCCES=""
  fi

  if [ -n "$DO_RUN" ] ; then
    if [ -n "${SUCCES}" ] ; then
      OUTPUTFILE=ProgramOutput.$1.$PLATFORM
      rm -f $OUTPUTFILE
      COMMAND="`find_executable $1`"
      if [ -f $1.cmd ] ; then
        COMMAND="$COMMAND `cat $1.cmd`"
      fi
      if [ -f $1.cin ] ; then
        COMMAND="cat $1.cin | $COMMAND"
      fi
      echo "Executing $1 ... "
      echo
      ulimit -t 3600 2> /dev/null
      if eval $COMMAND > $OUTPUTFILE 2>&1 ; then
          echo "   successful execution   of $1" >> $ERRORFILE
      else
        echo "   ERROR:    execution   of $1" >> $ERRORFILE
      fi
    else
      echo   "   ERROR:    not executed   $1" >> $ERRORFILE
    fi
  fi
}


# Backup previous log file cgal_test_with_cmake.log
[ -f cgal_test_with_cmake.log ] && mv -f cgal_test_with_cmake.log cgal_test_with_cmake.log.bak

# redirect cgal_test_with_cmake output to log file cgal_test_with_cmake.log
echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo "- Compiler output from platform $PLATFORM"                          >> cgal_test_with_cmake.log
echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo                                                                      >> cgal_test_with_cmake.log
(

#---------------------------------------------------------------------#
#                    remove the previous error file
#---------------------------------------------------------------------#

rm -f $ERRORFILE
touch $ERRORFILE

#---------------------------------------------------------------------#
#                    configure, compile and run the tests
#---------------------------------------------------------------------#

configure

if [ $# -ne 0 ] ; then
  for file in $* ; do
    compile_and_run $file
  done
else
  echo "Run all tests."
  compile_and_run APSS_reconstruction_test
  compile_and_run poisson_reconstruction_test

  # Do *not* call make clean (too slow when called by developer)
  NEED_CLEAN=
fi

#
# The clean target generated by CMake under cygwin
# always fails for some reason
#
if [ -n "${NEED_CLEAN}" ]; then
  if ! ( uname | grep -q "CYGWIN" ) ; then
    ${MAKE_CMD} -fMakefile clean
  fi
fi

) 2>&1 | tee -a cgal_test_with_cmake.log

#---------------------------------------------------------------------#
#                   Catenate other log files to cgal_test_with_cmake.log
#---------------------------------------------------------------------#

echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo "- Tests output for platform $PLATFORM"                              >> cgal_test_with_cmake.log
echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo                                                                      >> cgal_test_with_cmake.log
cat ProgramOutput.*.$PLATFORM                                             >> cgal_test_with_cmake.log
echo                                                                      >> cgal_test_with_cmake.log

echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo "- Error output from platform $PLATFORM"                             >> cgal_test_with_cmake.log
echo "------------------------------------------------------------------" >> cgal_test_with_cmake.log
echo                                                                      >> cgal_test_with_cmake.log
cat $ERRORFILE                                                            >> cgal_test_with_cmake.log

