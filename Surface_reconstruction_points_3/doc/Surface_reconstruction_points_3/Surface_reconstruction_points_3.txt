namespace CGAL {
/*!

\mainpage Surface Reconstruction from Point Sets
\anchor Chapter_Surface_Reconstruction_from_Point_Sets
\autotoc

\authors Pierre Alliez, Laurent Saboret, Ga&euml;l Guennebaud

\section Surface_reconstruction_points_3Introduction Introduction

This \cgal component implements a surface reconstruction method which
takes as input point sets with oriented normals and computes an
implicit function. We assume that the input points contain no outliers
and little noise. The output surface mesh is generated by extracting
an isosurface of this function with the \cgal Surface Mesh Generator
\cite cgal:ry-gsddrm-06 or potentially with any other surface
contouring algorithm.

\anchor Surface_reconstruction_points_3figintroduction
\image html introduction.jpg "Poisson surface reconstruction. Left: 17K points sampled on the statue of an elephant with a Minolta laser scanner. Right: reconstructed surface mesh."

More specifically, the core surface reconstruction algorithm consists
of computing an implicit function which is an approximate indicator
function of the inferred solid (Poisson Surface Reconstruction -
referred to as Poisson). Poisson is a two steps process: it requires
solving for the implicit function before function evaluation.

\section Surface_reconstruction_points_3Common Common Reconstruction Pipeline

Surface reconstruction from point sets is often a sequential process
with the following steps: 1) Scanning and scan alignment produce a set
of points or points with normals; 2) Outlier removal; 3)
Simplification to reduce the number of input points; 4) Smoothing to
reduce noise in the input data; 5) Normal estimation and orientation
when the normals are not already provided by the acquisition device;
and 6) Surface reconstruction.

\cgal provides algorithms for all steps listed above except alignment. 

Chapter \ref chappoint_set_processing_3 "Point Set Processing"
describes algorithms to pre-process the point set before
reconstruction with functions devoted to the simplification, outlier
removal, smoothing, normal estimation and normal orientation.

\cgal_figure_begin{Surface_reconstruction_points_3figpipeline,pipeline.jpg}
Common surface reconstruction pipeline.
\cgal_figure_end

\section Surface_reconstruction_points_3Poisson Poisson

Given a set of 3D points with oriented normals (denoted oriented
points in the sequel) sampled on the boundary of a 3D solid, the
Poisson Surface Reconstruction method \cite Kazhdan06 solves for an
approximate indicator function of the inferred solid, whose gradient
best matches the input normals. The output scalar function,
represented in an adaptive octree, is then iso-contoured using an
adaptive marching cubes.

\cgal implements a variant of this algorithm which solves for a
piecewise linear function on a 3D Delaunay triangulation instead of an
adaptive octree. The algorithm takes as input a set of 3D oriented
points. It builds a 3D Delaunay triangulation from these points and
refines it by Delaunay refinement so as to remove all badly shaped
(non isotropic) tetrahedra and to tessellate a loose bounding box of
the input oriented points. The normal of each Steiner point added
during refinement is set to zero. It then solves for a scalar
indicator function \f$ f\f$ represented as a piecewise linear function
over the refined triangulation. More specifically, it solves for the
Poisson equation \f$ \Delta f = div(\mathbf{n})\f$ at each vertex of
the triangulation using a sparse linear solver. Eventually, the \cgal
surface mesh generator extracts an isosurface with function value set
by default to be the median value of \f$ f\f$ at all input points.

\subsection Surface_reconstruction_points_3Interface Interface

The class template declaration is:

\code{.cpp}

template < 
    class Gt // geometric traits class
    >
class Poisson_reconstruction_function {
  // Creation
  template<typename InputIterator, typename PointPMap, typename NormalPMap> 
  Poisson_reconstruction_function::Poisson_reconstruction_function(InputIterator first, InputIterator beyond, PointPMap point_pmap, NormalPMap normal_pmap);

  // Main Operations
  Sphere bounding_sphere() const;

  bool compute_implicit_function();

  FT value(const Point& p) const;
  Point get_inner_point() const;
};
\endcode

For details see: `Poisson_reconstruction_function<GeomTraits>`

\subsection Surface_reconstruction_points_3Example Example

The following example reads a point set, creates a Poisson implicit function and reconstructs a surface.

\cgalexample{Surface_reconstruction_points_3/poisson_reconstruction_example.cpp}

\section Surface_reconstruction_points_3Contouring Contouring


The computed implicit functions can be iso-contoured to reconstruct a
surface by using the \cgal surface mesh generator 
\cite cgal:ry-gsddrm-06 \cite cgal:bo-pgsms-05 :

`make_surface_mesh()` 

The parameter `Tag` affects the behavior of `make_surface_mesh()`: 
- `Manifold_tag`: the output mesh is guaranteed to be a manifold surface without boundary.
- `Manifold_with_boundary_tag`: the output mesh is guaranteed to be manifold and may have boundaries.
- `Non_manifold_tag`: the output mesh has no guarantee and hence is outputted as a polygon soup.

\section Surface_reconstruction_points_3Output Output

The surface reconstructed by `make_surface_mesh()` is required to be a
model of the concept `SurfaceMeshComplex_2InTriangulation_3`, a data
structure devised to represent a two dimensional complex embedded into
a three dimensional triangulation.

`SurfaceMeshComplex_2InTriangulation_3` defines the methods to traverse the reconstructed surface, and e.g. convert it to a triangle soup.

Other \cgal components provide functions to write the reconstructed
surface mesh to the %Object File Format (OFF) \cite cgal:p-gmgv16-96
and to convert it to a polyhedron (when it is manifold):
- `output_surface_facets_to_off()` 
- `output_surface_facets_to_polyhedron()` 

See \ref Surface_reconstruction_points_3/poisson_reconstruction_example.cpp "poisson_reconstruction_example.cpp" example above.

\section surface_reconstruction_section_case_studies Case Studies

The surface reconstruction problem being inherently ill-posed, the
proposed algorithm does not pretend to reconstruct all kinds of
surfaces with arbitrary sampling conditions. This section provides the
user with some hints about the ideal sampling and contouring
conditions, and depicts some failure cases when these conditions are
not matched.

\subsection Surface_reconstruction_points_3IdealConditions Ideal Conditions

The user must keep in mind that the poisson surface reconstruction
algorithm comprises two phases (computing the implicit function from
the input point set and contouring an iso-surface of this
function). Both require some care in terms of sampling conditions and
parameter tuning.

\subsection Surface_reconstruction_points_3PointSet Point Set

Ideally the current implementation of the Poisson surface
reconstruction method expects a dense 3D oriented point set (typically
matching the epsilon-sampling condition \cite cgal:bo-pgsms-05) and
sampled over a closed, smooth surface. Oriented herein means that all
3D points must come with consistently oriented normals to the inferred
surface. Figure \cgal_figure_ref{Surface_reconstruction_points_3figbimba} and \cgal_figure_ref{Surface_reconstruction_points_3figeros} 
illustrate cases where these ideal conditions are met.

\cgal_figure_begin{Surface_reconstruction_points_3figbimba,bimba.jpg}
Poisson reconstruction. Left: 120K points sampled on a statue (Minolta laser scanner). Right: reconstructed surface mesh.
\cgal_figure_end

\cgal_figure_begin{Surface_reconstruction_points_3figeros,eros.jpg}
Left: 120K points sampled on a statue (Minolta laser scanner). Right: reconstructed surface mesh.
\cgal_figure_end

The algorithm is fairly robust to anisotropic sampling and to
noise. It is also robust to missing data through filling the
corresponding holes as the algorithm is designed to reconstruct the
indicator function of an inferred solid (see
\cgal_figure_ref{Surface_reconstruction_points_3figholes_good}).

\cgal_figure_begin{Surface_reconstruction_points_3figholes_good,holes_good.jpg}
Top left: 65K points sampled on a hand (Kreon laser scanner). Bottom left: the point set is highly anisotropic due to the scanning technology. Right: reconstructed surface mesh and closeup. The holes are properly closed.
\cgal_figure_end

The algorithm is in general not robust to outliers, although a few
outliers do not always create a failure, see
\cgal_figure_ref{Surface_reconstruction_points_3figoutliers}.

\cgal_figure_begin{Surface_reconstruction_points_3figoutliers,outliers.jpg}
Left: 70K points sampled on an elephant with few outliers emphasized with disks. Right: reconstructed surface mesh.
\cgal_figure_end

The algorithm works well even when the inferred surface is composed of
several connected components, provided that both all normals are
properly estimated and oriented (the current \cgal normal orienter
algorithm may fail in some cases, see `mst_orient_normals()`),
and that the final contouring algorithm is properly seeded for each
component. When the inferred surface is composed of several nested
connected components care should be taken to orient the normals of
each component in alternation (inward/outward) so that the final
contouring stage picks a proper contouring value.

\subsection Surface_reconstruction_points_3ContouringP Contouring Parameters

Our implementation of the Poisson surface reconstruction algorithm
computes an implicit function represented as a piecewise linear
function over the tetrahedra of a 3D Delaunay triangulation
constructed from the input points then refined through Delaunay
refinement. For this reason, any iso-surface is also piecewise linear
and hence may contain sharp creases. As the contouring algorithm
`make_surface_mesh()` expects a smooth implicit function these
sharp creases may create spurious clusters of vertices in the final
reconstructed surface mesh when setting a small mesh sizing or surface
approximation error parameter (see
\cgal_figure_ref{Surface_reconstruction_points_3figcontouring_bad}).

One way to avoid these spurious clusters consists of adjusting the
mesh sizing and surface approximation parameters large enough compared
to the average sampling density (obtained through
`compute_average_spacing()`) so that the contouring algorithm
<i>perceives</i> a smooth iso-surface. We recommend to use the following
contouring parameters:

- Max triangle radius: at least 100 times the average spacing.
- Approximation distance: at least 0.25 times the average spacing.

\cgal_figure_begin{Surface_reconstruction_points_3figcontouring_bad,contouring_bad.jpg}
Left: surface reconstructed with approximation distance = 0.25 * average spacing. Right: surface reconstructed with approximation distance = 0.15 * average spacing. Notice the spurious cluster on the chick.
\cgal_figure_end

\subsection Surface_reconstruction_points_3DegradedConditions Degraded Conditions

The conditions listed above are rather restrictive and in practice not
all of them are met in the applications. We now illustrates the
behavior of the algorithm when the conditions are not met in terms of
sampling, wrongly oriented normals, noise and sharp creases.

\subsection Surface_reconstruction_points_3SparseSampling Sparse Sampling

The reconstruction algorithm expects a sufficiently dense point
set. Although there is no formal proof of correctness of the algorithm
under certain density conditions due to its variational nature, our
experiments show that the algorithm reconstructs well all thin
features when the local spacing is at most one tenth of the local
feature size (the distance to the medial axis, which captures
altogether curvature, thickness and separation). When this condition
is not met the reconstruction does not reconstruct the thin
undersampled features (see
\cgal_figure_ref{Surface_reconstruction_points_3figsampling}).

\cgal_figure_begin{Surface_reconstruction_points_3figsampling,sampling.jpg}
Left: 50K points sampled on the Neptune trident. The reconstruction (not shown) is successful in this case. Right: point set simplified to 1K points then reconstructed (all input points are depicted with normals). The thin feature is not reconstructed.
\cgal_figure_end

\subsection Surface_reconstruction_points_3LargeHoles Large Holes

The reconstruction is devised to solve for an implicit function which
is an approximate indicator function of an inferred solid. For this
reason the contouring algorithm always extracts a closed surface mesh
and hence is able to fill the small holes where data are missing due,
e.g., to occlusions during acquisition. In case of large holes the
algorithm still closes them all but sometimes in an unexpected
manner. In addition the resulting piecewise linear implicit function
may exhibit large triangle patches and sharp creases as the 3D
Delaunay triangulation used for solving is very coarse where the holes
are filled (see
\cgal_figure_ref{Surface_reconstruction_points_3figholes_bad}).

\cgal_figure_begin{Surface_reconstruction_points_3figholes_bad,holes_bad.jpg}
Left: 65K points sampled on a hand with no data captured at the wrist base. Right: reconstructed surface mesh. The surface is properly closed on the fingers and also closed at the wrist but in a less plausible manner.
\cgal_figure_end

\subsection Surface_reconstruction_points_3WronglyOriented Wrongly Oriented Normals

The Poisson surface reconstruction approaches solves for an implicit
function whose gradient best matches a set of input normals. Because
it solves this problem in the least squares sense, it is robust to few
isolated wrongly oriented (flipped) normals. Nevertheless a cluster of
wrongly oriented normals leads to an incorrect implicit function and
hence to spurious geometric or even topological distortion (see
\cgal_figure_ref{Surface_reconstruction_points_3figflipped_normals}).

\cgal_figure_begin{Surface_reconstruction_points_3figflipped_normals,flipped_normals.jpg}
Left: points sampled on a sphere with a cluster of wrongly oriented normals. Right: reconstructed surface mesh with a spurious bump.
\cgal_figure_end

\subsection Surface_reconstruction_points_3NoiseandOutliers Noise and Outliers

A large amount of noise inevitably impacts on the reconstruction (see
\cgal_figure_ref{Surface_reconstruction_points_3fignoise}, top) and the
current implementation does not provide any mean to trade data fitting
for smoothness. Nevertheless if the signal-to-noise ratio is
sufficiently high and/or the surface approximation and sizing
parameters set for contouring the iso-surface is large with respect to
the noise level the output surface mesh will appear smooth (not
shown). If the user wants to produce a smooth and detailed output
surface mesh, we recommend to apply smoothing through
`jet_smooth_point_set()` ((see
\cgal_figure_{Surface_reconstruction_points_3fignoise}, bottom).

\cgal_figure_begin{Surface_reconstruction_points_3fignoise,noise.jpg}
Top-left: points sampled on a sphere and corrupted with a lot of noise. Top-right: reconstructed surface mesh. Bottom-left: smoothed point set. Bottom-right: reconstructed surface mesh.
\cgal_figure_end

For a large number of outliers the failure cases (not shown) translate
into spurious small connected components and massive distortion near
the inferred surface. In this case the outliers must be removed
through `remove_outliers()`.

\subsection Surface_reconstruction_points_3SharpCreases Sharp Creases

The current reconstruction algorithm is not able to recover the sharp
creases and corners present in the inferred surface. This translates
into smoothed sharp creases.

\cgal_figure_begin{Surface_reconstruction_points_3figsharp_features,sharp_features.jpg}
Left: 5K points sampled on a mechanical piece with sharp features (creases, darts and corners). Right: reconstructed surface mesh with smoothed creases.
\cgal_figure_end

*/ 
} /* namespace CGAL */

/// \example Surface_reconstruction_points_3/poisson_reconstruction_example.cpp
